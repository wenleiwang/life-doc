import{_ as t,o as d,c as a,a as e}from"./app-7rGY8hGP.js";const r={},s=e('<h1 id="常用java虚拟机调优参数" tabindex="-1"><a class="header-anchor" href="#常用java虚拟机调优参数" aria-hidden="true">#</a> 常用Java虚拟机调优参数</h1><table><thead><tr><th>JVM参数</th><th>解释</th></tr></thead><tbody><tr><td>-Xmx2g</td><td>设置 JVM 的最大堆内存为 2GB。这是 Java 堆可使用的最大内存量。</td></tr><tr><td>-Xms2g</td><td>设置 JVM 的初始堆内存为 2GB。这是 Java 堆的初始内存大小，在 JVM 启动时将分配给堆。</td></tr><tr><td>-Xmn768m</td><td>设置 JVM 的年轻代初始大小为 768MB。年轻代是 Java 堆中用于存放新创建的对象的区域。</td></tr><tr><td>-XX:MetaspaceSize=256m</td><td>设置 Metaspace（元空间）的初始大小为 256MB。Metaspace 用于存放类的元数据。</td></tr><tr><td>-XX:MaxMetaspaceSize=256m</td><td>设置 Metaspace（元空间）的最大大小为 256MB。当 Metaspace 达到这个大小时，JVM 将触发垃圾回收来回收不再使用的类元数据。</td></tr><tr><td>-Xss256k</td><td>设置每个线程的栈大小为 256KB。这决定了每个线程可使用的内存大小。</td></tr><tr><td>-XX:+UseG1GC</td><td>指定使用 G1 (Garbage-First) 垃圾回收器。G1 是一种现代的垃圾回收器，适用于大内存和多核处理器的应用。</td></tr><tr><td>-XX:+AlwaysPreTouch</td><td>指定在 JVM 启动时，将堆的所有页面都预先分配和填充，以避免后续使用时的延迟。</td></tr><tr><td>-XX:-ResizePLAB</td><td>禁用自适应的 Parallel Lab（PLAB）大小调整。PLAB 是 G1 回收器中用于优化对象分配的一种技术。</td></tr><tr><td>-XX:+ParallelRefProcEnabled</td><td>启用并行的引用处理。这允许 G1 回收器在处理引用时使用并行处理。</td></tr><tr><td>-XX:+ExplicitGCInvokesConcurrent</td><td>允许显式调用 System.gc() 时与并发标记周期并行执行垃圾回收。</td></tr><tr><td>-XX:MaxGCPauseMillis=200</td><td>设置期望的最大 GC 暂停时间为 200 毫秒。G1 回收器将尽力保持 GC 暂停时间在这个范围内。</td></tr><tr><td>-XX:ParallelGCThreads=4</td><td>设置并行垃圾回收的线程数为 4。这决定了在进行并行垃圾回收时使用的线程数量。</td></tr><tr><td>-XX:ConcGCThreads=2</td><td>设置并发垃圾回收的线程数为 2。这决定了在进行并发垃圾回收时使用的线程数量。</td></tr></tbody></table>',2),c=[s];function l(_,o){return d(),a("div",null,c)}const n=t(r,[["render",l],["__file","常用Java虚拟机调优参数.html.vue"]]);export{n as default};
