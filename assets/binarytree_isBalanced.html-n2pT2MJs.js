import{_ as p,r as l,o as c,c as o,b as n,e,w as t,d as s,a as i}from"./app-7rGY8hGP.js";const u="/life-doc/assets/f9a165597777636fbdf6e510d5b294de-WNnltTyO.png",d="/life-doc/assets/e17e3c652bd46216a45286c285205b11-0H-ms1PO.png",r={},k=n("h1",{id:"判断二叉树是否是平衡二叉树",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#判断二叉树是否是平衡二叉树","aria-hidden":"true"},"#"),s(" 判断二叉树是否是平衡二叉树")],-1),v={class:"table-of-contents"},m=i('<h2 id="_0-题目" tabindex="-1"><a class="header-anchor" href="#_0-题目" aria-hidden="true">#</a> 0.题目</h2><p>输入一棵节点数为 n 二叉树，判断该二叉树是否是平衡二叉树。 在这里，我们只需要考虑其平衡性，不需要考虑其是不是排序二叉树 平衡二叉树（Balanced Binary Tree），具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。 样例解释：</p><p><img src="'+u+`" alt=""></p><p>样例二叉树如图，为一颗平衡二叉树 注：我们约定空树是平衡二叉树。 数据范围：n \\le 100n≤100,树上节点的val值满足 0 ≤n ≤ 1000 要求：空间复杂度O(1)，时间复杂度 O(n)</p><p>输入描述： 输入一棵二叉树的根节点 返回值描述： 输出一个布尔类型的值</p><p>示例1</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：
{1,2,3,4,5,6,7}
返回值：
true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例2</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：
{}
返回值：
true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-思路" tabindex="-1"><a class="header-anchor" href="#_1-思路" aria-hidden="true">#</a> 1.思路</h2><h3 id="_1-1罗列可能性" tabindex="-1"><a class="header-anchor" href="#_1-1罗列可能性" aria-hidden="true">#</a> 1.1罗列可能性</h3><p>通过左右子树信息什么条件才使二叉树是平衡二叉树成立。</p><ol><li>左子树是平衡二叉树</li><li>右子树是平衡二叉树</li><li>|左子树 - 右子树| &lt;= 1</li></ol><p>3个条件同时成立则这个结点构成的树是平衡二叉树</p><h3 id="_1-2构建返回体" tabindex="-1"><a class="header-anchor" href="#_1-2构建返回体" aria-hidden="true">#</a> 1.2构建返回体</h3><p>左树：</p><ol><li>左树是否是平衡二叉树</li><li>左树高度</li></ol><p>右树：</p><ol><li>右树是否是平衡二叉树</li><li>右树高度</li></ol><p>两边一样则返回体有2个参数，是否是平衡二叉树，高度。</p><h3 id="_1-3返回参数求解逻辑" tabindex="-1"><a class="header-anchor" href="#_1-3返回参数求解逻辑" aria-hidden="true">#</a> 1.3返回参数求解逻辑</h3><p>是否是平衡二叉树：(左子树是平衡二叉树 &amp;&amp; 右子树是平衡二叉树 &amp;&amp; |左子树 - 右子树| &lt;= 1) 高度：</p><ol><li>叶子结点下面，空节点返回高度为0</li><li>根据后续遍历特性，从底向上遍历，所以得到左右子树最大值向上递增1，即可得到每层的高度</li></ol><p><img src="`+d+`" alt=""></p><h2 id="_2-代码" tabindex="-1"><a class="header-anchor" href="#_2-代码" aria-hidden="true">#</a> 2.代码</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bm36_IsBalanced</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TreeNode</span> tree <span class="token operator">=</span> <span class="token class-name">CreateTree</span><span class="token punctuation">.</span><span class="token function">createTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">IsBalanced_Solution</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token class-name">IsBalanced_Solution</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">.</span>isBalanced<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">IsBalanced</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">IsBalanced</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">IsBalanced</span> left <span class="token operator">=</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">IsBalanced</span> right <span class="token operator">=</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> is <span class="token operator">=</span> left<span class="token punctuation">.</span>isBalanced <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">.</span>isBalanced <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>height <span class="token operator">-</span> right<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>height<span class="token punctuation">,</span>right<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">IsBalanced</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">IsBalanced</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">boolean</span> isBalanced<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">int</span> height<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token class-name">IsBalanced</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isBalanced<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>isBalanced <span class="token operator">=</span> isBalanced<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26);function h(b,_){const a=l("router-link");return c(),o("div",null,[k,n("nav",v,[n("ul",null,[n("li",null,[e(a,{to:"#_0-题目"},{default:t(()=>[s("0.题目")]),_:1})]),n("li",null,[e(a,{to:"#_1-思路"},{default:t(()=>[s("1.思路")]),_:1}),n("ul",null,[n("li",null,[e(a,{to:"#_1-1罗列可能性"},{default:t(()=>[s("1.1罗列可能性")]),_:1})]),n("li",null,[e(a,{to:"#_1-2构建返回体"},{default:t(()=>[s("1.2构建返回体")]),_:1})]),n("li",null,[e(a,{to:"#_1-3返回参数求解逻辑"},{default:t(()=>[s("1.3返回参数求解逻辑")]),_:1})])])]),n("li",null,[e(a,{to:"#_2-代码"},{default:t(()=>[s("2.代码")]),_:1})])])]),m])}const w=p(r,[["render",h],["__file","binarytree_isBalanced.html.vue"]]);export{w as default};
