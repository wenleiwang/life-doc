import{_ as a,o as e,c as n,a as s}from"./app-7rGY8hGP.js";const c={},o=s(`<h1 id="docker里执行redis命令的lua脚本" tabindex="-1"><a class="header-anchor" href="#docker里执行redis命令的lua脚本" aria-hidden="true">#</a> Docker里执行Redis命令的Lua脚本</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>Redis 是一个广泛使用的内存数据库，它提供了强大的 Lua 脚本执行器，可以在 Redis 服务器上运行自定义脚本，本文将简单展示如何在 Docker 里执行 Redis 命令的 Lua 脚本。</p><h2 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作" aria-hidden="true">#</a> 准备工作</h2><ul><li>安装 docker</li><li>用 docker 下载 redis</li><li>使用 docker 启动 redis 服务</li></ul><h2 id="编写和执行-lua-脚本" tabindex="-1"><a class="header-anchor" href="#编写和执行-lua-脚本" aria-hidden="true">#</a> 编写和执行 Lua 脚本</h2><h3 id="进入redis-容器" tabindex="-1"><a class="header-anchor" href="#进入redis-容器" aria-hidden="true">#</a> 进入Redis 容器</h3><p>要执行 Lua 脚本，我们首先需要进入 Redis 容器的命令行界面。可以使用以下命令进入容器：</p><p><code>docker exec -it my-redis redis-cli</code></p><h3 id="创建-lua-脚本" tabindex="-1"><a class="header-anchor" href="#创建-lua-脚本" aria-hidden="true">#</a> 创建 Lua 脚本</h3><p>在 Redis 容器的命令行界面中，我们可以创建一个 Lua 脚本。以下是一个简单的示例：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> name <span class="token operator">=</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">local</span> age <span class="token operator">=</span> ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>

redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;SET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;SET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个脚本接受两个参数 name 和 age，然后使用 Redis 的 SET 命令将这两个值分别存储在 name 和 age 键中。</p><p>执行 Lua 脚本 要在 Redis 容器中执行 Lua 脚本，我们可以使用以下命令：</p><p><code>EVAL &quot;lua_script&quot; numkeys key [key ...] arg [arg ...]</code> 其中 <code>lua_script</code> 是 Lua 脚本的内容，<code>numkeys</code> 是脚本中需要访问的键的数量，<code>key</code> 是需要访问的键的名称，<code>arg</code> 是脚本的参数。</p><p>在我们的示例中，我们可以使用以下命令来执行 Lua 脚本： <code>EVAL &quot;local name = ARGV[1]\\nlocal age = ARGV[2]\\n\\nredis.call(&#39;SET&#39;, &#39;name&#39;, name)\\nredis.call(&#39;SET&#39;, &#39;age&#39;, age)&quot; 0 &quot;John Doe&quot; &quot;30&quot;</code></p><p>这个命令将会在 Redis 服务器上执行 Lua 脚本，并将 “John Doe” 存储在 name 键中，将 “30” 存储在 age 键中。</p><p>[Springboot 如何执行Lua脚本请看Redis实现布隆过滤器里方式二：Redis Lua脚本](./Redis实现布隆过滤器.md#方式二：Redis Lua脚本)</p><hr><p>完</p><p>#Lau脚本</p>`,21),i=[o];function t(d,p){return e(),n("div",null,i)}const r=a(c,[["render",t],["__file","Docker里执行Redis命令的Lua脚本.html.vue"]]);export{r as default};
