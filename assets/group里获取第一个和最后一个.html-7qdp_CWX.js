import{_ as p,r as o,o as c,c as l,b as n,d as s,e,a as t}from"./app-7rGY8hGP.js";const i={},u=t(`<h1 id="mysql-group里获取第一个和最后一个" tabindex="-1"><a class="header-anchor" href="#mysql-group里获取第一个和最后一个" aria-hidden="true">#</a> MySQL group里获取第一个和最后一个</h1><h2 id="mysql-8-0以后版本-使用窗口函数over" tabindex="-1"><a class="header-anchor" href="#mysql-8-0以后版本-使用窗口函数over" aria-hidden="true">#</a> MySQL 8.0以后版本，使用窗口函数over</h2><h3 id="取前-5-条" tabindex="-1"><a class="header-anchor" href="#取前-5-条" aria-hidden="true">#</a> 取前 5 条</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span>
    <span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token punctuation">,</span> ROW_NUMBER<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span><span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> task_id <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> data_date <span class="token keyword">DESC</span><span class="token punctuation">,</span> modify_time <span class="token keyword">DESC</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> rn
    <span class="token keyword">FROM</span> t_task_exec_log 
    <span class="token keyword">WHERE</span> exec_status<span class="token operator">=</span><span class="token string">&#39;success&#39;</span> 
    <span class="token operator">AND</span> task_id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">124</span><span class="token punctuation">,</span><span class="token number">156</span><span class="token punctuation">,</span><span class="token number">158</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">358</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">1001</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> t <span class="token keyword">WHERE</span> rn <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mysql-8-0以前方法" tabindex="-1"><a class="header-anchor" href="#mysql-8-0以前方法" aria-hidden="true">#</a> MySQL 8.0以前方法</h2><h3 id="方法一" tabindex="-1"><a class="header-anchor" href="#方法一" aria-hidden="true">#</a> 方法一</h3><p>需要用到的函数：</p><ul><li>group_concat  分组连接</li><li>substring_index  按索引截取</li></ul><p>使用 <code>GROUP_CONCAT</code> 函数。再使用 <code>SUBSTRING_INDEX</code> 截取。排序方式改变一下正序倒序取第一条</p><p>mysql里没有现成的方法，只能找一个变通的方法，就是先把所有值拼成一个长字符串，然后再从这个长字符串中取最前面和最后面的部分，但是这样会有性能问题，如果可以忍受性能问题，目前也没有别的好的办法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  DATE_FORMAT<span class="token punctuation">(</span>create_time<span class="token punctuation">,</span> <span class="token string">&#39;%Y%m%d&#39;</span><span class="token punctuation">)</span> times<span class="token punctuation">,</span> <span class="token comment">// 时间格式化</span>
  <span class="token function">MAX</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> max_price<span class="token punctuation">,</span>    <span class="token comment">// 最高价</span>
  <span class="token function">MIN</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> min_price<span class="token punctuation">,</span>    <span class="token comment">// 最低价</span>
  <span class="token function">SUM</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> num<span class="token punctuation">,</span>            <span class="token comment">// 每天数量</span>
  SUBSTRING_INDEX<span class="token punctuation">(</span>GROUP_CONCAT<span class="token punctuation">(</span>CAST<span class="token punctuation">(</span>price <span class="token keyword">AS</span> <span class="token keyword">CHAR</span><span class="token punctuation">)</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> create_time<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">)</span> first_price<span class="token punctuation">,</span>
  SUBSTRING_INDEX<span class="token punctuation">(</span>GROUP_CONCAT<span class="token punctuation">(</span>CAST<span class="token punctuation">(</span>price <span class="token keyword">AS</span> <span class="token keyword">CHAR</span><span class="token punctuation">)</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> create_time <span class="token keyword">DESC</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">)</span> last_price
<span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>bill<span class="token punctuation">\`</span></span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token identifier"><span class="token punctuation">\`</span>times<span class="token punctuation">\`</span></span> <span class="token comment">// 时间分组</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token identifier"><span class="token punctuation">\`</span>times<span class="token punctuation">\`</span></span> <span class="token comment">// 时间排序</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法二" tabindex="-1"><a class="header-anchor" href="#方法二" aria-hidden="true">#</a> 方法二</h3>`,12),r={href:"https://blog.csdn.net/q116975174/article/details/124807513",target:"_blank",rel:"noopener noreferrer"},d=t(`<p>需求：账号表有多条相同的staff_id的数据，按staff_id分组，取ID最大（也就是最新）的一行</p><p>这里的关键是<code>a.staff_id = b.staff_id</code>,根据业务情况不同，实际是分组group by字段，然后通过左关联（一定是左关联）算出笛卡尔积，通过过滤条件 <code>a.id &lt; b.id</code>和<code>b.created_at IS NULL</code>找到数据<br> 反过来<code>a.id &gt; b.id</code>是最小</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
    a<span class="token punctuation">.</span>id aid<span class="token punctuation">,</span>
    b<span class="token punctuation">.</span>id bid
<span class="token keyword">FROM</span>
    account a
    <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> account b <span class="token keyword">ON</span> a<span class="token punctuation">.</span>staff_id <span class="token operator">=</span> b<span class="token punctuation">.</span>staff_id
        <span class="token operator">AND</span> a<span class="token punctuation">.</span>id <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>id
<span class="token keyword">WHERE</span>
    b<span class="token punctuation">.</span>created_at <span class="token operator">IS</span> <span class="token boolean">NULL</span>
    <span class="token operator">AND</span> a<span class="token punctuation">.</span>staff_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关函数" tabindex="-1"><a class="header-anchor" href="#相关函数" aria-hidden="true">#</a> 相关函数</h2><h3 id="group-concat" tabindex="-1"><a class="header-anchor" href="#group-concat" aria-hidden="true">#</a> GROUP_CONCAT</h3><h4 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>GROUP_CONCAT<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">DISTINCT</span><span class="token punctuation">]</span> expr <span class="token punctuation">[</span><span class="token punctuation">,</span>expr <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
             <span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> {unsigned_integer <span class="token operator">|</span> col_name <span class="token operator">|</span> expr}
                 <span class="token punctuation">[</span><span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">,</span>col_name <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
             <span class="token punctuation">[</span>SEPARATOR str_val<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">SELECT</span> student_name<span class="token punctuation">,</span>
        GROUP_CONCAT<span class="token punctuation">(</span>test_score<span class="token punctuation">)</span>
       <span class="token keyword">FROM</span> student
       <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> student_name<span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> student_name<span class="token punctuation">,</span>
        GROUP_CONCAT<span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> test_score
                      <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> test_score <span class="token keyword">DESC</span> SEPARATOR <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>
       <span class="token keyword">FROM</span> student
       <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> student_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用注意" tabindex="-1"><a class="header-anchor" href="#使用注意" aria-hidden="true">#</a> 使用注意</h4><p>group_concat超出了默认值1024，超过就会截断，group_concat查询出来的数据就是不全。</p><hr>`,10),k={href:"https://www.cnblogs.com/youzhibing/p/17881895.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.yiibai.com/mysql/group_concat.html",target:"_blank",rel:"noopener noreferrer"};function v(b,_){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("blockquote",null,[n("p",null,[s("这段有点突兀，是"),n("a",r,[s("MySQL获取分组中的第一条数据和最后一条数据"),e(a)]),s("文章里的一段，觉得相关一点粘在这里")])]),d,n("p",null,[s("参考文章 "),n("a",k,[s("MySQL 分组排序后 → 如何取前N条或倒数N条"),e(a)])]),n("p",null,[n("a",m,[s("MySQL group_concat()函数"),e(a)])])])}const y=p(i,[["render",v],["__file","group里获取第一个和最后一个.html.vue"]]);export{y as default};
