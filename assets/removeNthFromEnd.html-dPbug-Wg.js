import{_ as p,r as o,o as l,c,b as n,e,w as t,d as s,a as i}from"./app-7rGY8hGP.js";const u={},r=n("h1",{id:"删除链表的倒数第n个节点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#删除链表的倒数第n个节点","aria-hidden":"true"},"#"),s(" 删除链表的倒数第n个节点")],-1),d={class:"table-of-contents"},k=i(`<h2 id="描述" tabindex="-1"><a class="header-anchor" href="#描述" aria-hidden="true">#</a> 描述</h2><p>给定一个链表，删除链表的倒数第 n 个节点并返回链表的头指针 例如， 给出的链表为: 1\\to 2\\to 3\\to 4\\to 51→2→3→4→5, n= 2n=2. 删除了链表的倒数第 nn 个节点之后,链表变为1\\to 2\\to 3\\to 51→2→3→5.</p><p>数据范围： 链表长度 0≤n≤1000，链表中任意节点的值满足 0≤val≤100</p><p>要求：空间复杂度 O(1)，时间复杂度 O(n)</p><p>备注： 题目保证 n 一定是有效的</p><h2 id="结题思路" tabindex="-1"><a class="header-anchor" href="#结题思路" aria-hidden="true">#</a> 结题思路</h2><ol><li>先统计所有的点为i</li><li>所有的点减去倒数几个点得到正数的第几个点</li><li>使用循环得到这个点next和这个点的前一个点pro</li><li>把这个点的前一个点和这个点的后一个点连接得到新的链表，返回头</li></ol><blockquote><p>注意： 1.链表为空 2.链表1个点去掉一个点 3.去掉头结点</p></blockquote><h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> removeNthFromEnd <span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 链表为空</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 链表1个点去掉一个点</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token class-name">ListNode</span> next <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
            next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> num <span class="token operator">=</span> i <span class="token operator">-</span> n<span class="token punctuation">;</span>
            <span class="token comment">// 去掉头结点</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            next <span class="token operator">=</span> head<span class="token punctuation">;</span>
            <span class="token class-name">ListNode</span> pro <span class="token operator">=</span> head<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;</span> num <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                pro <span class="token operator">=</span> next<span class="token punctuation">;</span>
                next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            pro<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token keyword">return</span> head<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10);function v(m,b){const a=o("router-link");return l(),c("div",null,[r,n("nav",d,[n("ul",null,[n("li",null,[e(a,{to:"#描述"},{default:t(()=>[s("描述")]),_:1})]),n("li",null,[e(a,{to:"#结题思路"},{default:t(()=>[s("结题思路")]),_:1})]),n("li",null,[e(a,{to:"#代码实现"},{default:t(()=>[s("代码实现")]),_:1})])])]),k])}const w=p(u,[["render",v],["__file","removeNthFromEnd.html.vue"]]);export{w as default};
