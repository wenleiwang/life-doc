import{_ as e,o,c as a,a as c}from"./app-7rGY8hGP.js";const r={},t=c('<h1 id="mock测试的使用" tabindex="-1"><a class="header-anchor" href="#mock测试的使用" aria-hidden="true">#</a> Mock测试的使用</h1><h2 id="什么是mock" tabindex="-1"><a class="header-anchor" href="#什么是mock" aria-hidden="true">#</a> 什么是Mock</h2><p>mock测试就是在测试活动中，对于某些不容易构造或者不容易获取的比较复杂的数据/场景，用一个虚拟的对象（Mock对象）来创建用于测试的测试方法。</p><h2 id="为什么要进行mock测试" tabindex="-1"><a class="header-anchor" href="#为什么要进行mock测试" aria-hidden="true">#</a> 为什么要进行Mock测试</h2><p>Mock是为了解决不同的单元之间由于耦合而难于开发、测试的问题。所以，Mock既能出现在<strong>单元测试</strong>中，也会出现在集成测试、<strong>系统测试</strong>过程中。</p><p>Mock最大的功能是帮你把单元测试的耦合分解开，如果你的代码对另一个类或者接口有依赖，它能够帮你模拟这些依赖，并帮你验证所调用的依赖的行为。</p><h2 id="mock适用场景" tabindex="-1"><a class="header-anchor" href="#mock适用场景" aria-hidden="true">#</a> Mock适用场景</h2><ol><li>需要将当前被测单元和其依赖模块独立开来，构造一个独立的测试环境，不关注被测单元的依赖对象，只关注被测单元的功能逻辑。</li><li></li></ol>',8),h=[t];function n(i,d){return o(),a("div",null,h)}const k=e(r,[["render",n],["__file","Mock测试的使用.html.vue"]]);export{k as default};
