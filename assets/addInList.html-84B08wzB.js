import{_ as e,r as o,o as c,c as l,b as n,e as p,w as t,d as s,a as i}from"./app-7rGY8hGP.js";const u={},r=n("h1",{id:"链表相加-二",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#链表相加-二","aria-hidden":"true"},"#"),s(" 链表相加(二)")],-1),k={class:"table-of-contents"},d=i(`<h2 id="描述" tabindex="-1"><a class="header-anchor" href="#描述" aria-hidden="true">#</a> 描述</h2><p>假设链表中每一个节点的值都在 0 - 9 之间，那么链表整体就可以代表一个整数。</p><p>给定两个这种链表，请生成代表两个整数相加值的结果链表。</p><p>数据范围：0≤n,m≤1000000，链表任意值 0≤val≤9</p><p>要求：空间复杂度 O(n)，时间复杂度 O(n)</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><h3 id="空间复杂度o-1" tabindex="-1"><a class="header-anchor" href="#空间复杂度o-1" aria-hidden="true">#</a> 空间复杂度O(1)</h3><ol><li>把链表1反转，求出链表1的长度</li><li>把链表2反转，求出链表2的长度</li><li>按短的逐位相加，并在相加时加上进位</li><li>长出的部分保留，并加上进位</li><li>如果所有求完还有进位，新建一个节点</li><li>反转回来得到目标链表</li></ol><h3 id="空间复杂度o-n" tabindex="-1"><a class="header-anchor" href="#空间复杂度o-n" aria-hidden="true">#</a> 空间复杂度O(n)</h3><p>使用栈结构来反转列表，就可以啦</p><h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h2><h3 id="空间复杂度o-1-1" tabindex="-1"><a class="header-anchor" href="#空间复杂度o-1-1" aria-hidden="true">#</a> 空间复杂度O(1)</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> addInList <span class="token punctuation">(</span><span class="token class-name">ListNode</span> head1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> head2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> head2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head1 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> head2<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> head1<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">ListNode</span> ch1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> next1 <span class="token operator">=</span> head1<span class="token punctuation">;</span>
        <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>next1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            num1<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token class-name">ListNode</span> cur <span class="token operator">=</span> next1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            next1<span class="token punctuation">.</span>next <span class="token operator">=</span> ch1<span class="token punctuation">;</span>
            ch1 <span class="token operator">=</span> next1<span class="token punctuation">;</span>
            next1 <span class="token operator">=</span> cur<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">ListNode</span> ch2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> next2 <span class="token operator">=</span> head2<span class="token punctuation">;</span>
        <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>next2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            num2<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token class-name">ListNode</span> cur <span class="token operator">=</span> next2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            next2<span class="token punctuation">.</span>next <span class="token operator">=</span> ch2<span class="token punctuation">;</span>
            ch2 <span class="token operator">=</span> next2<span class="token punctuation">;</span>
            next2 <span class="token operator">=</span> cur<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        next1 <span class="token operator">=</span> ch1<span class="token punctuation">;</span>
        next2 <span class="token operator">=</span> ch2<span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> head <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>num1 <span class="token operator">&gt;</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> pro <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token class-name">ListNode</span> curNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num1 <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                curNode <span class="token operator">=</span> next1<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">int</span> cur <span class="token operator">=</span> next1<span class="token punctuation">.</span>val <span class="token operator">+</span> next2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
                    cur <span class="token operator">+=</span> pro<span class="token punctuation">;</span>
                    pro <span class="token operator">=</span> cur <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>
                    next1<span class="token punctuation">.</span>val <span class="token operator">=</span> cur <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
                    next1 <span class="token operator">=</span> next1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
                    next2 <span class="token operator">=</span> next2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">int</span> cur <span class="token operator">=</span> next1<span class="token punctuation">.</span>val <span class="token operator">+</span> pro<span class="token punctuation">;</span>
                    pro <span class="token operator">=</span> cur <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>
                    next1<span class="token punctuation">.</span>val <span class="token operator">=</span> cur <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
                    next1 <span class="token operator">=</span> next1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pro <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">ListNode</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>pro<span class="token punctuation">)</span><span class="token punctuation">;</span>
                curNode<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            head <span class="token operator">=</span> ch1<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num2 <span class="token operator">&gt;</span> num1<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> pro <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token class-name">ListNode</span> curNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num2 <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                curNode <span class="token operator">=</span> next2<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> num1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">int</span> cur <span class="token operator">=</span> next1<span class="token punctuation">.</span>val <span class="token operator">+</span> next2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
                    cur <span class="token operator">+=</span> pro<span class="token punctuation">;</span>
                    pro <span class="token operator">=</span> cur <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>
                    next2<span class="token punctuation">.</span>val <span class="token operator">=</span> cur <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
                    next1 <span class="token operator">=</span> next1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
                    next2 <span class="token operator">=</span> next2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">int</span> cur <span class="token operator">=</span> next2<span class="token punctuation">.</span>val <span class="token operator">+</span> pro<span class="token punctuation">;</span>
                    pro <span class="token operator">=</span> cur <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>
                    next2<span class="token punctuation">.</span>val <span class="token operator">=</span> cur <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
                    next2 <span class="token operator">=</span> next2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pro <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">ListNode</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>pro<span class="token punctuation">)</span><span class="token punctuation">;</span>
                curNode<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            head <span class="token operator">=</span> ch2<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> pro <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token class-name">ListNode</span> curNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num1 <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                curNode <span class="token operator">=</span> next1<span class="token punctuation">;</span>
                <span class="token keyword">int</span> cur <span class="token operator">=</span> next1<span class="token punctuation">.</span>val <span class="token operator">+</span> next2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
                cur <span class="token operator">+=</span> pro<span class="token punctuation">;</span>
                pro <span class="token operator">=</span> cur <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>
                next1<span class="token punctuation">.</span>val <span class="token operator">=</span> cur <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
                next1 <span class="token operator">=</span> next1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
                next2 <span class="token operator">=</span> next2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pro <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">ListNode</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>pro<span class="token punctuation">)</span><span class="token punctuation">;</span>
                curNode<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            head <span class="token operator">=</span> ch1<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        next1 <span class="token operator">=</span> head<span class="token punctuation">;</span>
        ch1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>next1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ListNode</span> cur <span class="token operator">=</span> next1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            next1<span class="token punctuation">.</span>next <span class="token operator">=</span> ch1<span class="token punctuation">;</span>
            ch1 <span class="token operator">=</span> next1<span class="token punctuation">;</span>
            next1 <span class="token operator">=</span> cur<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ch1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="空间复杂度o-n-1" tabindex="-1"><a class="header-anchor" href="#空间复杂度o-n-1" aria-hidden="true">#</a> 空间复杂度O(n)</h3><p>使用栈</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> addInList <span class="token punctuation">(</span><span class="token class-name">ListNode</span> head1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> head2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>head1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> head2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head1 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> head2<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> head1<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ListNode</span><span class="token punctuation">&gt;</span></span> stack1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> next <span class="token operator">=</span> head1<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
            next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ListNode</span><span class="token punctuation">&gt;</span></span> stack2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        next <span class="token operator">=</span> head2<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
            next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">ListNode</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        next <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> curNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> pro <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>stack2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            curNode <span class="token operator">=</span> next<span class="token punctuation">;</span>
            <span class="token class-name">ListNode</span> h1 <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ListNode</span> h2 <span class="token operator">=</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> cur <span class="token operator">=</span> h1<span class="token punctuation">.</span>val <span class="token operator">+</span> h2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
            cur <span class="token operator">+=</span> pro<span class="token punctuation">;</span>
            pro <span class="token operator">=</span> cur <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>
            next<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>cur <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            curNode <span class="token operator">=</span> next<span class="token punctuation">;</span>
            <span class="token class-name">ListNode</span> h1 <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> cur <span class="token operator">=</span> h1<span class="token punctuation">.</span>val <span class="token operator">+</span> pro<span class="token punctuation">;</span>
            pro <span class="token operator">=</span> cur <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>
            next<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>cur <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            curNode <span class="token operator">=</span> next<span class="token punctuation">;</span>
            <span class="token class-name">ListNode</span> h2 <span class="token operator">=</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> cur <span class="token operator">=</span> h2<span class="token punctuation">.</span>val <span class="token operator">+</span> pro<span class="token punctuation">;</span>
            pro <span class="token operator">=</span> cur <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>
            next<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>cur <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pro <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            next<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>pro<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>

        <span class="token comment">// 反转</span>
        next <span class="token operator">=</span> head<span class="token punctuation">;</span>
        curNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ListNode</span> cur <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            next<span class="token punctuation">.</span>next <span class="token operator">=</span> curNode<span class="token punctuation">;</span>
            curNode <span class="token operator">=</span> next<span class="token punctuation">;</span>
            next <span class="token operator">=</span> cur<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> curNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16);function v(m,b){const a=o("router-link");return c(),l("div",null,[r,n("nav",k,[n("ul",null,[n("li",null,[p(a,{to:"#描述"},{default:t(()=>[s("描述")]),_:1})]),n("li",null,[p(a,{to:"#解题思路"},{default:t(()=>[s("解题思路")]),_:1}),n("ul",null,[n("li",null,[p(a,{to:"#空间复杂度o-1"},{default:t(()=>[s("空间复杂度O(1)")]),_:1})]),n("li",null,[p(a,{to:"#空间复杂度o-n"},{default:t(()=>[s("空间复杂度O(n)")]),_:1})])])]),n("li",null,[p(a,{to:"#代码实现"},{default:t(()=>[s("代码实现")]),_:1}),n("ul",null,[n("li",null,[p(a,{to:"#空间复杂度o-1-1"},{default:t(()=>[s("空间复杂度O(1)")]),_:1})]),n("li",null,[p(a,{to:"#空间复杂度o-n-1"},{default:t(()=>[s("空间复杂度O(n)")]),_:1})])])])])]),d])}const h=e(u,[["render",v],["__file","addInList.html.vue"]]);export{h as default};
