import{_ as p,r as o,o as c,c as l,b as n,d as s,e as t,a as e}from"./app-7rGY8hGP.js";const i="/life-doc/assets/img_20240118_1-pAweybJG.png",r="/life-doc/assets/img_20240118-gtHEEve-.png",u={},k=n("h1",{id:"kmp算法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#kmp算法","aria-hidden":"true"},"#"),s(" KMP算法")],-1),d=n("h2",{id:"什么是kmp算法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#什么是kmp算法","aria-hidden":"true"},"#"),s(" 什么是KMP算法？")],-1),b=n("p",null,"KMP算法是一种改进的字符串匹配算法，由D.E.Knuth，J.H.Morris和V.R.Pratt提出的，因此人们称它为克努特—莫里斯—普拉特操作（简称KMP算法）。",-1),h=n("p",null,[s("KMP算法的核心是利用匹配失败后的信息，尽量减少模式串与主串的匹配次数以达到快速匹配的目的。具体实现就是通过一个next()函数实现，函数本身包含了模式串的局部匹配信息。KMP算法的时间复杂度 "),n("code",null,"O(m+n)"),s("。")],-1),v={href:"https://cloud.tencent.com/developer/article/2235837",target:"_blank",rel:"noopener noreferrer"},m={href:"https://kb.cnblogs.com/page/176818/",target:"_blank",rel:"noopener noreferrer"},_=e('<h4 id="字符串的前缀和后缀" tabindex="-1"><a class="header-anchor" href="#字符串的前缀和后缀" aria-hidden="true">#</a> 字符串的前缀和后缀</h4><p>首先我们需要知道字符串的前缀和后缀： 对于字符串<code>ababc</code>来说，它的前缀有<code>[a,ab,aba,abab]</code>，也就是以字符串第一个字符作为开头，同时不包括最后一个字符的所有子串，同理它的后缀有<code>[c,bc,abc,babc]</code>，也就是以字符串最后一个字符作为结尾，同时不包括第一个字符的所有字串。</p><h4 id="字符串的最长公共前后缀" tabindex="-1"><a class="header-anchor" href="#字符串的最长公共前后缀" aria-hidden="true">#</a> 字符串的最长公共前后缀</h4><p>了解了这个，我们再来说什么是字符串的<strong>最长公共前后缀</strong>，说白了，也就是前缀和后缀这2个集合中的相同部分，同时取最长的那个，就是这个字符串的<strong>最长公共前后缀</strong>。显然，在这个例子中，<code>ababc</code>是没有公共前后缀的。但是对于<code>abab</code>，它的前缀和后缀分别是<code>[a,ab,aba]</code>和<code>[b,ab,bab]</code>，那么它的<strong>最长公共前后缀</strong>就是<code>ab</code>。</p><p>现在，我们的目标就是取得<code>ababc</code>所有子串<code>[a,ab,aba,abab,ababc]</code>的<strong>最长公共前后缀</strong>的长度，分别保存在<code>next</code>数组中，我们只要知道最大长度即可，并不用关心串具体是什么，而我们目前通过观察即可得出next数组这里是<code>[0,0,1,2,0]</code>，我们先知道这个结果即可，此计算方法后续会说明。</p><p>取一个萌新星云博主分享的一个图片，很形象的说明这个匹配逻辑：</p><p>已经匹配过的aba就不用再次进行匹配，而是从index=3的b继续匹配，相较于BF算法节省了大量匹配操作。在KMP算法中，每次移动的位置都由在此处匹配的字符其前缀的最长公共前后缀决定。</p><p><img src="'+i+'" alt=""></p><h3 id="next数组" tabindex="-1"><a class="header-anchor" href="#next数组" aria-hidden="true">#</a> next数组</h3>',9),g={href:"https://blog.csdn.net/gmynebula/article/details/125239503",target:"_blank",rel:"noopener noreferrer"},w=n("p",null,"前缀表存储每一个前缀的最长公共前后缀的长度，next数组存储的是模式串向右移动到next值的位置，这个值与前缀的最长公共前后缀的长度有关，所以next数组是可以由前缀表生成的。",-1),x=n("p",null,"用前缀表生成一个next数组很容易，将前缀表每一位都向后移动1位（最后一位舍去）并在第一位补一个-1就得到了next数组。",-1),y=n("p",null,[n("img",{src:r,alt:""})],-1),f=n("p",null,"-1,0开头与0, 1开头的next数组本质是一样的。实际上，以0, 1开头的next数组就是以-1,0开头的next数组每一项加1得到的。",-1),j=n("p",null,"出现这种情况的原因在于模式串起始的索引值：在程序中，一个数组的索引的起始值为0；然而在考试和书中给的模式串起始值是多从1开始。",-1),M=n("p",null,"所以在考试中遇到的next数组通常是以0, 1开头；而一些程序或教程中的next数组是以-1, 0开头。",-1),K={href:"https://blog.csdn.net/2301_76768325/article/details/134933251",target:"_blank",rel:"noopener noreferrer"},P=e(`<p>在这里我做一下区分，首先说明两种都是对的，只不过是两种不同的方法</p><ul><li>第一种：前两个值为0 1是在将字符串编号时候从1开始往后编，这种情况的next函数前两个值必须是0 1</li><li>第二种：前两个值为-1 0是在将字符串编号时候从0开始往后编，这种情况的next函数前两个值必须是-1 0</li></ul><p>用第二种方法求出来next数组的值之后整体都加1之后就和第一种方法求出的next数组值相同了</p><p>觉得下面这两个解释的更精准</p><blockquote><p>https://kb.cnblogs.com/page/176818/</p></blockquote><blockquote><p>http://jakeboxer.com/blog/2009/12/13/the-knuth-morris-pratt-algorithm-in-my-own-words/</p></blockquote><h2 id="暴力破解版" tabindex="-1"><a class="header-anchor" href="#暴力破解版" aria-hidden="true">#</a> 暴力破解版</h2><p>实现思路：两层循环，外层循环控制主串，内层循环控制模式串。所以需要两个变量 i 和 j ，它们都是从 0 开始。如果如果匹配上就都往后走一步，依次。没有匹配上模式串重头开始，主串返回到开始匹配的下一个字符，重新遍历。直到都匹配上返回匹配的起点或都没有匹配上返回 -1 。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">learn<span class="token punctuation">.</span>note<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>arr</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> Wang WenLei
 * <span class="token keyword">@version</span> 1.0
 * <span class="token keyword">@since</span> 2024/1/18 10:16
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Kmp</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;c&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;c&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;d&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> pattern <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;c&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;d&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">forceMethod</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">forceMethod</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> str<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> str<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> pattern <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> pattern<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> pattern<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">(</span>pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    i<span class="token operator">++</span><span class="token punctuation">;</span>
                    j<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    i <span class="token operator">=</span> i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
                    j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> pattern<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="最朴素的kmp算法实现" tabindex="-1"><a class="header-anchor" href="#最朴素的kmp算法实现" aria-hidden="true">#</a> 最朴素的KMP算法实现</h2><p>思想：对比暴力实现，提前做一些处理，让 i 永远不回退，只回退 j 来使得匹配效率有所提升</p>`,11);function E(q,N){const a=o("ExternalLinkIcon");return c(),l("div",null,[k,d,b,h,n("p",null,[n("a",v,[s("文章讲的很详细"),t(a)])]),n("p",null,[n("a",m,[s("这个原理用图示比较清晰"),t(a)])]),_,n("blockquote",null,[n("p",null,[n("a",g,[s("摘自NebulaGMY_萌新星云"),t(a)])])]),w,x,y,f,j,M,n("p",null,[n("a",K,[s("摘自关于next函数区分"),t(a)]),s(" 有的博主讲的next函数前两个值分别为0 1 有的博主讲的next函数前两个值分别为-1 0")]),P])}const B=p(u,[["render",E],["__file","KMP算法.html.vue"]]);export{B as default};
