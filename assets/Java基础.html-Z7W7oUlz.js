import{_ as d,r as o,o as c,c as l,b as a,e as s,w as e,d as t,a as p}from"./app-7rGY8hGP.js";const i={},r=a("h1",{id:"java基础",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#java基础","aria-hidden":"true"},"#"),t(" java基础")],-1),u={class:"table-of-contents"},v=p(`<h2 id="java8种基础变量" tabindex="-1"><a class="header-anchor" href="#java8种基础变量" aria-hidden="true">#</a> Java8种基础变量</h2><table><thead><tr><th>类型</th><th>关键字</th><th>存储大小</th><th>使用举例</th></tr></thead><tbody><tr><td>字节型</td><td>byte</td><td>8位/1字节，-128~127</td><td><code>byte a = &#39;a&#39;;byte a1 = 91;</code></td></tr><tr><td>短整型</td><td>short</td><td>16位/2字节，-32768 ~ 32767</td><td><code>short b = 1;</code></td></tr><tr><td>整形</td><td>int</td><td>32位/4字节，-2^31-1~2^31 （21 亿）</td><td><code>int c = 1;</code></td></tr><tr><td>长整型</td><td>long</td><td>64位/8字节</td><td><code>long d = 4L;</code></td></tr><tr><td>浮点型</td><td>float</td><td>32位/4字节，1位符号位、8位指数、23位有效尾数</td><td><code>float e = 2.0f;</code></td></tr><tr><td>双精度</td><td>double</td><td>64位/8字节，1位符号位、11位指数、52位有效尾数</td><td><code>double f = 3.00d;</code></td></tr><tr><td>字符型</td><td>char</td><td>16位/2字节</td><td><code>char g = &#39;d&#39;;</code></td></tr><tr><td>布尔型</td><td>boolean</td><td>1位</td><td><code>boolean h = true;</code></td></tr></tbody></table><h2 id="java对象型变量" tabindex="-1"><a class="header-anchor" href="#java对象型变量" aria-hidden="true">#</a> Java对象型变量</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span>  name <span class="token operator">=</span> <span class="token string">&quot;wangwnelie&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="java循环语句" tabindex="-1"><a class="header-anchor" href="#java循环语句" aria-hidden="true">#</a> java循环语句</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 在java8之前使用</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 基础循环</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 基础循环</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 增强for循环</span>
<span class="token punctuation">}</span>

<span class="token comment">// java8依据Lamada表达式和stream流，后出现</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 输出</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="java运算符" tabindex="-1"><a class="header-anchor" href="#java运算符" aria-hidden="true">#</a> java运算符</h2><table><thead><tr><th>名称</th><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>加</td><td><code>+</code></td><td>a+b;表达式，两边为byte,short,char，结果为int型,其它情况结果为两边中范围大的。适用包装类型</td></tr><tr><td>减</td><td><code>-</code></td><td>a-b;表达式，两边为byte,short,char，结果为int型,其它情况结果为两边中范围大的。适用包装类型</td></tr><tr><td>乘</td><td><code>*</code></td><td>a*b</td></tr><tr><td>除</td><td><code>/</code></td><td>a/b</td></tr><tr><td>取余</td><td><code>%</code></td><td>a%b</td></tr><tr><td>移位</td><td><code>&gt;&gt;</code></td><td>高位补0，c &gt;&gt;= 2;</td></tr><tr><td>移位</td><td><code>&gt;&gt;&gt;</code></td><td>高位补1，c &gt;&gt;&gt;= 2;</td></tr><tr><td>赋值</td><td><code>=</code></td><td></td></tr><tr><td>相等</td><td><code>==</code></td><td>相等</td></tr><tr><td>大于</td><td><code>&gt;</code></td><td></td></tr><tr><td>大于等于</td><td><code>&gt;=</code></td><td></td></tr><tr><td>小于</td><td><code>&lt;</code></td><td></td></tr><tr><td>小于等于</td><td><code>&lt;=</code></td><td></td></tr><tr><td>三目运算符</td><td><code>? : </code></td><td>a == 0 ? 1 : 0; 三目，一边为byte另一边为char，结果为int。其它情况结果为两边中范围大的。适用包装类型</td></tr><tr><td>自增</td><td><code>++</code></td><td></td></tr><tr><td>自减</td><td><code>--</code></td><td></td></tr><tr><td>加赋值</td><td><code>+=</code></td><td></td></tr><tr><td>减赋值</td><td><code>-=</code></td><td></td></tr></tbody></table><h2 id="final域" tabindex="-1"><a class="header-anchor" href="#final域" aria-hidden="true">#</a> Final域</h2><p>关键字<code>final</code>用于构造不可变性的对象。</p><p>final类型的 域是不能修改的（但如果final域所引用的对象是可变的，那么这些被引用的对象是可以修改的）。</p><p>在 Java 内存模型中，final域还有着特殊的语义。final域能确保初始化过程的安全性，从而可以不受限制地访问不可变对象，并在共享这些对象时无需同步。</p><h2 id="java方法" tabindex="-1"><a class="header-anchor" href="#java方法" aria-hidden="true">#</a> java方法</h2><h2 id="java类" tabindex="-1"><a class="header-anchor" href="#java类" aria-hidden="true">#</a> java类</h2><h2 id="java异常" tabindex="-1"><a class="header-anchor" href="#java异常" aria-hidden="true">#</a> java异常</h2><h2 id="java初始化工作执行顺序" tabindex="-1"><a class="header-anchor" href="#java初始化工作执行顺序" aria-hidden="true">#</a> Java初始化工作执行顺序</h2><ol><li>父类静态变量</li><li>父类静态代码块</li><li>子类静态变量</li><li>子类静态代码块</li><li>父类非静态变量</li><li>父类非静态代码块</li><li>父类构造函数</li><li>子类非静态变量</li><li>子类非静态代码块</li><li>子类构造函数</li></ol>`,17);function k(h,b){const n=o("router-link");return c(),l("div",null,[r,a("nav",u,[a("ul",null,[a("li",null,[s(n,{to:"#java8种基础变量"},{default:e(()=>[t("Java8种基础变量")]),_:1})]),a("li",null,[s(n,{to:"#java对象型变量"},{default:e(()=>[t("Java对象型变量")]),_:1})]),a("li",null,[s(n,{to:"#java循环语句"},{default:e(()=>[t("java循环语句")]),_:1})]),a("li",null,[s(n,{to:"#java运算符"},{default:e(()=>[t("java运算符")]),_:1})]),a("li",null,[s(n,{to:"#final域"},{default:e(()=>[t("Final域")]),_:1})]),a("li",null,[s(n,{to:"#java方法"},{default:e(()=>[t("java方法")]),_:1})]),a("li",null,[s(n,{to:"#java类"},{default:e(()=>[t("java类")]),_:1})]),a("li",null,[s(n,{to:"#java异常"},{default:e(()=>[t("java异常")]),_:1})]),a("li",null,[s(n,{to:"#java初始化工作执行顺序"},{default:e(()=>[t("Java初始化工作执行顺序")]),_:1})])])]),v])}const f=d(i,[["render",k],["__file","Java基础.html.vue"]]);export{f as default};
