import{_ as t,r as o,o as l,c,b as n,e,w as p,d as s,a as i}from"./app-7rGY8hGP.js";const u="/life-doc/assets/95ace1e76c1d02e9075fe792365eb96e-PXEI8OjY.png",r={},k=n("h1",{id:"两个链表的第一个公共结点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#两个链表的第一个公共结点","aria-hidden":"true"},"#"),s(" 两个链表的第一个公共结点")],-1),d={class:"table-of-contents"},v=i('<h2 id="描述" tabindex="-1"><a class="header-anchor" href="#描述" aria-hidden="true">#</a> 描述</h2><p>输入两个无环的单向链表，找出它们的第一个公共结点，如果没有公共节点则返回空。（注意因为传入数据是链表，所以错误测试数据的提示是用其他方式显示的，保证传入数据是正确的）</p><p>数据范围： n ≤ 1000n≤1000</p><p>要求：空间复杂度 O(1)，时间复杂度 O(n)</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>两个链表的状态只有2中，相交、不想交</p><p><img src="'+u+`" alt=""></p><h3 id="空间复杂度o-n-版本" tabindex="-1"><a class="header-anchor" href="#空间复杂度o-n-版本" aria-hidden="true">#</a> 空间复杂度O(n)版本</h3><p>通过上面分析得到第一交点，以后每个都是他们的交点</p><ol><li>使用Hash结构存一个链表中的每个节点</li><li>循环另一个链表遇到第一个在Hash结构中的节点就是交点</li><li>没有得到，表示两个链表没有相交</li></ol><h3 id="空间复杂度o-1-版本" tabindex="-1"><a class="header-anchor" href="#空间复杂度o-1-版本" aria-hidden="true">#</a> 空间复杂度O(1)版本</h3><ol><li>通过上面分析得到第一交点，以后每个都是他们的交点。</li><li>那么我们让长的链表先跑出一部分，让与短的长度一致。</li><li>再同步往后走，得到交点或没有交点。</li></ol><h2 id="实现代码" tabindex="-1"><a class="header-anchor" href="#实现代码" aria-hidden="true">#</a> 实现代码</h2><h3 id="空间复杂度o-n-版本-1" tabindex="-1"><a class="header-anchor" href="#空间复杂度o-n-版本-1" aria-hidden="true">#</a> 空间复杂度O(n)版本</h3><p>使用Hash结构</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token class-name">FindFirstCommonNode</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> pHead1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> pHead2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ListNode</span><span class="token punctuation">,</span><span class="token class-name">ListNode</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> next <span class="token operator">=</span> pHead1<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
            next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        next <span class="token operator">=</span> pHead2<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ListNode</span> cur <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> cur<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="空间复杂度o-1-版本-1" tabindex="-1"><a class="header-anchor" href="#空间复杂度o-1-版本-1" aria-hidden="true">#</a> 空间复杂度O(1)版本</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token class-name">FindFirstCommonNode</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> pHead1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> pHead2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pHead1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> pHead2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">ListNode</span> next1 <span class="token operator">=</span> pHead1<span class="token punctuation">;</span>
        <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>next1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            num1 <span class="token operator">++</span><span class="token punctuation">;</span>
            next1 <span class="token operator">=</span> next1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">ListNode</span> next2 <span class="token operator">=</span> pHead2<span class="token punctuation">;</span>
        <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>next2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            num2 <span class="token operator">++</span><span class="token punctuation">;</span>
            next2 <span class="token operator">=</span> next2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 链表先跑出一部分</span>
        next1 <span class="token operator">=</span> pHead1<span class="token punctuation">;</span>
        next2 <span class="token operator">=</span> pHead2<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>num1 <span class="token operator">&gt;</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> s <span class="token operator">=</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                next1 <span class="token operator">=</span> next1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num2 <span class="token operator">&gt;</span> num1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> s <span class="token operator">=</span> num2 <span class="token operator">-</span> num1<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                next2 <span class="token operator">=</span> next2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 再同步往后走</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>next1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> next2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>next2 <span class="token operator">==</span> next1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> next1<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                next1 <span class="token operator">=</span> next1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
                next2 <span class="token operator">=</span> next2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18);function m(b,h){const a=o("router-link");return l(),c("div",null,[k,n("nav",d,[n("ul",null,[n("li",null,[e(a,{to:"#描述"},{default:p(()=>[s("描述")]),_:1})]),n("li",null,[e(a,{to:"#解题思路"},{default:p(()=>[s("解题思路")]),_:1}),n("ul",null,[n("li",null,[e(a,{to:"#空间复杂度o-n-版本"},{default:p(()=>[s("空间复杂度O(n)版本")]),_:1})]),n("li",null,[e(a,{to:"#空间复杂度o-1-版本"},{default:p(()=>[s("空间复杂度O(1)版本")]),_:1})])])]),n("li",null,[e(a,{to:"#实现代码"},{default:p(()=>[s("实现代码")]),_:1}),n("ul",null,[n("li",null,[e(a,{to:"#空间复杂度o-n-版本-1"},{default:p(()=>[s("空间复杂度O(n)版本")]),_:1})]),n("li",null,[e(a,{to:"#空间复杂度o-1-版本-1"},{default:p(()=>[s("空间复杂度O(1)版本")]),_:1})])])])])]),v])}const w=t(r,[["render",m],["__file","FindFirstCommonNode.html.vue"]]);export{w as default};
