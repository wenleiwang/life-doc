import{_ as c,r as o,o as i,c as u,b as s,e as a,w as p,d as n,a as e}from"./app-7rGY8hGP.js";const r="/life-doc/assets/52a77a77b23305c37acc7e98debec3ff-cdpzizjZ.png",m="/life-doc/assets/14de8ee1ff86783a1d623abfca93ca4e-RiJVcODC.png",k="/life-doc/assets/90b10c865c892a2bb40c3d98945558a5-45cB1Uat.png",d="/life-doc/assets/6ce0c1d9bbef6296b274f1ed4c5872f7-IZhdicIX.png",v="/life-doc/assets/e0978bc34e92d9b91d67aaac374ae7b3-vBHWIZ6l.png",h={},b=s("h1",{id:"redis实现布隆过滤器-bloom-filter",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#redis实现布隆过滤器-bloom-filter","aria-hidden":"true"},"#"),n(" Redis实现布隆过滤器（Bloom Filter）")],-1),g={class:"table-of-contents"},y=e('<h2 id="布隆过滤器是什么" tabindex="-1"><a class="header-anchor" href="#布隆过滤器是什么" aria-hidden="true">#</a> 布隆过滤器是什么？</h2><p>可以把布隆过滤器理解成一个不怎么精准的Set结构。</p><p>布隆过滤器的主要功能就是判断某个元素在不在容器里面。因此，布隆过滤器非常适合缓存穿透的场景，就是查询一个肯定不存在于DB中的数据。另外一个业务场景也很简单，就是可以判断是否重复。 简单说，可以用布隆过滤器来解决缓存穿透问题，也可以使用布隆过滤器来检查数据是否重复。</p><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h3><ul><li>判断值存在，这个值可能不存在</li><li>判断值不存在，这个值一定不存在</li></ul><p>优点是查询速度与内存占用都要优于一般的 hash 算法，缺点是有小几率的识别错误，以及删除元素比较困难。</p><h2 id="常用场景" tabindex="-1"><a class="header-anchor" href="#常用场景" aria-hidden="true">#</a> 常用场景</h2><ul><li>过滤用户已经看过的内容</li><li>过滤爬虫已经爬过的网页。每爬取一个网页先判断是否在布隆过滤器里，如果不在，肯定没有爬取过，爬取网页后把网址放入布隆过滤器；如果在就不爬取了，很小概率误伤，但对于庞大大网络页面系统少几个页面代价与没有这个过滤重复爬取的性能消耗代价比较无妨~~</li><li>过滤黑名单邮件</li><li>防恶意流量击穿缓存，把所有的注册用户放在布隆过滤器里，来一个用户先检测是否是我的用户。 如果布隆过滤器返回不在，则判断为恶意攻击；如果判断在，很小的可能性是恶意攻击，这部分很小的没啥问题，击穿又何妨~</li></ul><h2 id="springboot使用redis布隆过滤器" tabindex="-1"><a class="header-anchor" href="#springboot使用redis布隆过滤器" aria-hidden="true">#</a> SpringBoot使用Redis布隆过滤器</h2><p>当然啦，首先是安装。</p><p>Redis官方提供的布隆过滤器到Redis4.0提供了插件功能之后才正式登场。</p><p>布隆过滤器作为一个插件加载到Redis Server中，给Redis提供了强大的布隆去重功能。</p><p>下面我们体验下Redis4.0的布隆过滤器， 采用docker的安装方式 先获取镜像 <code>docker search redislabs</code></p><p><img src="'+r+'" alt=""></p><p>拉取镜像，这样拉取是最新版本。</p><blockquote><p>这个rebloom是一个已经安装布隆过滤器插件的Redis，所以我们拉取下来可以直接使用</p><p>理解成原本的Redis安装了插件环境，然后把整个环境进行了一个封装打包成了一个docker镜像</p></blockquote><p><code>docker pull redislabs/rebloom</code></p><p>查看本地镜像列表 <code>docker images</code></p><p><img src="'+m+'" alt=""></p><p>启动，因为我已经启动过一个Redis实例，所以我这里切换了端口号</p><p><code>docker run -p 6380:6379 -d --name bloomredis 66d626dc1387 --requirepass &quot;自己的想要设置的密码&quot;</code></p><ul><li>-p 前面是主机端口，后面是docker虚拟机端口</li><li>-d 后台运行</li><li>--name 实例名称</li><li>--requirepass是redis的命令，设置密码</li></ul><p>查看运行效果 <code>docker ps</code></p><p><img src="'+k+`" alt=""></p><blockquote><p>正常启动以后访问如果出现了不能连接的情况，请查看防火墙是否开放端口</p><p>如果是购买的服务器，去控制开查看是否开启了端口</p></blockquote><h3 id="方式一-使用redisson的jar包" tabindex="-1"><a class="header-anchor" href="#方式一-使用redisson的jar包" aria-hidden="true">#</a> 方式一：使用Redisson的Jar包</h3><p>Redisson利用Redis实现了Java分布式的布隆过滤器。可以不用安装上面带布隆过滤器版本，正常安装Redis即可。</p><p>引入包</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>redisson-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.17.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedissonConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Redisson</span> redisson <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//单机模式</span>
        config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token comment">//配置地址</span>
            <span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">&quot;redis://ip:6380&quot;</span><span class="token punctuation">)</span>
            <span class="token comment">// 配置密码</span>
            <span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span>
            <span class="token comment">// 配置数据库</span>
            <span class="token punctuation">.</span><span class="token function">setDatabase</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Redisson</span><span class="token punctuation">)</span><span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>弄一个测试的Controller</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">Redisson</span> redisson<span class="token punctuation">;</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/bloomFilterCreate&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> bloomFilterCreate <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;开始创建&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">RBloomFilter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> bloomFilter <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getBloomFilter</span><span class="token punctuation">(</span><span class="token string">&quot;bloom-filter-test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bloomFilter<span class="token punctuation">.</span><span class="token function">tryInit</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">0.0001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        bloomFilter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token string">&quot;bloomFilterCreate Over！&quot;</span> <span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/bloomFilterTest&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> bloomFilterTest <span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">RBloomFilter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> bloomFilter <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getBloomFilter</span><span class="token punctuation">(</span><span class="token string">&quot;bloom-filter-test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bloomFilter<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">&quot;bloomFilterTest Over！id存在:&quot;</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">&quot;bloomFilterTest Over！id不存在:&quot;</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>这里启动时用了密码，依然可以使用bloomFilter</p><p>而经过下面一节的使用，发现如果带密码启动就不能使用Redis自带的<code>BF.ADD</code>等命令。猜测bloomFilter是自己实现的而不是使用Redis带的。</p><p>看下源码去： 点击add方法，一进去第一句<code>long[] hashes = hash(object);</code>果然，自己实现的。Redisson利用Redis实现了Java分布式的布隆过滤器。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">T</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hashes <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">readConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">int</span> hashIterations <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hashIterations<span class="token punctuation">;</span>
        <span class="token keyword">long</span> size <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>

        <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> indexes <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>hashes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> hashes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> hashIterations<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">CommandBatchService</span> executorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommandBatchService</span><span class="token punctuation">(</span>commandExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">addConfigCheck</span><span class="token punctuation">(</span>hashIterations<span class="token punctuation">,</span> size<span class="token punctuation">,</span> executorService<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RBitSetAsync</span> bs <span class="token operator">=</span> <span class="token function">createBitSet</span><span class="token punctuation">(</span>executorService<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> indexes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bs<span class="token punctuation">.</span><span class="token function">setAsync</span><span class="token punctuation">(</span>indexes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResponses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span> val <span class="token operator">:</span> result<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RedisException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;Bloom filter config has been changed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><blockquote><p>这里特别注意下：使用bloomFilter存入的使用int类型，判断时也要是int类型才可以，不能使用String</p></blockquote><h3 id="方式二-redis-lua脚本" tabindex="-1"><a class="header-anchor" href="#方式二-redis-lua脚本" aria-hidden="true">#</a> 方式二：Redis Lua脚本</h3><p>使用Redis的布隆过滤器插件，这里需要用到安装的Redis布隆过滤器插件。</p><p>#Lau脚本</p><blockquote><p>什么是Lua脚本？ Lua 是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放， 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。</p><p>其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。</p><p>理解成一个黑盒的方法，有入参，有出参。</p></blockquote><div class="custom-container tip"><p class="custom-container-title">需要知道</p><p>Redis保证了以原子方式执行脚本</p></div><p>添加脚本命令</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> bloomName <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">local</span> value <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token keyword">local</span> result <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;BF.ADD&#39;</span><span class="token punctuation">,</span>bloomName<span class="token punctuation">,</span>value<span class="token punctuation">)</span>
<span class="token keyword">return</span> result
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>判断脚本</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> bloomName <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">local</span> value <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>

<span class="token keyword">local</span> result <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;BF.EXISTS&#39;</span><span class="token punctuation">,</span>bloomName<span class="token punctuation">,</span>value<span class="token punctuation">)</span>
<span class="token keyword">return</span> result
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行一个小实例，为了直观效果我直接在Controller里写</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/addBloomFilterLua&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Boolean</span> bloomFilterLua <span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> luaScript <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    luaScript<span class="token punctuation">.</span><span class="token function">setScriptSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResourceScriptSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">&quot;bf_add.lua&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    luaScript<span class="token punctuation">.</span><span class="token function">setResultType</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//封装传递脚本参数</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    params<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;bloom-filter-test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    params<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;1001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">)</span>redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>luaScript<span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/exitBloomFilterLua&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Boolean</span> exitBloomFilterLua <span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">LuaScript</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">LuaScript</span><span class="token punctuation">.</span><span class="token function">setScriptSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResourceScriptSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">&quot;bf_exist.lua&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">LuaScript</span><span class="token punctuation">.</span><span class="token function">setResultType</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//封装传递脚本参数</span>
    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    params<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;bloom-filter-test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    params<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">LuaScript</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>经过运行结果发现<code>redislabs/rebloom</code>容器启动时，如果加上密码。执行上面脚本会报Unknown Redis command called from Lua script的错误。</p><p>把密码去掉直接使用<code>docker run -p 6380:6379 -d --name bloomredis 66d626dc1387</code>启动就可以使用</p><p>如果想设置密码，无密码启动后进入容器使用<code>config set requirepass 密码</code>设置</p></div><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># Redis数据库索引</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token comment"># redis数据库索引(默认为0)，我们使用索引为3的数据库，避免和其他数据库冲突</span>
    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token comment"># redis服务器地址（默认为loaclhost）</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> 150.158.58.15
    <span class="token comment"># redis端口（默认为6379）</span>
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6380</span>
    <span class="token comment"># redis访问密码（默认为空）</span>
<span class="token comment">#    password: 123456</span>
    <span class="token comment"># redis连接超时时间（单位毫秒）</span>
    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">600</span>
    <span class="token comment"># redis连接池配置</span>
    <span class="token key atrule">pool</span><span class="token punctuation">:</span>
      <span class="token comment"># 最大可用连接数（默认为8，负数表示无限）</span>
      <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">8</span>
      <span class="token comment"># 最大空闲连接数（默认为8，负数表示无限）</span>
      <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">8</span>
      <span class="token comment"># 最小空闲连接数（默认为0，该值只有为正数才有用）</span>
      <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span>
      <span class="token comment"># 从连接池中获取连接最大等待时间（默认为-1，单位为毫秒，负数表示无限）</span>
      <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">-1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>如果发现</p><p><code>(error) ERR Error running script (call to f_1a0d5cc7a3cb45884f991ede7af6c0063533bae1): @user_script:1: @user_script: 1: Unknown Redis command called from Lua script</code></p><p>这个错误。用<code>docker exec -it 容器名或ID /bin/bash</code>命令去到docker容器里执行<code>redis-cli</code>，进入命令台。</p><p><code>EVAL &quot;redis.call(&#39;BF.ADD&#39;,&#39;bloom-filter-test&#39;,KEYS[1])&quot; 1 1002</code> 执行这个试试，不能成功。</p><p><code>BF.ADD bloom-filter-test 1002</code> 执行这个也不能成功。</p><p>我就知道了容器没有挂上插件</p><p>退出使用<code>exit</code>先退出控制台；再使用<code>exit;</code>退出容器</p><p>关闭删除容器，重新使用无密码开启容器。再试如上操作成功，运行代码成功。</p></div><h3 id="方式三-自己实现一个布隆过滤器" tabindex="-1"><a class="header-anchor" href="#方式三-自己实现一个布隆过滤器" aria-hidden="true">#</a> 方式三：自己实现一个布隆过滤器</h3>`,50),w={href:"https://blog.csdn.net/lifetragedy/article/details/103945885",target:"_blank",rel:"noopener noreferrer"},f=s("p",null,"文章里使用的就是自己实现",-1),x=e('<h4 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h4><h5 id="_1-储备知识位图-bit-array-或-bit-map" tabindex="-1"><a class="header-anchor" href="#_1-储备知识位图-bit-array-或-bit-map" aria-hidden="true">#</a> 1. 储备知识位图（bit array 或 bit map）</h5><p>比如说 <code>int [] bitMap = new int [5];</code></p><p>就可以理解成，有5个格子</p><p><img src="'+d+'" alt=""></p><p>每个格子是4字节</p>',6),_=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mn",null,"4"),s("mi",null,"B"),s("mo",null,"="),s("msup",null,[s("mn",null,"2"),s("mn",null,"4")]),s("mi",null,"b"),s("mi",null,"i"),s("mi",null,"t"),s("mo",null,"="),s("mn",null,"32"),s("mi",null,"b"),s("mi",null,"i"),s("mi",null,"t")]),s("annotation",{encoding:"application/x-tex"}," 4B = 2^4 bit = 32bit ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord"},"4"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8641em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8641em"}},[s("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"4")])])])])])])]),s("span",{class:"mord mathnormal"},"bi"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord"},"32"),s("span",{class:"mord mathnormal"},"bi"),s("span",{class:"mord mathnormal"},"t")])])])])],-1),R=s("p",null,"也就是理解成5个格子，每个格子中有32个",-1),q=s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"高位 0000 0000 0000 0000 0000 0000 0000 0000 低位"),s("th",null,"0000 0000 0000 0000 0000 0000 0000 0000"),s("th",null,"0000 0000 0000 0000 0000 0000 0000 0000"),s("th",null,"0000 0000 0000 0000 0000 0000 0000 0000"),s("th",null,"0000 0000 0000 0000 0000 0000 0000 0000")])])],-1),S=s("p",null,[n("这样大小为5的整型数组就能表示 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"5"),s("mo",null,"∗"),s("mn",null,"32"),s("mo",null,"="),s("mn",null,"160"),s("mi",null,"b"),s("mi",null,"i"),s("mi",null,"t")]),s("annotation",{encoding:"application/x-tex"},"5 * 32 = 160bit")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"5"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"32"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord"},"160"),s("span",{class:"mord mathnormal"},"bi"),s("span",{class:"mord mathnormal"},"t")])])]),n("，如果没一个表示一个独立的信息，那么就能表示160个独立的信息；")],-1),B=e(`<p>同理能得出：大小为10的整型数组就能表示320个独立的信息。</p><p>如果要取出178位置上的信息，怎么取？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 定位去哪个数上找如下：就是说32、32、32我存到第几个32内，这个位置</span>
<span class="token keyword">int</span> numIndex <span class="token operator">=</span> <span class="token number">178</span> <span class="token operator">/</span> <span class="token number">32</span><span class="token punctuation">;</span>
<span class="token comment">// 这个数有32位，要找哪一位如下：就是说一个32，1位、1位、...存到第几个是我</span>
<span class="token keyword">int</span> bitIndex <span class="token operator">=</span> <span class="token number">178</span> <span class="token operator">%</span> <span class="token number">32</span><span class="token punctuation">;</span>

<span class="token comment">// 拿到位上的数</span>
<span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>numIndex<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> bitIndex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">// 把178位置上的值改为1。先把1左移到目标位，再与当前数组的值或，都是0才为0，其余全是1，1左移必然是1，则修改为0</span>
arr<span class="token punctuation">[</span>numIndex<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>numIndex<span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>bitIndex<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 把178位置上的值改为0。0与任何且操作都是0,1与任何且操作都保留任何值</span>
arr<span class="token punctuation">[</span>numIdex<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>numIndex<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> bitIndex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>拿到位上的数逻辑</p><ul><li>一次右移排除右侧所有干扰。</li><li>一次与1且操作，排除左侧干扰（0位前全都置为0）</li></ul><p><img src="`+v+'" alt=""></p><h5 id="_2-储备知识hash函数" tabindex="-1"><a class="header-anchor" href="#_2-储备知识hash函数" aria-hidden="true">#</a> 2.储备知识Hash函数</h5><p>这是一个很严谨的数据问题，我这里只知道特征：</p>',8),M=s("ul",null,[s("li",null,[n("首先是一个标准的函数，有输入(in)、有输出（out）、有函数名f。即得函数"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"o"),s("mi",null,"u"),s("mi",null,"t"),s("mo",null,"="),s("mi",null,"f"),s("mo",{stretchy:"false"},"("),s("mi",null,"i"),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"out = f (in)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6151em"}}),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"in"),s("span",{class:"mclose"},")")])])])]),s("li",null,"输入域无穷"),s("li",null,[n("输出域相对有限。如md5函数的输出就是0~"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mn",null,"64")]),s("mo",null,"−"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"2^{64} - 1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"64")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])])]),s("li",null,"相同的输入一定返回相同的输出"),s("li",null,"存在不同的输入得到相同的输出（哈希碰撞）"),s("li",null,"离散性")],-1),z=e('<p>一批输in，分别先哈希再对值模m，就能得到in均匀分布到0~m上</p><p>#哈希</p><h5 id="_3-布隆过滤器构造细节" tabindex="-1"><a class="header-anchor" href="#_3-布隆过滤器构造细节" aria-hidden="true">#</a> 3.布隆过滤器构造细节</h5><ol><li>先创建一个位图大小为m</li><li>放值。 输入1，先哈希，再模m得到在位图上的一个格子，把这个位置为1。进行k次，每次哈希函数不同 输入2，先哈希，再模m得到在位图上的一个格子，把这个位置为1。进行k次，每次哈希函数不同</li><li>判断存在。 输入x，先哈希，再m得到位图上的位置，该位置值是否为1。进行k次，每次哈希函数不同。如果k次有一次位图上的值为0则不存在</li></ol><h5 id="_4-什么能决定失误率" tabindex="-1"><a class="header-anchor" href="#_4-什么能决定失误率" aria-hidden="true">#</a> 4.什么能决定失误率</h5><ol><li>位图开多大，如果位图很大，失误了就很低。反之如果小，失误就上升。最差全部失误</li><li>K的地位，K表示采集一个值的几个特征。根据m以及样本量定出一个合适的k（m和样本量固定，随着k增大在一定值前失误减少，一定值后k增大失误上升）</li></ol><p>允不允许有失误率？</p>',7),L={href:"https://krisives.github.io/bloom-calculator/",target:"_blank",rel:"noopener noreferrer"},I=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"m"),s("mo",null,"="),s("mo",null,"−"),s("mfrac",null,[s("mrow",null,[s("mi",null,"n"),s("mo",null,"×"),s("mi",null,"ln"),s("mo",null,"⁡"),s("mi",null,"p")]),s("mrow",null,[s("mo",{stretchy:"false"},"("),s("mi",null,"ln"),s("mo",null,"⁡"),s("mn",null,"2"),s("msup",null,[s("mo",{stretchy:"false"},")"),s("mn",null,"2")])])])]),s("annotation",{encoding:"application/x-tex"}," m = -\\frac{n \\times \\ln{p}}{(\\ln2)^2} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.3074em","vertical-align":"-0.936em"}}),s("span",{class:"mord"},"−"),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3714em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mopen"},"("),s("span",{class:"mop"},"ln"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mclose"},[s("span",{class:"mclose"},")"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.7401em"}},[s("span",{style:{top:"-2.989em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mop"},"ln"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"p")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.936em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])])])])])],-1),F=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"k"),s("mo",null,"="),s("mi",null,"ln"),s("mo",null,"⁡"),s("mn",null,"2"),s("mo",null,"×"),s("mfrac",null,[s("mi",null,"m"),s("mi",null,"n")])]),s("annotation",{encoding:"application/x-tex"}," k = \\ln2 \\times \\frac{m}{n} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7778em","vertical-align":"-0.0833em"}}),s("span",{class:"mop"},"ln"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.7936em","vertical-align":"-0.686em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.1076em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n")])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"m")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.686em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])])])])])],-1),j=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"P"),s("mrow",null,[s("mi",null,"t"),s("mi",null,"r"),s("mi",null,"u"),s("mi",null,"e")])]),s("mo",null,"="),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",null,"−"),s("msup",null,[s("mi",null,"e"),s("mrow",null,[s("mo",null,"−"),s("mfrac",null,[s("mrow",null,[s("mi",null,"n"),s("mo",null,"×"),s("msub",null,[s("mi",null,"k"),s("mrow",null,[s("mi",null,"t"),s("mi",null,"r"),s("mi",null,"u"),s("mi",null,"e")])])]),s("msub",null,[s("mi",null,"m"),s("mrow",null,[s("mi",null,"t"),s("mi",null,"r"),s("mi",null,"u"),s("mi",null,"e")])])])])]),s("msup",null,[s("mo",{stretchy:"false"},")"),s("msub",null,[s("mi",null,"k"),s("mrow",null,[s("mi",null,"t"),s("mi",null,"u"),s("mi",null,"r"),s("mi",null,"e")])])])]),s("annotation",{encoding:"application/x-tex"}," P_{true} = (1 - e^{- \\frac{n \\times k_{true}}{m_{true}}})^{k_{ture}} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"P"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2806em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"t"),s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.02778em"}},"r"),s("span",{class:"mord mathnormal mtight"},"u"),s("span",{class:"mord mathnormal mtight"},"e")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.4425em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"e"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.1925em"}},[s("span",{style:{top:"-3.4837em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"−"),s("span",{class:"mord mtight"},[s("span",{class:"mopen nulldelimiter sizing reset-size3 size6"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.0126em"}},[s("span",{style:{top:"-2.656em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size3 size1 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"m"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3448em"}},[s("span",{style:{top:"-2.3448em","margin-left":"0em","margin-right":"0.1em"}},[s("span",{class:"pstrut",style:{height:"2.6151em"}}),s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"t"),s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.02778em"}},"r"),s("span",{class:"mord mathnormal mtight"},"u"),s("span",{class:"mord mathnormal mtight"},"e")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2703em"}},[s("span")])])])])])])])]),s("span",{style:{top:"-3.2255em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line mtight",style:{"border-bottom-width":"0.049em"}})]),s("span",{style:{top:"-3.5166em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size3 size1 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n"),s("span",{class:"mbin mtight"},"×"),s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3448em"}},[s("span",{style:{top:"-2.3448em","margin-left":"-0.0315em","margin-right":"0.1em"}},[s("span",{class:"pstrut",style:{height:"2.6151em"}}),s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"t"),s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.02778em"}},"r"),s("span",{class:"mord mathnormal mtight"},"u"),s("span",{class:"mord mathnormal mtight"},"e")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2703em"}},[s("span")])])])])])])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.5371em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter sizing reset-size3 size6"})])])])])])])])])]),s("span",{class:"mclose"},[s("span",{class:"mclose"},")"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8991em"}},[s("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2963em"}},[s("span",{style:{top:"-2.357em","margin-left":"-0.0315em","margin-right":"0.0714em"}},[s("span",{class:"pstrut",style:{height:"2.5em"}}),s("span",{class:"sizing reset-size3 size1 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"t"),s("span",{class:"mord mathnormal mtight"},"u"),s("span",{class:"mord mathnormal mtight"},"re")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.143em"}},[s("span")])])])])])])])])])])])])])])])])])],-1),C={href:"https://www.bilibili.com/video/BV13g41157hK?p=12&spm_id_from=333.1007.top_right_bar_window_history.content.click",target:"_blank",rel:"noopener noreferrer"},A=e(`<h4 id="简单实现" tabindex="-1"><a class="header-anchor" href="#简单实现" aria-hidden="true">#</a> 简单实现</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">learn<span class="token punctuation">.</span>note<span class="token punctuation">.</span>redis</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>base<span class="token punctuation">.</span></span><span class="token class-name">Charsets</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>hash<span class="token punctuation">.</span></span><span class="token class-name">Hashing</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Author Wang WenLei
 * @Date 2022/5/23 11:25
 * @Version 1.0
 **/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BloomFilter</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * hash函数执行次数
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> k<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 位图的大小
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> m<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">n</span> 样本容量n
     * <span class="token keyword">@param</span> <span class="token parameter">p</span> 容错率
     */</span>
    <span class="token class-name">BloomFilter</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 用计算求得k和m</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>m <span class="token operator">=</span> <span class="token function">getM</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>k <span class="token operator">=</span> <span class="token function">getK</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 得到位图大小
     * <span class="token keyword">@param</span> <span class="token parameter">n</span> 样本容量
     * <span class="token keyword">@param</span> <span class="token parameter">p</span> 容错率
     * <span class="token keyword">@return</span> 位图大小
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getM</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span> n <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">n</span> 样本容量
     * <span class="token keyword">@return</span> Hash函数执行次数
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getK</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> m <span class="token operator">/</span> n <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> getBitMapIndex <span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> bitMapIndex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">long</span> hash64 <span class="token operator">=</span> <span class="token class-name">Hashing</span><span class="token punctuation">.</span><span class="token function">murmur3_128</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashString</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token class-name">Charsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> hash64<span class="token punctuation">;</span>
        <span class="token keyword">int</span> hash1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> hash64<span class="token punctuation">;</span>
        <span class="token keyword">int</span> hash2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>hash64 <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 循环k次哈希函数</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// &amp; Long.MAX_VALUE 保证值是正数</span>
            <span class="token comment">// 任何 &amp; 0111111111111111111111111111111111111111111111111111111111111111</span>
            bitMapIndex<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>hash <span class="token operator">&amp;</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token keyword">this</span><span class="token punctuation">.</span>m<span class="token punctuation">;</span>
            <span class="token comment">// 随着i的增加有规律改变hash</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                hash <span class="token operator">+=</span> hash2<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                hash <span class="token operator">+=</span> hash1<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 得到的是应该在位图上标为1的位置数组</span>
        <span class="token keyword">return</span> bitMapIndex<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BloomFilter</span> bf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BloomFilter</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tests <span class="token operator">=</span> bf<span class="token punctuation">.</span><span class="token function">getBitMapIndex</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>总结： 列出的几个自己实现的代码，底层原理相似。</p><hr><blockquote><p>版本说明：</p><p>Java 8</p><p>SpringBoot v2.3.3.RELEASE</p><p>Redis 6.2.5</p></blockquote>`,8);function E(D,T){const t=o("router-link"),l=o("ExternalLinkIcon");return i(),u("div",null,[b,s("nav",g,[s("ul",null,[s("li",null,[a(t,{to:"#布隆过滤器是什么"},{default:p(()=>[n("布隆过滤器是什么？")]),_:1}),s("ul",null,[s("li",null,[a(t,{to:"#特点"},{default:p(()=>[n("特点")]),_:1})])])]),s("li",null,[a(t,{to:"#常用场景"},{default:p(()=>[n("常用场景")]),_:1})]),s("li",null,[a(t,{to:"#springboot使用redis布隆过滤器"},{default:p(()=>[n("SpringBoot使用Redis布隆过滤器")]),_:1}),s("ul",null,[s("li",null,[a(t,{to:"#方式一-使用redisson的jar包"},{default:p(()=>[n("方式一：使用Redisson的Jar包")]),_:1})]),s("li",null,[a(t,{to:"#方式二-redis-lua脚本"},{default:p(()=>[n("方式二：Redis Lua脚本")]),_:1})]),s("li",null,[a(t,{to:"#方式三-自己实现一个布隆过滤器"},{default:p(()=>[n("方式三：自己实现一个布隆过滤器")]),_:1})])])])])]),y,s("blockquote",null,[s("p",null,[s("a",w,[n("扩展阅读:SpringBoot+Redis布隆过滤器防恶意流量击穿缓存的正确姿势"),a(l)])]),f]),x,_,R,q,S,B,M,z,s("p",null,[s("a",L,[n("根据失误率和样本量得到k和m的网站"),a(l)])]),I,F,j,s("blockquote",null,[s("p",null,[s("a",C,[n("左神讲布隆过滤器原理1小时30分29秒"),a(l)])])]),A])}const K=c(h,[["render",E],["__file","Redis实现布隆过滤器.html.vue"]]);export{K as default};
