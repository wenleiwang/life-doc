import{_ as i,o as r,c as e,a as t}from"./app-7rGY8hGP.js";const n={},a=t('<h1 id="string类" tabindex="-1"><a class="header-anchor" href="#string类" aria-hidden="true">#</a> String类</h1><ul><li>split()</li><li>replace()</li><li>indexOf()</li><li>concat()</li><li>equals()</li><li>substring()</li><li>toLowerCase()</li><li>toUpperCase()</li><li>valueOf()</li><li>charAt()</li></ul><h2 id="string类中支持正则的方法" tabindex="-1"><a class="header-anchor" href="#string类中支持正则的方法" aria-hidden="true">#</a> String类中支持正则的方法</h2><ul><li>replace()</li><li>replaceAll()</li></ul><h2 id="new-string-和-的区别" tabindex="-1"><a class="header-anchor" href="#new-string-和-的区别" aria-hidden="true">#</a> new String()和&quot;&quot;的区别</h2><h2 id="字符串相加的实现机制" tabindex="-1"><a class="header-anchor" href="#字符串相加的实现机制" aria-hidden="true">#</a> 字符串相加的实现机制</h2><p>两个或两个以上的字符常量相加，在编译的时候会被优化，把两个或两个以上字符串常量自动合并成一个字符串常量</p><h2 id="string、stringbuilder、stringbuffer的区别" tabindex="-1"><a class="header-anchor" href="#string、stringbuilder、stringbuffer的区别" aria-hidden="true">#</a> String、StringBuilder、StringBuffer的区别</h2><p>String对象不可变，StringBuilder、StringBuffer可变。 StringBuilderr执行速度最佳，StringBuffer次之，String的执行速度最慢（String为字符串常量，而StringBuilder和StringBuffer均为字符串变量，String对象一旦创建后该对象是不可更改的，后两者的对象是变量是可以更改的） String、StringBuffer是线程安全的，StringBuilder是线程不安全的</p>',9),l=[a];function s(d,h){return r(),e("div",null,l)}const c=i(n,[["render",s],["__file","string.html.vue"]]);export{c as default};
