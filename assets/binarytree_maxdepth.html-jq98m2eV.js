import{_ as p,r as o,o as c,c as l,b as n,e,w as t,d as a,a as i}from"./app-7rGY8hGP.js";const u={},r=n("h1",{id:"二叉树的最大深度",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#二叉树的最大深度","aria-hidden":"true"},"#"),a(" 二叉树的最大深度")],-1),d={class:"table-of-contents"},k=i(`<h2 id="_0-题目" tabindex="-1"><a class="header-anchor" href="#_0-题目" aria-hidden="true">#</a> 0.题目</h2><h2 id="_1-递归实现" tabindex="-1"><a class="header-anchor" href="#_1-递归实现" aria-hidden="true">#</a> 1.递归实现</h2><h3 id="_1-1思路" tabindex="-1"><a class="header-anchor" href="#_1-1思路" aria-hidden="true">#</a> 1.1思路</h3><p>直接递归出深度</p><h3 id="_1-2代码" tabindex="-1"><a class="header-anchor" href="#_1-2代码" aria-hidden="true">#</a> 1.2代码</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">learn<span class="token punctuation">.</span>note<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>binarytree</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 求给定二叉树的最大深度，
 * <span class="token keyword">@author</span> WangWenLei
 * @DATE: 2022/3/11
 **/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bm28_MaxDepth</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TreeNode</span> tree <span class="token operator">=</span> <span class="token class-name">CreateTree</span><span class="token punctuation">.</span><span class="token function">createTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> maxDepth <span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-非递归实现" tabindex="-1"><a class="header-anchor" href="#_2-非递归实现" aria-hidden="true">#</a> 2.非递归实现</h2><h3 id="_2-1思路" tabindex="-1"><a class="header-anchor" href="#_2-1思路" aria-hidden="true">#</a> 2.1思路</h3><h3 id="_2-2代码" tabindex="-1"><a class="header-anchor" href="#_2-2代码" aria-hidden="true">#</a> 2.2代码</h3>`,9);function h(m,v){const s=o("router-link");return c(),l("div",null,[r,n("nav",d,[n("ul",null,[n("li",null,[e(s,{to:"#_0-题目"},{default:t(()=>[a("0.题目")]),_:1})]),n("li",null,[e(s,{to:"#_1-递归实现"},{default:t(()=>[a("1.递归实现")]),_:1}),n("ul",null,[n("li",null,[e(s,{to:"#_1-1思路"},{default:t(()=>[a("1.1思路")]),_:1})]),n("li",null,[e(s,{to:"#_1-2代码"},{default:t(()=>[a("1.2代码")]),_:1})])])]),n("li",null,[e(s,{to:"#_2-非递归实现"},{default:t(()=>[a("2.非递归实现")]),_:1}),n("ul",null,[n("li",null,[e(s,{to:"#_2-1思路"},{default:t(()=>[a("2.1思路")]),_:1})]),n("li",null,[e(s,{to:"#_2-2代码"},{default:t(()=>[a("2.2代码")]),_:1})])])])])]),k])}const b=p(u,[["render",h],["__file","binarytree_maxdepth.html.vue"]]);export{b as default};
