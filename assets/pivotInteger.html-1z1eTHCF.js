import{_ as p,r as o,o as c,c as l,b as n,e,w as t,d as s,a as i}from"./app-7rGY8hGP.js";const u="/life-doc/assets/cc1d69b124f70c827c71a144a12e94dd-1Rx2q4HQ.png",r={},d=n("h1",{id:"找出中枢整数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#找出中枢整数","aria-hidden":"true"},"#"),s(" 找出中枢整数")],-1),k={class:"table-of-contents"},v=i(`<p>题目来自力扣</p><h2 id="_0-描述" tabindex="-1"><a class="header-anchor" href="#_0-描述" aria-hidden="true">#</a> 0.描述</h2><p>给你一个正整数 n ，找出满足下述条件的 中枢整数 x ：</p><p>1 和 x 之间的所有元素之和等于 x 和 n 之间所有元素之和。 返回中枢整数 x 。如果不存在中枢整数，则返回 -1 。题目保证对于给定的输入，至多存在一个中枢整数。</p><p>示例 1：</p><blockquote><p>输入：n = 8</p><p>输出：6</p><p>解释：6 是中枢整数，因为 1 + 2 + 3 + 4 + 5 + 6 = 6 + 7 + 8 = 21 。</p></blockquote><p>示例 2：</p><blockquote><p>输入：n = 1</p><p>输出：1</p><p>解释：1 是中枢整数，因为 1 = 1 。</p></blockquote><p>示例 3：</p><blockquote><p>输入：n = 4</p><p>输出：-1</p><p>解释：可以证明不存在满足题目要求的整数。</p></blockquote><p>提示：</p><blockquote><p>1 &lt;= n &lt;= 1000</p></blockquote><h2 id="_1-简单实现" tabindex="-1"><a class="header-anchor" href="#_1-简单实现" aria-hidden="true">#</a> 1.简单实现</h2><h3 id="_1-1简单实现思路" tabindex="-1"><a class="header-anchor" href="#_1-1简单实现思路" aria-hidden="true">#</a> 1.1简单实现思路</h3><h3 id="_1-2简单实现代码" tabindex="-1"><a class="header-anchor" href="#_1-2简单实现代码" aria-hidden="true">#</a> 1.2简单实现代码</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pivotInteger</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cur <span class="token operator">+=</span> i<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> i<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            sum <span class="token operator">-=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3复杂度" tabindex="-1"><a class="header-anchor" href="#_1-3复杂度" aria-hidden="true">#</a> 1.3复杂度</h3><p>时间复杂度：O(n)</p><p>空间复杂度：O(1)仅使用常量空间。</p><h2 id="数学实现" tabindex="-1"><a class="header-anchor" href="#数学实现" aria-hidden="true">#</a> 数学实现</h2><h3 id="_2-1思路" tabindex="-1"><a class="header-anchor" href="#_2-1思路" aria-hidden="true">#</a> 2.1思路</h3><p><img src="`+u+`" alt=""></p><h3 id="_2-2代码" tabindex="-1"><a class="header-anchor" href="#_2-2代码" aria-hidden="true">#</a> 2.2代码</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pivotInteger</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">*</span> n <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> x <span class="token operator">==</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> x<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24);function b(m,h){const a=o("router-link");return c(),l("div",null,[d,n("nav",k,[n("ul",null,[n("li",null,[e(a,{to:"#_0-描述"},{default:t(()=>[s("0.描述")]),_:1})]),n("li",null,[e(a,{to:"#_1-简单实现"},{default:t(()=>[s("1.简单实现")]),_:1}),n("ul",null,[n("li",null,[e(a,{to:"#_1-1简单实现思路"},{default:t(()=>[s("1.1简单实现思路")]),_:1})]),n("li",null,[e(a,{to:"#_1-2简单实现代码"},{default:t(()=>[s("1.2简单实现代码")]),_:1})]),n("li",null,[e(a,{to:"#_1-3复杂度"},{default:t(()=>[s("1.3复杂度")]),_:1})])])]),n("li",null,[e(a,{to:"#数学实现"},{default:t(()=>[s("数学实现")]),_:1}),n("ul",null,[n("li",null,[e(a,{to:"#_2-1思路"},{default:t(()=>[s("2.1思路")]),_:1})]),n("li",null,[e(a,{to:"#_2-2代码"},{default:t(()=>[s("2.2代码")]),_:1})])])])])]),v])}const f=p(r,[["render",b],["__file","pivotInteger.html.vue"]]);export{f as default};
