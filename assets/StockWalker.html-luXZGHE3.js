import{_ as l,r as e,o as i,c as u,b as n,e as s,w as p,d as a,a as c}from"./app-7rGY8hGP.js";const k="/life-doc/assets/3879f752e182cef828ac2b87a74182a7-qSV-kC12.png",r="/life-doc/assets/d3baddce7685061e7ae91a647ae85d6c-h4hpQJBV.png",d="/life-doc/assets/f65ce29d368e451b1f430bef0131eaf8-kG7I1Ugl.png",v={},m=n("h1",{id:"stockwalker类",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#stockwalker类","aria-hidden":"true"},"#"),a(" StockWalker类")],-1),g={class:"table-of-contents"},b=c(`<h2 id="类说明" tabindex="-1"><a class="header-anchor" href="#类说明" aria-hidden="true">#</a> 类说明</h2><p>获取调用栈信息，并附带一些操作的一个工具类。</p><blockquote><p>看下这类上标记的原著说明：</p><p>堆栈步行者。 该方法walk为当前线程打开 StackFrames 的顺序流，然后应用给定的函数遍历StackFrame流。流按顺序报告堆栈帧元素，从表示生成堆栈的执行点的最顶部帧到最底部的帧。当walk方法返回时，StackFrame流将关闭。如果尝试重用关闭的流，IllegalStateException将被抛出。 StackWalker类中的”Options枚举“决定了要返回的StackFrame对象的信息。默认情况下，反射API和实现类的堆栈帧（Stack Frames）都是被隐藏起来的，在这些Stack Frames中只有类名和方法名是可用的，而没有Class引用。 StackWalker 是线程安全的。多个线程可以共享单个 StackWalker 对象以遍历其自己的堆栈。创建 StackWalker 时，将根据其请求的选项执行权限检查。在堆栈遍历时不会进行进一步的权限检查。 接口说明： 例子</p><ol><li><p>要查找过滤得到所知实现类列表的第一个调用者，请执行以下操作：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">StackWalker</span> walker <span class="token operator">=</span> <span class="token class-name">StackWalker</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">Option</span><span class="token punctuation">.</span><span class="token constant">RETAIN_CLASS_REFERENCE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> callerClass <span class="token operator">=</span> walker<span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">StackFrame</span><span class="token operator">::</span><span class="token function">getDeclaringClass</span><span class="token punctuation">)</span>
                                             <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>interestingClasses<span class="token operator">::</span><span class="token function">contains</span><span class="token punctuation">)</span>
                                             <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>要快照当前线程的前 10 个堆栈帧，</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StackFrame</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token class-name">StackWalker</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>除非另有说明，否则将 null 参数传递给此 StackWalker 类中的构造函数或方法将导致引发 NullPointerException</p></li></ol><p>自从：9</p></blockquote><h2 id="描述与使用" tabindex="-1"><a class="header-anchor" href="#描述与使用" aria-hidden="true">#</a> 描述与使用</h2><p>在Java9之前，要获得栈信息办法是：获取当前线程并调用其getStackTrace()方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">StackTraceElement</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stackTraceElements <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>另一个智能解决方案涉及...抛出异常并从中提取堆栈跟踪信息。但是，无法操纵结果，它只会立即输出：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,8),f={href:"http://openjdk.java.net/jeps/259",target:"_blank",rel:"noopener noreferrer"},h=c(`<p>我们可以像以下一样轻松创建StackWalker实例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">StackWalkerstack</span> <span class="token operator">=</span> <span class="token class-name">StackWalker</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>还可以定制一点初始化信息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">StackWalkerstack</span> <span class="token operator">=</span> <span class="token class-name">StackWalker</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">StackWalker<span class="token punctuation">.</span>Option</span><span class="token punctuation">.</span><span class="token constant">RETAIN_CLASS_REFERENCE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果我们想要遍历整个堆栈，只需调用forEach（）方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>stack<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="springboot源码涉及" tabindex="-1"><a class="header-anchor" href="#springboot源码涉及" aria-hidden="true">#</a> SpringBoot源码涉及</h2><p>Java 9之前，SpringBoot 2.7.3代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">deduceMainApplicationClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">StackTraceElement</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stackTrace <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">StackTraceElement</span> stackTraceElement <span class="token operator">:</span> stackTrace<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// </span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;main&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>stackTraceElement<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 反射得到这个类的实现</span>
                <span class="token keyword">return</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>stackTraceElement<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Swallow and continue</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java 17，SpringBoot 3.0.5同样一块逻辑代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">deduceMainApplicationClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">StackWalker</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">StackWalker<span class="token punctuation">.</span>Option</span><span class="token punctuation">.</span><span class="token constant">RETAIN_CLASS_REFERENCE</span><span class="token punctuation">)</span>
        <span class="token comment">// 从堆栈顶部遍历，使用完就不能再用这个流，不然会报IllegalStateException</span>
        <span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">findMainClass</span><span class="token punctuation">)</span>
        <span class="token comment">// 如果存在值，则返回该值，否则返回null。</span>
	    <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">findMainClass</span><span class="token punctuation">(</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StackFrame</span><span class="token punctuation">&gt;</span></span> stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> stack
        <span class="token comment">// 过滤方法名为main的栈帧</span>
        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>frame<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;main&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment">// 取第一个</span>
        <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// 获取此堆栈帧表示的方法的声明 Class ，得到的是一个类的实现</span>
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">StackWalker<span class="token punctuation">.</span>StackFrame</span><span class="token operator">::</span><span class="token function">getDeclaringClass</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实战" tabindex="-1"><a class="header-anchor" href="#实战" aria-hidden="true">#</a> 实战</h2><h3 id="基础使用一下" tabindex="-1"><a class="header-anchor" href="#基础使用一下" aria-hidden="true">#</a> 基础使用一下</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">StackWalker</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">StackWalker<span class="token punctuation">.</span>Option</span><span class="token punctuation">.</span><span class="token constant">RETAIN_CLASS_REFERENCE</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果展示：</p><p><img src="`+k+'" alt=""></p><h3 id="进阶一点" tabindex="-1"><a class="header-anchor" href="#进阶一点" aria-hidden="true">#</a> 进阶一点</h3><p>可以发现s相当于就是堆栈流，.walk就可以用流的方式操作进行循环、过滤等操作得到一个返回结果</p><p><img src="'+r+`" alt=""></p><h4 id="得到一个optional" tabindex="-1"><a class="header-anchor" href="#得到一个optional" aria-hidden="true">#</a> 得到一个Optional</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> optional <span class="token operator">=</span> <span class="token class-name">StackWalker</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">StackWalker<span class="token punctuation">.</span>Option</span><span class="token punctuation">.</span><span class="token constant">RETAIN_CLASS_REFERENCE</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>
        s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> i<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;main&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">StackWalker<span class="token punctuation">.</span>StackFrame</span><span class="token operator">::</span><span class="token function">getDeclaringClass</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="调用栈中包含main函数的类的实例" tabindex="-1"><a class="header-anchor" href="#调用栈中包含main函数的类的实例" aria-hidden="true">#</a> 调用栈中包含main函数的类的实例</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> aClass <span class="token operator">=</span> <span class="token class-name">StackWalker</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">StackWalker<span class="token punctuation">.</span>Option</span><span class="token punctuation">.</span><span class="token constant">RETAIN_CLASS_REFERENCE</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>
        s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> i<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;main&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">StackWalker<span class="token punctuation">.</span>StackFrame</span><span class="token operator">::</span><span class="token function">getDeclaringClass</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多调用几次发现都是同一个Class@457，说明getDeclaringClass得到的是同一个</p><p><img src="`+d+'" alt=""></p><hr><p>完~</p>',27);function S(E,_){const t=e("router-link"),o=e("ExternalLinkIcon");return i(),u("div",null,[m,n("nav",g,[n("ul",null,[n("li",null,[s(t,{to:"#类说明"},{default:p(()=>[a("类说明")]),_:1})]),n("li",null,[s(t,{to:"#描述与使用"},{default:p(()=>[a("描述与使用")]),_:1})]),n("li",null,[s(t,{to:"#springboot源码涉及"},{default:p(()=>[a("SpringBoot源码涉及")]),_:1})]),n("li",null,[s(t,{to:"#实战"},{default:p(()=>[a("实战")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#基础使用一下"},{default:p(()=>[a("基础使用一下")]),_:1})]),n("li",null,[s(t,{to:"#进阶一点"},{default:p(()=>[a("进阶一点")]),_:1})])])])])]),b,n("p",null,[n("a",f,[a("JEP-259"),s(o)]),a(" 提出Stack-Walking API可以解决这些问题。新的API提供了一种使用Stream API惰性地遍历堆栈跟踪的便捷方法。")]),h])}const C=l(v,[["render",S],["__file","StockWalker.html.vue"]]);export{C as default};
