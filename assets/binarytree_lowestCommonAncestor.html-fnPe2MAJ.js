import{_ as p,r as o,o as c,c as l,b as n,e,w as t,d as s,a as i}from"./app-7rGY8hGP.js";const u="/life-doc/assets/b89ef295395814ffa54d35013f94c030-W89Fw9oZ.png",r={},d=n("h1",{id:"二叉搜索树的最近公共祖先",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#二叉搜索树的最近公共祖先","aria-hidden":"true"},"#"),s(" 二叉搜索树的最近公共祖先")],-1),k={class:"table-of-contents"},v=i('<h2 id="_0-题目" tabindex="-1"><a class="header-anchor" href="#_0-题目" aria-hidden="true">#</a> 0.题目</h2><p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。 1.对于该题的最近的公共祖先定义:对于有根树T的两个节点p、q，最近公共祖先LCA(T,p,q)表示一个节点x，满足x是p和q的祖先且x的深度尽可能大。在这里，一个节点也可以是它自己的祖先. 2.二叉搜索树是若它的左子树不空，则左子树上所有节点的值均小于它的根节点的值； 若它的右子树不空，则右子树上所有节点的值均大于它的根节点的值 3.所有节点的值都是唯一的。 4.p、q 为不同节点且均存在于给定的二叉搜索树中。 数据范围: 3&lt;=节点总数&lt;=10000 0&lt;=节点值&lt;=10000</p><p>如果给定以下搜索二叉树: {7,1,12,0,4,11,14,#,#,3,5}，如下图:</p><p><img src="'+u+`" alt=""></p><p>示例1</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：
{7,1,12,0,4,11,14,#,#,3,5},1,12
返回值：
7
说明：
节点1 和 节点12的最近公共祖先是7   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例2</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：
{7,1,12,0,4,11,14,#,#,3,5},12,11
返回值：
12
说明：
因为一个节点也可以是它自己的祖先.所以输出12   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-思路" tabindex="-1"><a class="header-anchor" href="#_1-思路" aria-hidden="true">#</a> 1.思路</h2><p>根据二叉搜索树的特性，一个结点值比左子树结点值都大，结点值比右子树值都小 那么，</p><p>结点值比p、q都小就去它的左子树</p><p>结点值比p、q都大就去它的右子树</p><p>其余情况，或跟p相等或跟q相等。即为要么p是q的祖先，要么q是p的祖先，直接返回这个节点即可</p><p>没找到就去它的子找，找到就返回，返回后什么也不做，一直返回到栈的最底层跳出方法</p><blockquote><p>考虑：</p><ol><li>题目约束p、q在树内</li><li>题目约束至少3个结点</li></ol></blockquote><h2 id="_2-代码" tabindex="-1"><a class="header-anchor" href="#_2-代码" aria-hidden="true">#</a> 2.代码</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bm37_LowestCommonAncestor</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TreeNode</span> tree <span class="token operator">=</span> <span class="token class-name">CreateTree</span><span class="token punctuation">.</span><span class="token function">createTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> lowestCommonAncestor <span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">lowestCommon</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> lowestCommon <span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> p <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> lowestCommon <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span> <span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> p <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> lowestCommon <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span> <span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> root<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17);function m(b,_){const a=o("router-link");return c(),l("div",null,[d,n("nav",k,[n("ul",null,[n("li",null,[e(a,{to:"#_0-题目"},{default:t(()=>[s("0.题目")]),_:1})]),n("li",null,[e(a,{to:"#_1-思路"},{default:t(()=>[s("1.思路")]),_:1})]),n("li",null,[e(a,{to:"#_2-代码"},{default:t(()=>[s("2.代码")]),_:1})])])]),v])}const h=p(r,[["render",m],["__file","binarytree_lowestCommonAncestor.html.vue"]]);export{h as default};
