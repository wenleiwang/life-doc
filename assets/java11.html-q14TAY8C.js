import{_ as e,r as o,o as c,c as l,b as n,e as t,w as p,d as s,a as i}from"./app-7rGY8hGP.js";const u={},k=n("h1",{id:"java11新特性",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#java11新特性","aria-hidden":"true"},"#"),s(" Java11新特性")],-1),r={class:"table-of-contents"},d=i(`<h2 id="_0-总结" tabindex="-1"><a class="header-anchor" href="#_0-总结" aria-hidden="true">#</a> 0.总结</h2><p>最实用的八大新特性</p><ol><li>本地变量类型推断</li><li>字符串加强</li><li>集合加强</li><li>Stream 加强</li><li>Optional 加强</li><li>InputStream 加强</li><li>HTTP Client API</li><li>化繁为简，一个命令编译运行源代码</li></ol><h2 id="_1-本地变量类型推断" tabindex="-1"><a class="header-anchor" href="#_1-本地变量类型推断" aria-hidden="true">#</a> 1.本地变量类型推断</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>局部变量类型推断就是左边的类型直接使用var定义，而不用写具体的类型，编译器能根据右边的表达式自动推断类型，如上面的String</p><h2 id="_2-字符串加强" tabindex="-1"><a class="header-anchor" href="#_2-字符串加强" aria-hidden="true">#</a> 2.字符串加强</h2><p>Java 11 增加了一系列的字符串处理方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 判断字符串是否为空白</span>
<span class="token string">&quot; &quot;</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token comment">// 去除尾部空格</span>
<span class="token string">&quot; name&quot;</span><span class="token punctuation">.</span><span class="token function">strip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;name&quot;</span>
<span class="token comment">// 去除首部空格</span>
<span class="token string">&quot; name &quot;</span><span class="token punctuation">.</span><span class="token function">stripTrailing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;name &quot;</span>
<span class="token comment">// 去除位部空格</span>
<span class="token string">&quot; name &quot;</span><span class="token punctuation">.</span><span class="token function">stripLeading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot; name&quot;</span>
<span class="token comment">// 复制字符串</span>
<span class="token string">&quot;name&quot;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;namenamename&quot;</span>
<span class="token comment">// 行数统计</span>
<span class="token string">&quot;A\\nB\\nC&quot;</span><span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-集合加强" tabindex="-1"><a class="header-anchor" href="#_3-集合加强" aria-hidden="true">#</a> 3.集合加强</h2><p>自 Java 9 开始，Jdk 里面为集合（List/ Set/ Map）都添加了 of 和 copyOf 方法，它们两个都用来创建不可变的集合，来看下它们的使用和区别 示例1：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;Java&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Python&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> copy <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list <span class="token operator">==</span> copy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例2：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> copy <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list <span class="token operator">==</span> copy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看下源码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> elements<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>elements<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// implicit null check of elements</span>
        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token class-name">ImmutableCollections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableCollections<span class="token punctuation">.</span>List12</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableCollections<span class="token punctuation">.</span>List12</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> elements<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableCollections<span class="token punctuation">.</span>ListN</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>elements<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">copyOf</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> coll<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">ImmutableCollections</span><span class="token punctuation">.</span><span class="token function">listCopy</span><span class="token punctuation">(</span>coll<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">listCopy</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> coll<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>coll <span class="token keyword">instanceof</span> <span class="token class-name">AbstractImmutableList</span> <span class="token operator">&amp;&amp;</span> coll<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">SubList</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>coll<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>coll<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出 copyOf 方法会先判断来源集合是不是 AbstractImmutableList 类型的，如果是，就直接返回，如果不是，则调用 of 创建一个新的集合。</p><p>示例2因为用的 new 创建的集合，不属于不可变 AbstractImmutableList 类的子类，所以 copyOf 方法又创建了一个新的实例，所以为false.</p><p>注意：使用of和copyOf创建的集合为不可变集合，不能进行添加、删除、替换、排序等操作，不然会报 java.lang.UnsupportedOperationException 异常。</p><p>上面演示了 List 的 of 和 copyOf 方法，Set 和 Map 接口都有。</p><h2 id="_4-stream加强" tabindex="-1"><a class="header-anchor" href="#_4-stream加强" aria-hidden="true">#</a> 4. Stream加强</h2><p>Stream 是 Java 8 中的新特性，Java 9 开始对 Stream 增加了以下 4 个新方法。</p><h2 id="_5-optional-加强" tabindex="-1"><a class="header-anchor" href="#_5-optional-加强" aria-hidden="true">#</a> 5. Optional 加强</h2><h2 id="_6-inputstream-加强" tabindex="-1"><a class="header-anchor" href="#_6-inputstream-加强" aria-hidden="true">#</a> 6. InputStream 加强</h2><h2 id="_7-http-client-api" tabindex="-1"><a class="header-anchor" href="#_7-http-client-api" aria-hidden="true">#</a> 7. HTTP Client API</h2><h2 id="_8-化繁为简-一个命令编译运行源代码" tabindex="-1"><a class="header-anchor" href="#_8-化繁为简-一个命令编译运行源代码" aria-hidden="true">#</a> 8.化繁为简，一个命令编译运行源代码</h2>`,26);function m(v,b){const a=o("router-link");return c(),l("div",null,[k,n("nav",r,[n("ul",null,[n("li",null,[t(a,{to:"#_0-总结"},{default:p(()=>[s("0.总结")]),_:1})]),n("li",null,[t(a,{to:"#_1-本地变量类型推断"},{default:p(()=>[s("1.本地变量类型推断")]),_:1})]),n("li",null,[t(a,{to:"#_2-字符串加强"},{default:p(()=>[s("2.字符串加强")]),_:1})]),n("li",null,[t(a,{to:"#_3-集合加强"},{default:p(()=>[s("3.集合加强")]),_:1})]),n("li",null,[t(a,{to:"#_4-stream加强"},{default:p(()=>[s("4. Stream加强")]),_:1})]),n("li",null,[t(a,{to:"#_5-optional-加强"},{default:p(()=>[s("5. Optional 加强")]),_:1})]),n("li",null,[t(a,{to:"#_6-inputstream-加强"},{default:p(()=>[s("6. InputStream 加强")]),_:1})]),n("li",null,[t(a,{to:"#_7-http-client-api"},{default:p(()=>[s("7. HTTP Client API")]),_:1})]),n("li",null,[t(a,{to:"#_8-化繁为简-一个命令编译运行源代码"},{default:p(()=>[s("8.化繁为简，一个命令编译运行源代码")]),_:1})])])]),d])}const f=e(u,[["render",m],["__file","java11.html.vue"]]);export{f as default};
