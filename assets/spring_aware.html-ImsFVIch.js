import{_ as r,r as l,o as c,c as i,b as e,e as n,w as s,d as t,a as d}from"./app-7rGY8hGP.js";const p={},_=e("h1",{id:"spring的aware",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#spring的aware","aria-hidden":"true"},"#"),t(" Spring的"),e("code",null,"Aware")],-1),h={class:"table-of-contents"},u=d(`<h2 id="applicationcontextaware" tabindex="-1"><a class="header-anchor" href="#applicationcontextaware" aria-hidden="true">#</a> <code>ApplicationContextAware</code></h2><p>当<code>ApplicationContext</code>创建一个实现 <code>org.springframework.context.ApplicationContextAware</code>接口的对象实例时，会为该实例提供对该<code>ApplicationContext</code>的引用。以下为<code>ApplicationContextAware</code>接口的定义</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，Bean可以通过接口或通过将引用转换为该接口的子类</p><h2 id="beannameaware" tabindex="-1"><a class="header-anchor" href="#beannameaware" aria-hidden="true">#</a> <code>BeanNameAware</code></h2><p>当<code>ApplicationContext</code>创建一个实现 <code>org.springframework.beans.factory.BeanNameAware</code>接口的类时，该类被提供了对其关联对象定义中定义的名称的引用。以下清单显示了 BeanNameAware 接口的定义：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanNameAware</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">setBeanName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在填充普通 bean 属性之后但在初始化回调（例如<code>InitializingBean.afterPropertiesSet()</code>自定义 init 方法）之前调用回调。</p><h2 id="其他aware" tabindex="-1"><a class="header-anchor" href="#其他aware" aria-hidden="true">#</a> 其他<code>Aware</code></h2><p>Spring 提供了广泛的<code>Aware</code>回调接口，让 bean 向容器指示它们需要特定的基础设施依赖项。作为一般规则，名称表示依赖类型。</p>`,10),f=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"名称"),e("th",{style:{"text-align":"left"}},"注入依赖"),e("th",{style:{"text-align":"left"}},"解释...")])],-1),g=e("td",{style:{"text-align":"left"}},[e("code",null,"ApplicationContextAware")],-1),m=e("td",{style:{"text-align":"left"}},[t("声明"),e("code",null,"ApplicationContext"),t(".")],-1),x={style:{"text-align":"left"}},w={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-aware",target:"_blank",rel:"noopener noreferrer"},k=e("code",null,"ApplicationContextAware",-1),y=e("code",null,"BeanNameAware",-1),A=e("td",{style:{"text-align":"left"}},[e("code",null,"ApplicationEventPublisherAware")],-1),b=e("td",{style:{"text-align":"left"}},[t("封闭的事件发布者"),e("code",null,"ApplicationContext"),t("。")],-1),v={style:{"text-align":"left"}},C={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#context-introduction",target:"_blank",rel:"noopener noreferrer"},B=e("code",null,"ApplicationContext",-1),N=e("td",{style:{"text-align":"left"}},[e("code",null,"BeanClassLoaderAware")],-1),S=e("td",{style:{"text-align":"left"}},"类加载器用于加载 bean 类。",-1),j={style:{"text-align":"left"}},E={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-class",target:"_blank",rel:"noopener noreferrer"},V=e("td",{style:{"text-align":"left"}},[e("code",null,"BeanFactoryAware")],-1),L=e("td",{style:{"text-align":"left"}},[t("声明"),e("code",null,"BeanFactory"),t(".")],-1),M={style:{"text-align":"left"}},F={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-beanfactory",target:"_blank",rel:"noopener noreferrer"},I=e("code",null,"BeanFactory",-1),P=e("td",{style:{"text-align":"left"}},[e("code",null,"BeanNameAware")],-1),J=e("td",{style:{"text-align":"left"}},"声明 bean 的名称。",-1),T={style:{"text-align":"left"}},z={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-aware",target:"_blank",rel:"noopener noreferrer"},R=e("code",null,"ApplicationContextAware",-1),W=e("code",null,"BeanNameAware",-1),X=e("td",{style:{"text-align":"left"}},[e("code",null,"LoadTimeWeaverAware")],-1),q=e("td",{style:{"text-align":"left"}},"定义的编织器，用于在加载时处理类定义。",-1),D={style:{"text-align":"left"}},G={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#aop-aj-ltw",target:"_blank",rel:"noopener noreferrer"},H=e("td",{style:{"text-align":"left"}},[e("code",null,"MessageSourceAware")],-1),K=e("td",{style:{"text-align":"left"}},"用于解析消息的配置策略（支持参数化和国际化）。",-1),O={style:{"text-align":"left"}},Q={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#context-introduction",target:"_blank",rel:"noopener noreferrer"},U=e("code",null,"ApplicationContext",-1),Y=e("td",{style:{"text-align":"left"}},[e("code",null,"NotificationPublisherAware")],-1),Z=e("td",{style:{"text-align":"left"}},"Spring JMX 通知发布者。",-1),$={style:{"text-align":"left"}},ee={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/integration.html#jmx-notifications",target:"_blank",rel:"noopener noreferrer"},te=e("td",{style:{"text-align":"left"}},[e("code",null,"ResourceLoaderAware")],-1),ne=e("td",{style:{"text-align":"left"}},"为对资源进行低级访问而配置的加载程序。",-1),ae={style:{"text-align":"left"}},oe={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#resources",target:"_blank",rel:"noopener noreferrer"},se=e("td",{style:{"text-align":"left"}},[e("code",null,"ServletConfigAware")],-1),le=e("td",{style:{"text-align":"left"}},[t("当前"),e("code",null,"ServletConfig"),t("容器在其中运行。仅在可感知网络的 Spring 中有效 "),e("code",null,"ApplicationContext"),t("。")],-1),re={style:{"text-align":"left"}},ce={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc",target:"_blank",rel:"noopener noreferrer"},ie=e("td",{style:{"text-align":"left"}},[e("code",null,"ServletContextAware")],-1),de=e("td",{style:{"text-align":"left"}},[t("当前"),e("code",null,"ServletContext"),t("容器在其中运行。仅在可感知网络的 Spring 中有效 "),e("code",null,"ApplicationContext"),t("。")],-1),pe={style:{"text-align":"left"}},_e={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc",target:"_blank",rel:"noopener noreferrer"};function he(ue,fe){const o=l("router-link"),a=l("ExternalLinkIcon");return c(),i("div",null,[_,e("nav",h,[e("ul",null,[e("li",null,[n(o,{to:"#applicationcontextaware"},{default:s(()=>[t("ApplicationContextAware")]),_:1})]),e("li",null,[n(o,{to:"#beannameaware"},{default:s(()=>[t("BeanNameAware")]),_:1})]),e("li",null,[n(o,{to:"#其他aware"},{default:s(()=>[t("其他Aware")]),_:1})])])]),u,e("table",null,[f,e("tbody",null,[e("tr",null,[g,m,e("td",x,[e("a",w,[k,t("和"),y,n(a)])])]),e("tr",null,[A,b,e("td",v,[e("a",C,[B,t("的附加功能"),n(a)])])]),e("tr",null,[N,S,e("td",j,[e("a",E,[t("实例化 Bean"),n(a)])])]),e("tr",null,[V,L,e("td",M,[e("a",F,[t("这"),I,n(a)])])]),e("tr",null,[P,J,e("td",T,[e("a",z,[R,t("和"),W,n(a)])])]),e("tr",null,[X,q,e("td",D,[e("a",G,[t("在 Spring 框架中使用 AspectJ 进行加载时编织"),n(a)])])]),e("tr",null,[H,K,e("td",O,[e("a",Q,[U,t("的附加功能"),n(a)])])]),e("tr",null,[Y,Z,e("td",$,[e("a",ee,[t("通知"),n(a)])])]),e("tr",null,[te,ne,e("td",ae,[e("a",oe,[t("资源"),n(a)])])]),e("tr",null,[se,le,e("td",re,[e("a",ce,[t("春季MVC"),n(a)])])]),e("tr",null,[ie,de,e("td",pe,[e("a",_e,[t("春季MVC"),n(a)])])])])])])}const me=r(p,[["render",he],["__file","spring_aware.html.vue"]]);export{me as default};
