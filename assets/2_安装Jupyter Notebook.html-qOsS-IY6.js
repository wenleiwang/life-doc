import{_ as d,r,o as s,c as p,b as e,e as n,w as o,d as a,a as l}from"./app-7rGY8hGP.js";const c="/life-doc/assets/9a688a2e476d1b9f692edaf140045afe-wNPl_scu.png",u="/life-doc/assets/1f918ac8ad654bcc53e3deb817e37676-tGs48RlI.png",h="/life-doc/assets/c4fd7e786befcef354c8073302f764e7-10PUCT64.png",b="/life-doc/assets/19a74f967425dc4aea320124797f9512-q1VCCF6O.png",g="/life-doc/assets/2a9f27338f193e95c2e08f6dbb3027bc-BCTWwkV5.png",_="/life-doc/assets/7477cb7c40c748b55f7f10029e51d3ab-m2LTLtvj.png",m="/life-doc/assets/0508587bbbea906f092ef9900b06fe3b-DCxM4Rbc.png",y="/life-doc/assets/e5a4065f9c28f52d835eb4154f84bbf8-j8eV2B2P.png",v="/life-doc/assets/cbcde363168bba7fd014c6bf3fe1b19c-bsx8WYD9.png",f="/life-doc/assets/eb3c8d81ed7e183347c12c23a1a2f3ec-xYYCnAk8.png",k="/life-doc/assets/2646de767a571d0e2283fbc1025ffd35-4jowL06z.png",x="/life-doc/assets/fa767fe45e70eb3c388b81b06c223775-o6HM6nI6.png",N="/life-doc/assets/7840917de7491393a2585ca3a7ced891-fTpRFF-i.png",j="/life-doc/assets/fafa224fb93fde5113e7bb069d94e824-0Ia1t5tc.png",J={},w=e("h1",{id:"安装jupyter-notebook",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#安装jupyter-notebook","aria-hidden":"true"},"#"),a(" 安装Jupyter Notebook")],-1),P={class:"table-of-contents"},C={href:"https://zhuanlan.zhihu.com/p/33105153",target:"_blank",rel:"noopener noreferrer"},q=l(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>需要准备python环境</p><h2 id="使用pip命令安装" tabindex="-1"><a class="header-anchor" href="#使用pip命令安装" aria-hidden="true">#</a> 使用pip命令安装</h2><h3 id="_1-把pip升级到最新版本" tabindex="-1"><a class="header-anchor" href="#_1-把pip升级到最新版本" aria-hidden="true">#</a> 1. 把pip升级到最新版本</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pip3 install <span class="token operator">-</span><span class="token operator">-</span>upgrade pip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+c+`" alt=""></p><p>这里报了个错，根据指示使用如下命令</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>python<span class="token punctuation">.</span>exe <span class="token operator">-</span>m pip install <span class="token operator">-</span><span class="token operator">-</span>upgrade pip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>老版本的pip在安装Jupyter Notebook过程中或面临依赖项无法同步安装的问题。因此<strong>强烈建议</strong>先把pip升级到最新版本</p></blockquote><h3 id="_2-安装jupyter-notebook" tabindex="-1"><a class="header-anchor" href="#_2-安装jupyter-notebook" aria-hidden="true">#</a> 2. 安装Jupyter Notebook</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pip3 install jupyter
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+u+`" alt=""></p><p>这里等待一阵儿，需要下载些依赖</p><h3 id="_3-运行jupyter-notebook" tabindex="-1"><a class="header-anchor" href="#_3-运行jupyter-notebook" aria-hidden="true">#</a> 3. 运行Jupyter Notebook</h3><h4 id="_0-帮助" tabindex="-1"><a class="header-anchor" href="#_0-帮助" aria-hidden="true">#</a> 0. 帮助</h4><p>如果你有任何jupyter notebook命令的疑问，可以考虑查看官方帮助文档，命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>jupyter notebook --help
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>jupyter notebook -h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_1-启动" tabindex="-1"><a class="header-anchor" href="#_1-启动" aria-hidden="true">#</a> 1. 启动</h4><h5 id="默认端口启动" tabindex="-1"><a class="header-anchor" href="#默认端口启动" aria-hidden="true">#</a> 默认端口启动</h5><p>在终端中输入以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jupyter notebook
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行命令之后，在终端中将会显示一系列notebook的服务器信息，同时浏览器将会自动启动Jupyter Notebook。</p><p>启动过程中终端显示内容如下：</p><p><img src="`+h+`" alt=""></p><blockquote><p>之后在Jupyter Notebook的所有操作，都请保持终端<strong>不要关闭</strong>，因为一旦关闭终端，就会断开与本地服务器的链接，你将无法在Jupyter Notebook中进行其他操作</p></blockquote><p>浏览器地址栏中默认地将会显示：<code>http://localhost:8888</code>。其中，“localhost”指的是本机，“8888”则是端口号。</p><p>如果同时启动了多个Jupyter Notebook，由于默认端口“8888”被占用，因此地址栏中的数字将从“8888”起，每多启动一个Jupyter Notebook数字就加1，如“8889”、“8890”……</p><h5 id="指定端口启动" tabindex="-1"><a class="header-anchor" href="#指定端口启动" aria-hidden="true">#</a> 指定端口启动</h5><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>jupyter notebook <span class="token operator">-</span><span class="token operator">-</span>port <span class="token operator">&lt;</span>port_number<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>&lt;port_number&gt;”是自定义端口号，直接以数字的形式写在命令当中，数字两边不加尖括号“&lt;&gt;”</p><h5 id="启动服务器但不打开浏览器" tabindex="-1"><a class="header-anchor" href="#启动服务器但不打开浏览器" aria-hidden="true">#</a> 启动服务器但不打开浏览器</h5><p>如果你只是想启动Jupyter Notebook的服务器但不打算立刻进入到主页面，那么就无需立刻启动浏览器。在终端中输入：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>jupyter notebook --no-browser
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时，将会在终端显示启动的服务器信息，并在服务器启动之后，显示出打开浏览器页面的链接。当你需要启动浏览器页面时，只需要复制链接，并粘贴在浏览器的地址栏中，轻按回车变转到了你的Jupyter Notebook页面。</p><h4 id="运行界面" tabindex="-1"><a class="header-anchor" href="#运行界面" aria-hidden="true">#</a> 运行界面</h4><p><img src="`+b+`" alt=""></p><blockquote><p>这里边的文件夹全都是你的家目录里的目录文件</p></blockquote><h4 id="设置jupyter-notebook文件存放位置" tabindex="-1"><a class="header-anchor" href="#设置jupyter-notebook文件存放位置" aria-hidden="true">#</a> 设置Jupyter Notebook文件存放位置</h4><ol><li><p>创建文件夹/目录 创建一个文件夹或目录，复制下路径</p></li><li><p>配置文件路径 获取配置文件所在路径的命令</p></li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>jupyter notebook <span class="token operator">-</span><span class="token operator">-</span>generate<span class="token operator">-</span>config
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>这条命令虽然可以用于查看配置文件所在的路径，但主要用途是是否将这个路径下的配置文件<strong>替换</strong>为<strong>默认配置文件</strong>。 如果你是第一次查询，那么<strong>或许</strong>不会出现下图的提示；若文件已经存在或被修改，使用这个命令之后会出现询问“Overwrite /Users/raxxie/.jupyter/jupyter_notebook_config.py with default config? [y/N]”，即“用默认配置文件覆盖此路径下的文件吗？”，如果按“y”，则完成覆盖，那么之前所做的修改都将失效；如果只是为了查询路径，那么一定要输入“N”</p></blockquote><p>找到这个文件 <img src="`+g+'" alt=""></p><ol start="3"><li>查找关键词</li></ol><p>进入配置文件后查找关键词“c.NotebookApp.notebook_dir”。</p><blockquote><p>这里显示 的关键字是 c.ServerApp.notebook_dir</p></blockquote><ol start="4"><li>编辑配置文件，把创建文件夹或目录粘贴到等号后单引号内</li><li>取消#注释</li><li>保存退出</li><li>重启服务</li></ol><p>打开查看，没有其余文件，为设置成功。</p><p><img src="'+_+'" alt=""></p><h2 id="jupyter-notebook的基本使用" tabindex="-1"><a class="header-anchor" href="#jupyter-notebook的基本使用" aria-hidden="true">#</a> Jupyter Notebook的基本使用</h2><p><img src="'+m+'" alt=""></p><p>此时你的界面当中应该还没有“Conda”和“Nbextensions”类目。不要着急，这两个类目将分别在“五、拓展功能”中的“1.关联Jupyter Notebook和conda的环境和包——‘nb_conda’”和“2.Markdown生成目录”中安装。</p><p>Files页面是用于管理和创建文件相关的类目。</p><p>对于现有的文件，可以通过勾选文件的方式，对选中文件进行复制、重命名、移动、下载、查看、编辑和删除的操作。</p><p>同时，也可以根据需要，在“New”下拉列表中选择想要创建文件的环境，进行创建“ipynb”格式的笔记本、“txt”格式的文档、终端或文件夹。如果你创建的环境没有在下拉列表中显示，那么你需要依次前往“拓展功能小节”中的“1.关联Jupyter Notebook和conda的环境和包——‘nb_conda’”和“增加内核小节“——‘ipykernel’中解决该问题。</p><p><img src="'+y+'" alt=""> 上图展示的是笔记本的基本结构和功能。根据图中的注解已经可以解决绝大多数的使用问题了！</p><p>工具栏的使用如图中的注解一样直观，在此不过多解释。需要特别说明的是“单元格的状态”，有Code，Markdown，Heading，Raw NBconvert。其中，最常用的是前两个，分别是代码状态，Markdown编写状态。Jupyter Notebook已经取消了Heading状态，即标题单元格。取而代之的是Markdown的一级至六级标题。而Raw NBconvert目前极少用到，此处也不做过多讲解。</p><p>菜单栏涵盖了笔记本的所有功能，即便是工具栏的功能，也都可以在菜单栏的类目里找到。然而，并不是所有功能都是常用的，比如Widgets，Navigate。Kernel类目的使用，主要是对内核的操作，比如中断、重启、连接、关闭、切换内核等，由于我们在创建笔记本时已经选择了内核，因此切换内核的操作便于我们在使用笔记本时切换到我们想要的内核环境中去。由于其他的功能相对比较常规，根据图中的注解来尝试使用笔记本的功能已经非常便捷，因此不再做详细讲解。</p><h3 id="快捷键" tabindex="-1"><a class="header-anchor" href="#快捷键" aria-hidden="true">#</a> 快捷键</h3><p>找到help找到keyboard shortcuts <img src="'+v+'" alt=""> 或者直接在命令模式按 H 字母</p><h3 id="笔记本重命名的两种方式" tabindex="-1"><a class="header-anchor" href="#笔记本重命名的两种方式" aria-hidden="true">#</a> 笔记本重命名的两种方式</h3><ol><li><p>笔记本内部重命名 在使用笔记本时，可以直接在其内部进行重命名。在左上方“Jupyter”的图标旁有程序默认的标题“Untitled”，点击“Untitled”然后在弹出的对话框中输入自拟的标题，点击“Rename”即完成了重命名。</p></li><li><p>笔记本外部重命名 若在使用笔记本时忘记了重命名，且已经保存并退出至“Files”界面，则在“Files”界面勾选需要重命名的文件，点击“Rename”然后直接输入自拟的标题即可。</p></li></ol><h3 id="running页面" tabindex="-1"><a class="header-anchor" href="#running页面" aria-hidden="true">#</a> Running页面</h3><p>Running页面主要展示的是当前正在运行当中的终端和“ipynb”格式的笔记本。若想要关闭已经打开的终端和“ipynb”格式的笔记本，仅仅关闭其页面是无法彻底退出程序的，需要在Running页面点击其对应的“Shutdown”。</p><h2 id="拓展功能" tabindex="-1"><a class="header-anchor" href="#拓展功能" aria-hidden="true">#</a> 拓展功能</h2><h3 id="关联jupyter-notebook和conda的环境和包——-nb-conda-☆" tabindex="-1"><a class="header-anchor" href="#关联jupyter-notebook和conda的环境和包——-nb-conda-☆" aria-hidden="true">#</a> 关联Jupyter Notebook和conda的环境和包——“nb_conda”☆</h3>',67),R={href:"https://zhuanlan.zhihu.com/p/44398592",target:"_blank",rel:"noopener noreferrer"},M=l(`<ol><li>安装</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>conda install nb_conda
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行上述命令能够将你conda创建的环境与Jupyter Notebook相关联，便于你在Jupyter Notebook的使用中，在不同的环境下创建笔记本进行工作。</p><ol start="2"><li>使用</li></ol><ul><li>可以在Conda类目下对conda环境和包进行一系列操作。 <img src="`+f+'" alt=""></li></ul><ul><li>可以在笔记本内的“Kernel”类目里的“Change kernel”切换内核。 <img src="'+k+`" alt=""></li></ul><ol start="3"><li>卸载</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>canda remove nb_conda
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行上述命令即可卸载nb_conda包。</p><h3 id="markdown生成目录" tabindex="-1"><a class="header-anchor" href="#markdown生成目录" aria-hidden="true">#</a> Markdown生成目录</h3><ul><li>不同于有道云笔记的Markdown编译器，Jupyter Notebook无法为Markdown文档通过特定语法添加目录，因此需要通过安装扩展来实现目录的添加。</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>conda install -c conda-forge jupyter_contrib_nbextensions
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>执行上述命令后，启动Jupyter Notebook，你会发现导航栏多了“Nbextensions”的类目，点击“Nbextensions”，勾选“Table of Contents” <img src="`+x+'" alt=""></li></ul><h4 id="遇到的问题" tabindex="-1"><a class="header-anchor" href="#遇到的问题" aria-hidden="true">#</a> 遇到的问题</h4><p>有一个新的conda版本存在 <img src="'+N+`" alt=""> 按照意见执行下命令</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>conda update <span class="token operator">-</span>n base <span class="token operator">-</span>c defaults conda
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+j+`" alt=""></p><h4 id="显示不全" tabindex="-1"><a class="header-anchor" href="#显示不全" aria-hidden="true">#</a> 显示不全</h4><p>首先依次敲三个命令 conda remove jupyter_nbextensions_configurator conda install -c conda-forge jupyter_nbextensions_configurator conda install -c conda-forge jupyter_contrib_nbextensions 重新运行jupyter，如果发现还是没有变化，就再依次敲下面两个命令 jupyter contrib nbextension install --user jupyter nbextensions_configurator enable --user</p><h2 id="增加内核——-ipykernel-☆" tabindex="-1"><a class="header-anchor" href="#增加内核——-ipykernel-☆" aria-hidden="true">#</a> <strong>增加内核——“ipykernel” ☆</strong></h2><h3 id="_1-使用场景" tabindex="-1"><a class="header-anchor" href="#_1-使用场景" aria-hidden="true">#</a> 1. 使用场景</h3><ul><li>场景一：同时用不同版本的Python进行工作，在Jupyter Notebook中无法切换，即“New”的下拉菜单中无法使用需要的环境。</li><li>场景二：创建了不同的虚拟环境（或许具有相同的Python版本但安装的包不同），在Jupyter Notebook中无法切换，即“New”的下拉菜单中无法使用需要的环境。</li></ul><p>接下来将分别用“命令行模式”和“图形界面模式”来解决以上两个场景的问题。顾名思义，“命令行模式”即在终端中通过执行命令来一步步解决问题；“图形界面模式”则是通过在Jupyter Notebook的网页中通过鼠标点击的方式解决上述问题。</p><p>其中，“图形界面模式”的解决方法相对比较简单快捷，如果对于急于解决问题，不需要知道运行原理的朋友，可以直接进入“3. 解决方法之图形界面模式”来阅读。</p><p>“命令行模式”看似比较复杂，且又划分了使用场景，但通过这种方式来解决问题可以更好的了解其中的工作原理，比如，每进行一步操作对应的命令是什么，而命令的执行是为了达到什么样的目的，这些可能都被封装在图形界面上的一个点击动作来完成了。对于想更深入了解其运作过程的朋友，可以接着向下阅读。</p><h2 id="_2-解决方法之命令行模式" tabindex="-1"><a class="header-anchor" href="#_2-解决方法之命令行模式" aria-hidden="true">#</a> 2. 解决方法之命令行模式</h2><h3 id="同时使用不同版本的python" tabindex="-1"><a class="header-anchor" href="#同时使用不同版本的python" aria-hidden="true">#</a> 同时使用不同版本的Python</h3><h3 id="_1-在python-3中创建python-2内核" tabindex="-1"><a class="header-anchor" href="#_1-在python-3中创建python-2内核" aria-hidden="true">#</a> ⑴ 在Python 3中创建Python 2内核</h3><h3 id="a-pip安装" tabindex="-1"><a class="header-anchor" href="#a-pip安装" aria-hidden="true">#</a> ⒜ pip安装</h3><ul><li>首先安装Python 2的ipykernel包。</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python2 -m pip install ipykernel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>再为<strong>当前用户</strong>安装Python 2的内核（ipykernel）。</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python2 -m ipykernel install --user
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>注意：“--user”参数的意思是针对当前用户安装，而非系统范围内安装。</li></ul><h3 id="b-conda安装" tabindex="-1"><a class="header-anchor" href="#b-conda安装" aria-hidden="true">#</a> ⒝ conda安装</h3><ul><li>首先创建Python版本为2.x且具有ipykernel的新环境，其中“&lt;env_name&gt;”为自定义环境名，环境名两边不加尖括号“&lt;&gt;”。</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>conda create -n &lt;env_name&gt; python=2 ipykernel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>然后切换至新创建的环境。</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Windows: activate &lt;env_name&gt;
Linux/macOS: source activate &lt;env_name&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>为<strong>当前用户</strong>安装Python 2的内核（ipykernel）。</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python2 -m ipykernel install --user
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>注意：“--user”参数的意思是针对当前用户安装，而非系统范围内安装。</li></ul>`,42);function B(V,F){const t=r("router-link"),i=r("ExternalLinkIcon");return s(),p("div",null,[w,e("nav",P,[e("ul",null,[e("li",null,[n(t,{to:"#前言"},{default:o(()=>[a("前言")]),_:1})]),e("li",null,[n(t,{to:"#使用pip命令安装"},{default:o(()=>[a("使用pip命令安装")]),_:1}),e("ul",null,[e("li",null,[n(t,{to:"#_1-把pip升级到最新版本"},{default:o(()=>[a("1. 把pip升级到最新版本")]),_:1})]),e("li",null,[n(t,{to:"#_2-安装jupyter-notebook"},{default:o(()=>[a("2. 安装Jupyter Notebook")]),_:1})]),e("li",null,[n(t,{to:"#_3-运行jupyter-notebook"},{default:o(()=>[a("3. 运行Jupyter Notebook")]),_:1})])])]),e("li",null,[n(t,{to:"#jupyter-notebook的基本使用"},{default:o(()=>[a("Jupyter Notebook的基本使用")]),_:1}),e("ul",null,[e("li",null,[n(t,{to:"#快捷键"},{default:o(()=>[a("快捷键")]),_:1})]),e("li",null,[n(t,{to:"#笔记本重命名的两种方式"},{default:o(()=>[a("笔记本重命名的两种方式")]),_:1})]),e("li",null,[n(t,{to:"#running页面"},{default:o(()=>[a("Running页面")]),_:1})])])]),e("li",null,[n(t,{to:"#拓展功能"},{default:o(()=>[a("拓展功能")]),_:1}),e("ul",null,[e("li",null,[n(t,{to:"#关联jupyter-notebook和conda的环境和包——-nb-conda-☆"},{default:o(()=>[a("关联Jupyter Notebook和conda的环境和包——“nb_conda”☆")]),_:1})]),e("li",null,[n(t,{to:"#markdown生成目录"},{default:o(()=>[a("Markdown生成目录")]),_:1})])])]),e("li",null,[n(t,{to:"#增加内核——-ipykernel-☆"},{default:o(()=>[a("增加内核——“ipykernel” ☆")]),_:1}),e("ul",null,[e("li",null,[n(t,{to:"#_1-使用场景"},{default:o(()=>[a("1. 使用场景")]),_:1})])])]),e("li",null,[n(t,{to:"#_2-解决方法之命令行模式"},{default:o(()=>[a("2. 解决方法之命令行模式")]),_:1}),e("ul",null,[e("li",null,[n(t,{to:"#同时使用不同版本的python"},{default:o(()=>[a("同时使用不同版本的Python")]),_:1})]),e("li",null,[n(t,{to:"#_1-在python-3中创建python-2内核"},{default:o(()=>[a("⑴ 在Python 3中创建Python 2内核")]),_:1})]),e("li",null,[n(t,{to:"#a-pip安装"},{default:o(()=>[a("⒜ pip安装")]),_:1})]),e("li",null,[n(t,{to:"#b-conda安装"},{default:o(()=>[a("⒝ conda安装")]),_:1})])])])])]),e("p",null,[e("a",C,[a("文章摘自"),n(i)]),a("加自己实际操作")]),q,e("p",null,[e("a",R,[a("conda的安装"),n(i)])]),M])}const T=d(J,[["render",B],["__file","2_安装Jupyter Notebook.html.vue"]]);export{T as default};
