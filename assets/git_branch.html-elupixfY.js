import{_ as i,r as o,o as s,c as n,b as e,e as l,w as r,d as a,a as d}from"./app-7rGY8hGP.js";const p="/life-doc/assets/cbb526523c4c095d3a72675574e04259-JVz6Yon5.png",h={},c=e("h1",{id:"git分支规则",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#git分支规则","aria-hidden":"true"},"#"),a(" Git分支规则")],-1),u={class:"table-of-contents"},f=d('<h3 id="规则" tabindex="-1"><a class="header-anchor" href="#规则" aria-hidden="true">#</a> 规则</h3><ol><li>维护develop针对日常开发分支</li><li>feature分支自定义名字，完成需求后删除</li><li>线上紧急BUG修改使用hotfix-开头的分支从master上建立分支</li><li>待发布上线分支使用release-开头分支</li></ol><h3 id="详细描述" tabindex="-1"><a class="header-anchor" href="#详细描述" aria-hidden="true">#</a> 详细描述</h3><p>强烈建议阅读「A successful Git branching model」一文。它列出了现在最常用来管理Git分支的方法。</p><p>A successful Git branching model 英文原文网址:</p><p>http://nvie.com/posts/a-successful-git-branching-model/</p><p>根据文章的建议，我们将分支分为四种类型，每个都有不同的角色。</p><ul><li>Main分支</li><li>Feature分支（亦可称Topic分支）</li><li>Release分支</li><li>Hot fix分支</li></ul><p>分别使用四个种类的分支来进行开发。</p><p><img src="'+p+'" alt="image-20230223135212332"></p><h3 id="main分支" tabindex="-1"><a class="header-anchor" href="#main分支" aria-hidden="true">#</a> <strong>Main分支</strong></h3><p>主要分支有两种： master 分支和develop 分支。</p><ul><li><strong>Master</strong></li></ul><p>Master 分支只负责管理发布的状态。当准备好发布指定版本时，最后的提交会给予一个发布版本标签。</p><ul><li><strong>Develop</strong></li></ul><p>Develop 分支是针对日常开发的分支。所有新功能开发最终都会合并到这里，类似刚才已经讲解过的integration分支的功用。</p><h3 id="feature分支" tabindex="-1"><a class="header-anchor" href="#feature分支" aria-hidden="true">#</a> <strong>Feature分支</strong></h3><p>Feature分支就是在前面讲解过的topic分支的功用。</p><p>这个分支是新功能的开发或修复错误的时候从develop 分支分开出来的。Feature分支的操作基本上不需要共享，所以不需要在远端数据库建立分支，当完成开发后，合并回develop 分支后发布。</p><h3 id="release分支" tabindex="-1"><a class="header-anchor" href="#release分支" aria-hidden="true">#</a> <strong>Release分支</strong></h3><p>Release分支是为了发布而准备的。通常这种分支的名称最前面会加上&quot;release-&quot; 。</p><p>一般的开发是在develop 分支上进行，到了快要可以发布的状态时才会建立release分支，release分支主要是做发布前最后错误修复所建立的分支。成员可以在这个分支里进行最后的调整，而其他成员依旧可以在develop 分支上进行功能开发，不会相互干扰而影响最后发布。</p><p>到了可以发布的状态时，请将release分支合并到master 分支，并在合并提交里添加release版本号标签。</p><p>最好将release分支所作的修改合并到develop 分支，以确保develop 分支和master 分支同步到release分支的最新错误修复/变更。</p><h3 id="hot-fix分支" tabindex="-1"><a class="header-anchor" href="#hot-fix分支" aria-hidden="true">#</a> <strong>Hot fix分支</strong></h3><p>Hot fix分支是在发布的产品需要紧急修改时，从master 分支建立的分支。通常会在分支名称的最前面会加上&quot;hotfix-&quot;。</p><p>例如，在develop 分支上的开发还不完整，需要紧急修改，这个时候在develop 分支建立可以发布的版本要花许多的时间，所以最好从master 分支直接建立分支进行修改，然后再合并分支。</p><p>请注意，修改时建立的hot fix分支，也要合并回develop 分支喔。</p>',28);function _(g,m){const t=o("router-link");return s(),n("div",null,[c,e("nav",u,[e("ul",null,[e("li",null,[l(t,{to:"#规则"},{default:r(()=>[a("规则")]),_:1})]),e("li",null,[l(t,{to:"#详细描述"},{default:r(()=>[a("详细描述")]),_:1})]),e("li",null,[l(t,{to:"#main分支"},{default:r(()=>[a("Main分支")]),_:1})]),e("li",null,[l(t,{to:"#feature分支"},{default:r(()=>[a("Feature分支")]),_:1})]),e("li",null,[l(t,{to:"#release分支"},{default:r(()=>[a("Release分支")]),_:1})]),e("li",null,[l(t,{to:"#hot-fix分支"},{default:r(()=>[a("Hot fix分支")]),_:1})])])]),f])}const v=i(h,[["render",_],["__file","git_branch.html.vue"]]);export{v as default};
