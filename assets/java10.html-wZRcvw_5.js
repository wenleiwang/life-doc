import{_ as t,r as o,o as l,c,b as a,e as s,w as p,d as n,a as i}from"./app-7rGY8hGP.js";const r={},d=a("h1",{id:"java10新特性",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#java10新特性","aria-hidden":"true"},"#"),n(" Java10新特性")],-1),u={class:"table-of-contents"},h=i(`<h2 id="基于时间的版本控制-jep-322" tabindex="-1"><a class="header-anchor" href="#基于时间的版本控制-jep-322" aria-hidden="true">#</a> 基于时间的版本控制（JEP 322）</h2><p>随着基于时间的发布周期的采用，Oracle改变了javase平台和JDK的版本字符串方案，以及相关的版本控制信息，用于当前和未来基于时间的发布模型。</p><p><code>$FEATURE.$INTERIM.$UPDATE.$PATCH</code></p><p><code>$FEATURE:counter</code>将每6个月递增一次，并且将基于功能发布版本，例如：JDK 10、JDK 11。</p><p><code>$INTERIM: counter</code> 对于包含兼容的错误修复和增强但没有不兼容更改的非功能版本，计数器将增加。通常，这将是零，因为六个月内不会有临时发布。这是为了将来对发布模型进行修订而保留的。</p><p><code>$UPDATE:counter</code>对于修复新特性中的安全问题、退化和bug的兼容更新版本将增加。此功能发布后一个月更新，以后每3个月更新一次。2018年4月的版本是JDK10.0.1，7月的版本是JDK10.0.2，以此类推</p><p><code>$PATCH:counter</code>将在紧急版本中增加，以修复关键问题。</p><h2 id="局部变量类型推断-jep-286" tabindex="-1"><a class="header-anchor" href="#局部变量类型推断-jep-286" aria-hidden="true">#</a> 局部变量类型推断（JEP 286）</h2><p>局部变量类型推断是Java10中为开发人员提供的最大的新特性。它将类型推断添加到带有初始值设定项的局部变量声明中。局部类型推断只能在以下情况下使用：</p><ul><li>仅限于具有初始值设定项的局部变量</li><li>增强for循环的索引</li><li>在for循环中声明的本地</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// inferred value ArrayList&lt;String&gt;\`</span>

<span class="token comment">// Index of Enhanced For Loop</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> number <span class="token operator">:</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Local variable declared in a loop</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实验性基于java的jit编译器-jep-317" tabindex="-1"><a class="header-anchor" href="#实验性基于java的jit编译器-jep-317" aria-hidden="true">#</a> 实验性基于Java的JIT编译器（JEP 317）</h2><p>这个特性使基于Java的JIT编译器Graal能够在Linux/x64平台上作为一个实验性的JIT编译器使用。到目前为止，这是Java10特性列表中最具未来感的内容</p><blockquote><p>Graal是在java9中引入的。它是我们已经习惯的JIT编译器的替代品。它是JVM的一个插件，这意味着JIT编译器没有绑定到JVM，它可以动态地插入JVMCI兼容的任何其他插件（Java级JVM编译器接口）。它还带来了java世界中的提前编译（AOT）。它还支持多语言翻译。</p></blockquote><p>“一个用Java编写的基于Java的实时编译器，用于将Java字节码转换为机器码。”这让人困惑吗？如果JVM是用Java编写的，那么您不需要JVM来运行JVM吗？JVM可以通过AOT编译，然后JIT编译器可以在jvmit中使用，通过实时代码优化来提高性能。</p><p>Graal是用Java从头开始的对JIT编译器的完全重写。以前的JIT编译器是用c++编写的。它被认为是任何编程语言进化的最后阶段。</p><p>可以使用以下jvm参数切换到Graal：<code>-XX:+UnlockExperimentalVMOptions -XX:+UseJVMCICompiler</code></p><h2 id="应用程序级数据共享-jep-310" tabindex="-1"><a class="header-anchor" href="#应用程序级数据共享-jep-310" aria-hidden="true">#</a> 应用程序级数据共享（JEP 310）</h2><p>此功能有助于改善启动占用空间，扩展现有的类数据共享（“CDS”）功能，以允许将应用程序类放置在共享存档中。</p><blockquote><p>JVM在启动时执行一些初步步骤，其中一个步骤是在内存中加载类。如果有几个jar有多个类，那么第一个请求中的延迟就很明显了。这成为无服务器体系结构的一个问题，其中引导时间至关重要。为了缩短应用程序启动时间，可以使用应用程序类数据共享。其思想是通过在不同的Java进程之间共享公共类元数据来减少占用空间。可通过以下3个步骤实现：</p></blockquote><p>确定要存档的类：使用java启动器创建要存档的文件列表，这可以通过以下参数实现： <code>$java -Xshare:off -XX:+UseAppCDS -XX:DumpLoadedClassList=hello.lst -cp hello.jar HelloWorld</code></p><p>创建AppCDS存档：使用java launcher创建要用于应用程序cd的文件列表的存档，这可以通过以下参数实现： <code>$java -Xshare:dump -XX:+UseAppCDS -XX:SharedClassListFile=hello.lst -XX:SharedArchiveFile=hello.jsa -cp hello.jar</code></p><p>使用AppCDS存档：使用带有以下参数的Java启动器来使用应用程序cd。 <code>$java -Xshare:on -XX:+UseAppCDS -XX:SharedArchiveFile=hello.jsa -cp hello.jar HelloWorld</code></p><h2 id="g1并行full-gc-jep-307" tabindex="-1"><a class="header-anchor" href="#g1并行full-gc-jep-307" aria-hidden="true">#</a> G1并行Full GC（JEP 307）</h2><p>G1垃圾收集器在jdk9中是默认的。G1垃圾收集器避免了任何完全的垃圾收集，但是当用于收集的并发线程不能足够快地恢复内存时，用户的体验就会受到影响。</p><p>此更改通过使完全GC并行来改善G1最坏情况下的延迟。G1收集器的mark-sweep compact算法作为此更改的一部分被并行化，当用于收集的并发线程不能足够快地恢复内存时，它将被触发。</p><h2 id="垃圾收集器接口-jep-304" tabindex="-1"><a class="header-anchor" href="#垃圾收集器接口-jep-304" aria-hidden="true">#</a> 垃圾收集器接口（JEP 304）</h2><p>这个JEP是未来的变化。它通过引入一个通用的垃圾收集器接口来改进不同垃圾收集器的代码隔离。</p><p>此更改为内部GC代码提供了更好的模块化。它将有助于将来添加新的GC而不改变现有的代码基，也有助于删除或管理以前的GC。</p><h2 id="附加unicode语言标记扩展-jep-314" tabindex="-1"><a class="header-anchor" href="#附加unicode语言标记扩展-jep-314" aria-hidden="true">#</a> 附加Unicode语言标记扩展（JEP 314）</h2><p>此功能增强了java.util.Locale语言环境以及相关的API来实现BCP 47语言标记的额外Unicode扩展。从JavaSE9开始，支持的BCP47U语言标记扩展是“ca”和“nu”。此JEP将添加对以下附加扩展的支持：</p><p>cu（货币类型） fw（每周第一天） rg（区域覆盖） tz（时区） 为了支持这些附加扩展，对各种api进行了更改，以提供基于U或附加扩展的信息。</p><h2 id="根证书-jep-319" tabindex="-1"><a class="header-anchor" href="#根证书-jep-319" aria-hidden="true">#</a> 根证书（JEP 319）</h2><p>为了推广OpenJDK并使其对社区用户更具吸引力，此功能在JDK中提供了一组默认的根证书颁发机构（CA）证书。这也意味着Oracle和openjdk二进制文件在功能上是相同的。</p><p>关键的安全组件（如TLS）将在OpenJDK构建中默认工作。</p><h2 id="thread-local-线程本地握手-jep-312" tabindex="-1"><a class="header-anchor" href="#thread-local-线程本地握手-jep-312" aria-hidden="true">#</a> Thread-Local 线程本地握手（JEP 312）</h2><p>这是一个用于提高性能的内部JVM特性。</p><p>握手操作是在每个JavaThread处于safepoint状态时对其执行的回调。回调要么由线程本身执行，要么由VM线程执行，同时保持线程处于阻塞状态。</p><p>此功能提供了一种在线程上执行回调而不执行全局VM safepoint的方法。使停止单个线程，而不仅仅是停止所有线程或不停止任何线程既可能又便宜。</p><h2 id="替代内存设备上的堆分配-jep-316" tabindex="-1"><a class="header-anchor" href="#替代内存设备上的堆分配-jep-316" aria-hidden="true">#</a> 替代内存设备上的堆分配（JEP 316）</h2><p>应用程序已经变得内存匮乏，云本地应用程序、内存数据库、流式应用程序都在增加。为了满足这些服务，有各种可用的内存体系结构。此功能增强了HotSpot VM在用户指定的备用内存设备（如NV-DIMM）上分配Java对象堆的能力。</p><p>此JEP针对具有与DRAM相同的语义（包括原子操作的语义）的替代内存设备，因此，可以在不更改现有应用程序代码的情况下代替DRAM用于对象堆。</p><h2 id="删除native-header生成工具javah-jep313" tabindex="-1"><a class="header-anchor" href="#删除native-header生成工具javah-jep313" aria-hidden="true">#</a> 删除Native-Header生成工具Javah（Jep313）</h2><p>这是一个从JDK中删除javah工具的内务管理更改。javac中添加的工具功能是jdk8的一部分，它提供了在编译时编写Native-Header文件的能力，从而使javah变得无用。</p><h2 id="将jdk林整合到单个存储库中-jep-296" tabindex="-1"><a class="header-anchor" href="#将jdk林整合到单个存储库中-jep-296" aria-hidden="true">#</a> 将JDK林整合到单个存储库中（JEP 296）</h2><p>多年来，在JDK代码库中有各种Mercurial存储库。不同的存储库确实提供了一些优势，但它们也有不同的操作缺点。作为此更改的一部分，JDK的许多存储库被合并到一个存储库中，以简化开发。</p><h2 id="api更改" tabindex="-1"><a class="header-anchor" href="#api更改" aria-hidden="true">#</a> API更改</h2><p>Java10已经添加和删除了API（是的，它不是一个拼写错误）。</p><p>Java9引入了增强的弃用，其中某些API被标记为在将来的版本中删除。</p><p>添加了API:Java10中添加了73个新API。</p>`,50);function v(k,J){const e=o("router-link");return l(),c("div",null,[d,a("nav",u,[a("ul",null,[a("li",null,[s(e,{to:"#基于时间的版本控制-jep-322"},{default:p(()=>[n("基于时间的版本控制（JEP 322）")]),_:1})]),a("li",null,[s(e,{to:"#局部变量类型推断-jep-286"},{default:p(()=>[n("局部变量类型推断（JEP 286）")]),_:1})]),a("li",null,[s(e,{to:"#实验性基于java的jit编译器-jep-317"},{default:p(()=>[n("实验性基于Java的JIT编译器（JEP 317）")]),_:1})]),a("li",null,[s(e,{to:"#应用程序级数据共享-jep-310"},{default:p(()=>[n("应用程序级数据共享（JEP 310）")]),_:1})]),a("li",null,[s(e,{to:"#g1并行full-gc-jep-307"},{default:p(()=>[n("G1并行Full GC（JEP 307）")]),_:1})]),a("li",null,[s(e,{to:"#垃圾收集器接口-jep-304"},{default:p(()=>[n("垃圾收集器接口（JEP 304）")]),_:1})]),a("li",null,[s(e,{to:"#附加unicode语言标记扩展-jep-314"},{default:p(()=>[n("附加Unicode语言标记扩展（JEP 314）")]),_:1})]),a("li",null,[s(e,{to:"#根证书-jep-319"},{default:p(()=>[n("根证书（JEP 319）")]),_:1})]),a("li",null,[s(e,{to:"#thread-local-线程本地握手-jep-312"},{default:p(()=>[n("Thread-Local 线程本地握手（JEP 312）")]),_:1})]),a("li",null,[s(e,{to:"#替代内存设备上的堆分配-jep-316"},{default:p(()=>[n("替代内存设备上的堆分配（JEP 316）")]),_:1})]),a("li",null,[s(e,{to:"#删除native-header生成工具javah-jep313"},{default:p(()=>[n("删除Native-Header生成工具Javah（Jep313）")]),_:1})]),a("li",null,[s(e,{to:"#将jdk林整合到单个存储库中-jep-296"},{default:p(()=>[n("将JDK林整合到单个存储库中（JEP 296）")]),_:1})]),a("li",null,[s(e,{to:"#api更改"},{default:p(()=>[n("API更改")]),_:1})])])]),h])}const f=t(r,[["render",v],["__file","java10.html.vue"]]);export{f as default};
