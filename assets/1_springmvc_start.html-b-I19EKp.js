import{_ as l,r as c,o as i,c as u,b as n,e as a,w as e,d as s,a as p}from"./app-7rGY8hGP.js";const r="/life-doc/assets/f627271e6fdaa86cc45db9ee39b793b2-_SIWafG6.png",d="/life-doc/assets/a9b592d23e92b1595eab30d76ed8d59e-VLS8SOH4.png",k="/life-doc/assets/58925b4313e2040cae5fcb5d803c7cde-vrs_zndc.png",v="/life-doc/assets/b4f3e121bd431fb47262b583c202bea2-4tHldzdL.png",m="/life-doc/assets/8296491af3830f0967ab7d75dd4edbdb-Nd4uKjS1.png",b="/life-doc/assets/bb4a0d6487d690c0f1e8b470b20ed949-j8e4cHnW.png",g="/life-doc/assets/07a15051d1518088214dbe7b6e201bec-NDa2tI7G.png",S="/life-doc/assets/a31060105da8b4aabf4362ef20cd90f1-CAAw_Ugx.png",f={},C=n("h1",{id:"spring-mvc-注解驱动开发",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#spring-mvc-注解驱动开发","aria-hidden":"true"},"#"),s(" Spring MVC 注解驱动开发")],-1),w={class:"table-of-contents"},h=p(`<h2 id="_0-前言" tabindex="-1"><a class="header-anchor" href="#_0-前言" aria-hidden="true">#</a> 0.前言</h2><p>Servlet3.0是一次Java EE规范的一次重要升级。支持到可以全部采用注解驱动，大大简化了配置web.xml的麻烦。现在启动一个web容器并不强制依赖于web.xml部署描述符了。</p><p>以前我们在使用Spring MVC的时候，<code>DispatcherServlet</code>是必须要要在web.xml里配置，现在以全注解驱动整合Spring MVC。</p><p>下面逐步看Spring如何整合Spring MVC而不需要web.xml的。</p><blockquote><p>Spring Boot中集成和使用Spring MVC会方便得多得多，因为它都已经帮我们配置好了，但理解了这篇文章的原理，再去理解Boot，可谓就非常顺畅了~</p></blockquote><h2 id="_1-servletcontainerinitializer" tabindex="-1"><a class="header-anchor" href="#_1-servletcontainerinitializer" aria-hidden="true">#</a> 1.ServletContainerInitializer</h2><p>首先来了解一个概念<code>ServletContainerInitializer</code></p><p>Servlet3.0给我们提供的特别特别重要的一个类<code>ServletContainerInitializer</code>来整个其它模块组件。</p><p>它有如下能力： Shared libraries（共享库） / runtimes pluggability（运行时插件能力）</p><p>Servlet容器启动会扫描，当前应用里面每一个jar包ServletContainerInitializer的实现 coder可以自己提供ServletContainerInitializer的实现类；然后自己书写逻辑。但是，但是，但是要记住，一定要必须绑定在，META-INF/services/javax.servlet.ServletContainerInitializer这个文件里，文件内容为就是ServletContainerInitializer实现类的全类名； 这样web容器在启动的时候，就会执行该接口的实现方法，从而我们就可以书写我们自己的模块初始化的一些逻辑。</p><p>举个例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//容器启动的时候会将@HandlesTypes指定的这个类型下面的子类（实现类，子接口等）传递过来；</span>
<span class="token annotation punctuation">@HandlesTypes</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">HelloService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServletContainerInitializer</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContainerInitializer</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 应用启动的时候，会运行onStartup方法；
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * Set&lt;Class<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>?</span><span class="token punctuation">&gt;</span></span>&gt; c：感兴趣的类型的所有子类型；
     * ServletContext ctx:代表当前Web应用的ServletContext；一个Web应用一个ServletContext；
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStartup</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">,</span> <span class="token class-name">ServletContext</span> ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
  		<span class="token comment">//这里的c会把所有我们感兴趣的类型都拿到</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;感兴趣的类型：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> claz <span class="token operator">:</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>claz<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

		<span class="token comment">//==========================编码形式注册三大组件============================</span>
        注册组件  <span class="token class-name">ServletRegistration</span>  
        <span class="token comment">//ServletRegistration.Dynamic servlet = ctx.addServlet(&quot;userServlet&quot;, new UserServlet());</span>
        配置servlet的映射信息
        <span class="token comment">//servlet.addMapping(&quot;/user&quot;);</span>
        <span class="token comment">//</span>
        注册<span class="token class-name">Listener</span>
        <span class="token comment">//ctx.addListener(UserListener.class);</span>
        <span class="token comment">//</span>
        注册<span class="token class-name">Filter</span>  <span class="token class-name">FilterRegistration</span>
        <span class="token comment">//FilterRegistration.Dynamic filter = ctx.addFilter(&quot;userFilter&quot;, UserFilter.class);</span>
        配置<span class="token class-name">Filter</span>的映射信息
        <span class="token comment">//filter.addMappingForUrlPatterns(EnumSet.of(DispatcherType.REQUEST), true, &quot;/*&quot;);</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自己的实现，Servlet会找到</p><p><img src="`+r+'" alt="image-20220330110027391"></p><p>启动容器，我们会看到把我们关心的接口子类型（<strong>包含子接口</strong>、抽象类、实现类）都放进来了。但是需要注意：不包含自己</p><h2 id="_2-整合spring-mvc" tabindex="-1"><a class="header-anchor" href="#_2-整合spring-mvc" aria-hidden="true">#</a> 2.整合Spring MVC</h2><p>整合Spring MVC是重中之重。前面已经说过<code>ServletContainerInitializer</code>了，相信大家能够想到Spring是怎么做的了吧？</p><p>我们可以看下Spring官方文档，链接如下：</p><p>https://docs.spring.io/spring/docs/5.1.5.RELEASE/spring-framework-reference/web.html#mvc-servlet</p><p>我们看看Spring-web包jar包内：Servlet也会找到</p><p><img src="'+d+`" alt="image-20220330110741432"></p><p>显然的发现，Spring MVC也是通过这种方式和Servlet容器进行整合的。web容器在启动的时候，就会自动去加载<code>org.springframework.web.SpringServletContainerInitializer</code>这个类。</p><p>源码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Modifier</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ServiceLoader</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletContainerInitializer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">HandlesTypes</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">AnnotationAwareOrderComparator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Nullable</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ReflectionUtils</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@HandlesTypes</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationInitializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringServletContainerInitializer</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContainerInitializer</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStartup</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> webAppInitializerClasses<span class="token punctuation">,</span> <span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span>
			<span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>

		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WebApplicationInitializer</span><span class="token punctuation">&gt;</span></span> initializers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>webAppInitializerClasses <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> waiClass <span class="token operator">:</span> webAppInitializerClasses<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// Be defensive: Some servlet containers provide us with invalid classes,</span>
				<span class="token comment">// no matter what @HandlesTypes says...</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>waiClass<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isAbstract</span><span class="token punctuation">(</span>waiClass<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
						<span class="token class-name">WebApplicationInitializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>waiClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token keyword">try</span> <span class="token punctuation">{</span>
						initializers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationInitializer</span><span class="token punctuation">)</span>
								<span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">accessibleConstructor</span><span class="token punctuation">(</span>waiClass<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
					<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
						<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to instantiate WebApplicationInitializer class&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>initializers<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			servletContext<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;No Spring WebApplicationInitializer types detected on classpath&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		servletContext<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>initializers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; Spring WebApplicationInitializers detected on classpath&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">AnnotationAwareOrderComparator</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>initializers<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">WebApplicationInitializer</span> initializer <span class="token operator">:</span> initializers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			initializer<span class="token punctuation">.</span><span class="token function">onStartup</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>步骤分析：</p><ol><li><p>Spring的应用一启动会加载感兴趣的WebApplicationInitializer接口下的所有组件；</p></li><li><p>为WebApplicationInitializer组件创建对象（<strong>条件判断组件不是接口，不是抽象类</strong>）放入<code>List&lt;WebApplicationInitializer&gt; initializers</code>的列表里</p><p><img src="`+k+'" alt="image-20220330112214286"></p></li></ol><p><img src="'+v+'" alt="image-20220330113002421"></p><ul><li>AbstractContextLoaderInitializer：创建根容器；createRootApplicationContext()；</li><li>AbstractDispatcherServletInitializer： <ul><li>创建一个web的ioc容器；createServletApplicationContext();</li><li>创建了DispatcherServlet；createDispatcherServlet()；</li><li>将创建的DispatcherServlet添加到ServletContext中；</li><li>-----------抽象方法：getServletMappings();</li></ul></li><li>AbstractAnnotationConfigDispatcherServletInitializer：<strong>注解方式配置的DispatcherServlet初始化器（本文重点）</strong><ul><li>创建根容器：createRootApplicationContext()</li><li>------------getRootConfigClasses();传入一个配置类（用户自定义）</li><li>创建web的ioc容器： createServletApplicationContext();</li><li>------------获取配置类；getServletConfigClasses();</li></ul></li></ul><p>在Spring MVC中Spring容器推荐使用父子容器概念：</p><p><img src="'+m+`" alt="image-20220330124700490"></p><p>从上面分析得知，我们要使用注解驱动的话。只需要我们自己实现<code>AbstractAnnotationConfigDispatcherServletInitializer</code>这个抽象类就行了，这样web容器启动的时候就能处理我们实现的这个类的内容。</p><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 备注：此处@ControllerAdvice、RestControllerAdvice 这个注解不要忘了，属于Controller层处理全局异常的，应该交给web去扫描</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;com.fsx&quot;</span><span class="token punctuation">,</span> excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">ANNOTATION</span><span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ControllerAdvice</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">RestControllerAdvice</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Configuration</span> <span class="token comment">//最好标注上，若不标注，可能扫描不生效</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RootConfig</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token comment">// 此处记得排除掉@Controller和@ControllerAdvice、@RestControllerAdvice</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;com.fsx&quot;</span><span class="token punctuation">,</span> useDefaultFilters <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        includeFilters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">ANNOTATION</span><span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ControllerAdvice</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">RestControllerAdvice</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Configuration</span> <span class="token comment">//最好标注上，若不标注，可能扫描不生效</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>@RestControllerAdvice是Spring4.3后提供的注解。@ControllerAdvice是Spring3.2提供的 它俩的区别就像@Controller和@RestController的区别。（也就是说<code>@RestControllerAdvice</code>可以省略<code>@ResponseBody</code>不用写了</p></blockquote><blockquote><p><code>useDefaultFilters</code>默认值为<code>true</code>，表示默认情况下<code>@Component</code>、<code>@Repository</code>、<code>@Service</code>、<code>@Controller</code>都会扫描 <code>useDefaultFilters=false</code>加上<code>includeFilters</code>我们就可以只扫描指定的组件了，比如Spring MVC的web子容器只扫描Controller组件 <code>excludeFilters</code>的时候，就不需要去设置<code>useDefaultFilters=false</code>，这样子我们直接排除掉即可</p><p><strong>特别注意</strong>：<code>useDefaultFilters</code>的正确使用，不要造成重复扫描。否则很有可能造成<code>事务不生效</code>，并且你还非常不好定位这个错误</p></blockquote><p>然后我们自己来实现<code>AbstractAnnotationConfigDispatcherServletInitializer</code>一个初始化实体类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 自己实现 基于注解驱动的ServletInitializer来初始化DispatcherServlet
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWebAppInitializer</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 根容器的配置类；（Spring的配置文件）   父容器；
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getRootConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">RootConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * web容器的配置类（SpringMVC配置文件）  子容器；
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">AppConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//获取DispatcherServlet的映射信息</span>
    <span class="token comment">// 注意： /：拦截所有请求（包括静态资源（xx.js,xx.png）），但是不包括*.jsp；</span>
    <span class="token comment">//  	 /*：拦截所有请求；连*.jsp页面都拦截；jsp页面是tomcat的jsp引擎解析的；</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 若你想定制化父类的一些默认行为  这里都是可以复写父类的protected方法的~~~~</span>
    <span class="token comment">// Spring MVC也推荐你这么干~</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">FrameworkServlet</span> <span class="token function">createDispatcherServlet</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span> servletAppContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DispatcherServlet</span> dispatcherServlet <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DispatcherServlet</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">createDispatcherServlet</span><span class="token punctuation">(</span>servletAppContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// dispatcherServlet.setDetectAllHandlerAdapters(false); </span>
        <span class="token keyword">return</span> dispatcherServlet<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>web容器中的Spring的应用 <strong>一启动就会</strong> 加载感兴趣的<code>WebApplicationInitializer</code>接口的下的所有组件，并且为WebApplicationInitializer组件创建对象（组件不是接口，不是抽象类）。</p></blockquote><p>特别注意的是： 按照上面的配置，我偶然的发现了，RootConfig仍然还是去扫描了我的controller，导致我的controller被扫描了两次，怎么回事呢？？？</p><p>找了好久，终于找到原因了，并不是@ComponentScan或者excludeFilters的问题，而是因为咱们在执行RootConfig的时候，虽然不去扫描Controller注解了，但是它会扫描AppConfig.java这个配置类，从而间接的又去扫描了@Controller了，因此最正确的做法应该</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;com.fsx&quot;</span><span class="token punctuation">,</span> excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">ANNOTATION</span><span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token comment">//排除掉web容器的配置文件，否则会重复扫描</span>
        <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">ASSIGNABLE_TYPE</span><span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">AppConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RootConfig</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样子，我们的Controller就只会被扫描一次了，容器也就非常的干净了，强烈建议这么干。</p><div class="custom-container tip"><p class="custom-container-title">注意 这里是Spring MVC</p><p>SpringBoot与Spring MVC对容器的使用不一样。SpringBoot没有父子容器的概念，SpringBoot就一个容器。</p><p>SpringBoot直接在在启动时创建一个AnnotationConfigServletWebServerApplicationContext的容器，进而在后续时加载Servlet时使用容器。</p><p>Spring MVC是通过web.xml加载Servlet，Servlet使用ServletContainerInitializer加载目标对象完成父子容器的创建等操作。</p></div><h2 id="_3-父子容器隔离" tabindex="-1"><a class="header-anchor" href="#_3-父子容器隔离" aria-hidden="true">#</a> 3.父子容器隔离</h2><ol><li>父子容器的关系就行内部类的关系一样。子容器能得到父容器的Bean，但是父容器得不到子容器的Bean</li><li>父子容器中，属性值都不是互通的。@Value注入的时候需要注意一下子</li></ol><h2 id="_4-定制spring-mvc" tabindex="-1"><a class="header-anchor" href="#_4-定制spring-mvc" aria-hidden="true">#</a> 4.定制Spring MVC</h2><p>之前我们使用xml文件的时候，我们可以配置Spring MVC等相关选项。 比如视图解析器、视图映射、静态资源映射、拦截器。。。</p><p>首先：在配置文件里加上注解<code>@EnableWebMvc</code>:开启SpringMVC定制配置功能；</p><p>其次： 实现<code>WebMvcConfigurer</code>接口。通过这个接口我们可以发现，里面有很多方法，但大多数情况下我们并不需要配置这么多项，因此Spring MVC也考虑到了这一点，提供给我们一个<code>WebMvcConfigurerAdapter</code>来extends就行，Adapter都是空实现~，这样我们需要配置什么，复写对应方法就行</p><p><img src="`+b+`" alt="image-20220330130414373"></p><p>从上可以看出，如果你的项目是构建在Spring5.0(基于java8)以上的，直接实现接口即可。不用再继承此Adapter了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableWebMvc</span>
<span class="token annotation punctuation">@Configuration</span> <span class="token comment">//一定要说明这个文件是个配置文件</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>

    <span class="token comment">//视图解析器</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureViewResolvers</span><span class="token punctuation">(</span><span class="token class-name">ViewResolverRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//默认所有的页面都从 /WEB-INF/ xxx .jsp</span>
        <span class="token comment">//registry.jsp();</span>
        registry<span class="token punctuation">.</span><span class="token function">jsp</span><span class="token punctuation">(</span><span class="token string">&quot;/WEB-INF/views/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.jsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 开启静态资源的请求转发到默认servlet上,不配置页面报错404,(默认servlet不是DispatcherServlet!理解的)</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureDefaultServletHandling</span><span class="token punctuation">(</span><span class="token class-name">DefaultServletHandlerConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        configurer<span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//自定义添加拦截器=========这个比较常用</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//registry.addInterceptor(new MyFirstInterceptor()).addPathPatterns(&quot;/**&quot;);</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-spring-mvc中webmvcconfigureradapter、webmvcconfigurationsupport与webmvcconfigurer" tabindex="-1"><a class="header-anchor" href="#_5-spring-mvc中webmvcconfigureradapter、webmvcconfigurationsupport与webmvcconfigurer" aria-hidden="true">#</a> 5.Spring MVC中WebMvcConfigurerAdapter、WebMvcConfigurationSupport与WebMvcConfigurer</h2>`,53),y=n("code",null,"WebMvcConfigurationSupport",-1),_={href:"https://www.jianshu.com/p/d47a09532de7",target:"_blank",rel:"noopener noreferrer"},x=p(`<p><strong>结论可以摆在此处</strong>：最佳实践还是继承直接实现接口WebMvcConfigurer(或WebMvcConfigurerAdapter，Adapter在5.0开始弃用),只不过要多加一个@EnableWebMvc注解而已。备注：若是SpringBoot环境，请不要加@EnableWebMvc注解，因为springboot已经实例化了WebMvcConfigurationSupport，如果添加了该注解，默认的WebMvcConfigurationSupport配置类是不会生效的</p><h2 id="_5-handlerinterceptor与webrequestinterceptor的异同" tabindex="-1"><a class="header-anchor" href="#_5-handlerinterceptor与webrequestinterceptor的异同" aria-hidden="true">#</a> 5.HandlerInterceptor与WebRequestInterceptor的异同</h2><blockquote><p><code>WebRequestInterceptor</code>间接<strong>实现了</strong><code>HandlerInterceptor</code>，只是他们之间使用<code>WebRequestHandlerInterceptorAdapter</code>适配器类联系。</p></blockquote><p>这两个Spring MVC的拦截器接口比较就比较简单了。直接给结论吧：</p><ol><li>两个接口都可用于Contrller层请求拦截，接口中定义的方法作用也是一样的。</li><li>WebRequestInterceptor的入参WebRequest是包装了HttpServletRequest 和HttpServletResponse的，通过WebRequest获取Request中的信息更简便直接</li><li>WebRequestInterceptor的preHandle是没有返回值的，说明该方法中的逻辑并不影响后续的方法执行，所以这个接口实现就是为了获取Request中的信息，没有阻止请求的作用</li><li>HandlerInterceptor的功能更强大也更基础，可以在preHandle方法中就直接拒绝请求进入controller方法。</li></ol><p>最佳实践：<code>HandlerInterceptor</code>能够实现所有<code>WebRequestInterceptor</code>做的事，更偏底层些。因此建议使用HandlerInterceptor</p><h2 id="_6-filter的执行顺序问题" tabindex="-1"><a class="header-anchor" href="#_6-filter的执行顺序问题" aria-hidden="true">#</a> 6.Filter的执行顺序问题</h2><p>在web.xml中，我们知道，执行顺序是谁在前边执行谁。但是现在没有这个web.xml了，肿么定这个执行顺序呢？</p><p>若是在Spring Boot环境，我们很好的确定Bean的执行顺序，我们可以用<code>@Order</code>注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>也可这么来：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>registration<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>Spring boot 会按照order值的大小，<strong>从小到大的顺序</strong>来依次过滤。也就是说，数字越小，越先执行</p></blockquote><p>那么问题来了，现在我们只根据@WebFilter来排序Filter的执行顺序，怎么破呢？很多人曾经给出答案说没办法，是无序的。</p><p>其实不然，经过我的实践发现，servlet容器是按照Filter的类名按照自然顺序排序的。什么意思呢？比如我有两个Filter：UserLoginFilter和ApiLog。因为这两个文件的首字母A排U之前，所以每次都会限制性ApiLog。</p><p>那么我们就是想先要执行UserLoginFilter怎么办呢？这里有个小技巧，我们可以这么来写即可：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Filter0_UserLogin</span><span class="token punctuation">.</span>java
<span class="token class-name">Filter1_ApiLog</span><span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>完美。但是在Spring Boot环境下的话，还是用Order来控制哦，更加优雅~</p><h2 id="_7-总结" tabindex="-1"><a class="header-anchor" href="#_7-总结" aria-hidden="true">#</a> 7.总结</h2><p>从Servlet3.0开始，Spring3.2开始，就推荐全部使用注解来驱动应用了。在当下流行的SpringBoot环境中，注解驱动可以说体现的淋漓尽致，完全摒弃了之前的xml配置文件，化简为繁。</p><p>本文能帮助理解web容器对Spring MVC的集成。（Spring Boot不同的地方在于它是Spring容器驱动web容器（默认情况下）。而本文是web容器驱动Spring容器）</p>`,21),q={href:"https://www.cnblogs.com/duanxz/p/5074584.html",target:"_blank",rel:"noopener noreferrer"},A=p('<h2 id="附-tomcat监听多端口-springboot监听多端口" tabindex="-1"><a class="header-anchor" href="#附-tomcat监听多端口-springboot监听多端口" aria-hidden="true">#</a> 附：Tomcat监听多端口 / SpringBoot监听多端口</h2><p>Spring Boot 在启动时会打印</p><p><img src="'+g+`" alt="image-20220330132346470"></p><p>这个<code>s</code>，说明SpringBoot铁定是支持监听多个端口的</p><p>先看看单体的Tomcat容器：<strong>stand-alone的tomcat当然是可以的</strong>。Tomcat的架构中，一个Connecter监听一个端口。 如果是stand-alone的Tomcat，只需要在server.xml中添加一个即可，</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>8080<span class="token punctuation">&quot;</span></span> <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>8443<span class="token punctuation">&quot;</span></span> <span class="token attr-name">acceptCount</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100<span class="token punctuation">&quot;</span></span> <span class="token attr-name">debug</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>20000<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>9090<span class="token punctuation">&quot;</span></span> <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>8443<span class="token punctuation">&quot;</span></span> <span class="token attr-name">acceptCount</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100<span class="token punctuation">&quot;</span></span> <span class="token attr-name">debug</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>20000<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>再看看SpringBoot的嵌入式容器：它使用了<code>使用了Embedded Tomcat</code>。同时提供了<code>EmbeddedServletContainerCustomizer</code>接口让用户对各种<code>EmbeddedServletContainer</code>进行配置。因此我们可以加上如下配置：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerConfig</span> <span class="token keyword">implements</span> <span class="token class-name">EmbeddedServletContainerCustomizer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableEmbeddedServletContainer</span> container<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 此处只处理Tomcat类型的嵌入式容器</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>container <span class="token keyword">instanceof</span> <span class="token class-name">TomcatEmbeddedServletContainerFactory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">TomcatEmbeddedServletContainerFactory</span> tomcat <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TomcatEmbeddedServletContainerFactory</span><span class="token punctuation">)</span> container<span class="token punctuation">;</span>

            <span class="token comment">// 此处一般是读取配置文件~~~此处我就偷懒了~~~</span>
            <span class="token comment">//String[] portsArray = ports.split(&quot;,&quot;);</span>
            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> portsArray <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;7070&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;9090&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> portStr <span class="token operator">:</span> portsArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>portStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// Tomcat中，一个Connecter监听一个端口 指定协议为HTTP/1.1</span>
                <span class="token class-name">Connector</span> httpConnector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Connector</span><span class="token punctuation">(</span><span class="token string">&quot;HTTP/1.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                httpConnector<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 添加一个额外的端口  和server.port不冲突~</span>
                tomcat<span class="token punctuation">.</span><span class="token function">addAdditionalTomcatConnectors</span><span class="token punctuation">(</span>httpConnector<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+S+'" alt="image-20220330132513070"></p>',9);function I(z,M){const t=c("router-link"),o=c("ExternalLinkIcon");return i(),u("div",null,[C,n("nav",w,[n("ul",null,[n("li",null,[a(t,{to:"#_0-前言"},{default:e(()=>[s("0.前言")]),_:1})]),n("li",null,[a(t,{to:"#_1-servletcontainerinitializer"},{default:e(()=>[s("1.ServletContainerInitializer")]),_:1})]),n("li",null,[a(t,{to:"#_2-整合spring-mvc"},{default:e(()=>[s("2.整合Spring MVC")]),_:1})]),n("li",null,[a(t,{to:"#_3-父子容器隔离"},{default:e(()=>[s("3.父子容器隔离")]),_:1})]),n("li",null,[a(t,{to:"#_4-定制spring-mvc"},{default:e(()=>[s("4.定制Spring MVC")]),_:1})]),n("li",null,[a(t,{to:"#_5-spring-mvc中webmvcconfigureradapter、webmvcconfigurationsupport与webmvcconfigurer"},{default:e(()=>[s("5.Spring MVC中WebMvcConfigurerAdapter、WebMvcConfigurationSupport与WebMvcConfigurer")]),_:1})]),n("li",null,[a(t,{to:"#_5-handlerinterceptor与webrequestinterceptor的异同"},{default:e(()=>[s("5.HandlerInterceptor与WebRequestInterceptor的异同")]),_:1})]),n("li",null,[a(t,{to:"#_6-filter的执行顺序问题"},{default:e(()=>[s("6.Filter的执行顺序问题")]),_:1})]),n("li",null,[a(t,{to:"#_7-总结"},{default:e(()=>[s("7.总结")]),_:1})]),n("li",null,[a(t,{to:"#附-tomcat监听多端口-springboot监听多端口"},{default:e(()=>[s("附：Tomcat监听多端口 / SpringBoot监听多端口")]),_:1})])])]),h,n("p",null,[s("我们还能看到还有一个类："),y,s("。小伙伴们查看很多文章，但此处我只推荐一个老铁的文章，说到了点上："),n("a",_,[s("WebMvcConfigurationSupport与WebMvcConfigurer的关系"),a(o)])]),x,n("p",null,[s("启动Spring容器有三种方式：这里推荐这篇文章："),n("a",q,[s("spring容器启动的三种方式"),a(o)])]),A])}const W=l(f,[["render",I],["__file","1_springmvc_start.html.vue"]]);export{W as default};
