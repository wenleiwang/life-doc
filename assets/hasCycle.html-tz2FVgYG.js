import{_ as p,r as o,o as l,c,b as n,e,w as t,d as s,a as i}from"./app-7rGY8hGP.js";const u="/life-doc/assets/1e7c3aa4749d5058e206e7559bf30828-C-h8IA6-.png",d={},r=n("h1",{id:"判断链表中是否有环",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#判断链表中是否有环","aria-hidden":"true"},"#"),s(" 判断链表中是否有环")],-1),k={class:"table-of-contents"},v=i('<h2 id="描述" tabindex="-1"><a class="header-anchor" href="#描述" aria-hidden="true">#</a> 描述</h2><p>判断给定的链表中是否有环。如果有环则返回true，否则返回false。</p><p>数据范围：链表长度 0≤n≤10000，链表中任意节点的值满足 |val| &lt;= 100000∣val∣&lt;=100000</p><p>要求：空间复杂度 O(1)，时间复杂度 O(n)</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>在单链表中只有三种情况</p><p><img src="'+u+`" alt=""></p><ol><li>有环，没有出去的点</li><li>无环，有出去的点</li><li>链表为空</li></ol><p>使用快慢指针，快指针一次走2步，慢指针一次走1步。</p><p>所以如果遇到环的话，快指针经过几次后会与慢指针重合。</p><p>如果没有环，快指针会先遇到空出去。</p><h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 链表为空或链表里就一个结点无法使用快慢指针，直接排除</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 快指针</span>
        <span class="token class-name">ListNode</span> f <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token comment">// 慢指针</span>
        <span class="token class-name">ListNode</span> l <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>f <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> l <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 快指针一次二步</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                f <span class="token operator">=</span> f<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                f <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 慢指针一次一步</span>
            l <span class="token operator">=</span> l<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token comment">// 快指针与慢指针重合，有环</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 循环正常结束，无环</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function m(b,h){const a=o("router-link");return l(),c("div",null,[r,n("nav",k,[n("ul",null,[n("li",null,[e(a,{to:"#描述"},{default:t(()=>[s("描述")]),_:1})]),n("li",null,[e(a,{to:"#解题思路"},{default:t(()=>[s("解题思路")]),_:1})]),n("li",null,[e(a,{to:"#代码实现"},{default:t(()=>[s("代码实现")]),_:1})])])]),v])}const _=p(d,[["render",m],["__file","hasCycle.html.vue"]]);export{_ as default};
