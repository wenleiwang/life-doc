import{_ as l,r as p,o as i,c as u,b as n,e as a,w as e,d as s,a as o}from"./app-7rGY8hGP.js";const k={},r=n("h1",{id:"redis实现限流",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#redis实现限流","aria-hidden":"true"},"#"),s(" Redis实现限流")],-1),d={class:"table-of-contents"},v=o(`<p>限流算法在分布式领域是一个经常被提起的话题，当系统的处理能力有限时，如果阻止计划外的请求继续对系统施加压力？</p><p>除了控制流量，还可以控制用户行为，避免垃圾请求（严格限定某行为在规定时间被允许的次数，超过就非法行为）</p><h2 id="简单限流" tabindex="-1"><a class="header-anchor" href="#简单限流" aria-hidden="true">#</a> 简单限流</h2><p>使用zset数据结构。</p><ul><li>score值表示限制时间</li><li>key表示一种行为</li><li>value保证唯一即可（毫秒时间戳）</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isActionAllowed</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">,</span><span class="token class-name">String</span> actionKey<span class="token punctuation">,</span><span class="token keyword">int</span> perid<span class="token punctuation">,</span><span class="token keyword">int</span> maxCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;hist:%s:%s&quot;</span><span class="token punctuation">,</span>userId<span class="token punctuation">,</span>actionKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> nowTs <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 开启事务</span>
    redisTemplate<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>nowTs<span class="token punctuation">,</span>nowTs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeRangeByScore</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nowTs <span class="token operator">-</span> perid <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Long</span> aLong <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">zCard</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 执行</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> aLong <span class="token operator">&lt;=</span> maxCount<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 放弃</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">discard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要记录时间范围内所有操作，如果操作量很大，就不适合使用这个作为限流的方法。</p><h2 id="漏斗限流" tabindex="-1"><a class="header-anchor" href="#漏斗限流" aria-hidden="true">#</a> 漏斗限流</h2><p>漏斗限流是最常用的限流方法之一。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">learn<span class="token punctuation">.</span>note<span class="token punctuation">.</span>redis</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Author Wang WenLei
 * @Date 2022/5/26 8:21
 * @Version 1.0
 **/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FunnelRateLimiter</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Funnel</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * 漏斗容量
         */</span>
        <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>
        <span class="token doc-comment comment">/**
         * 漏嘴流水速率
         */</span>
        <span class="token keyword">float</span> leakingRate<span class="token punctuation">;</span>
        <span class="token doc-comment comment">/**
         * 漏斗剩余空间
         */</span>
        <span class="token keyword">int</span> leftQuota<span class="token punctuation">;</span>
        <span class="token doc-comment comment">/**
         * 上次漏水时间
         */</span>
        <span class="token keyword">long</span> leakingTs<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">Funnel</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">,</span> <span class="token keyword">float</span> leakingRate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>leakingRate <span class="token operator">=</span> leakingRate<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>leftQuota <span class="token operator">=</span> capacity<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>leakingTs <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">void</span> <span class="token function">makeSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> nowTs <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 距离上次漏水过去了多久</span>
            <span class="token keyword">long</span> deltaTs <span class="token operator">=</span> nowTs <span class="token operator">-</span> leakingTs<span class="token punctuation">;</span>
            <span class="token comment">// 可以腾出的空间</span>
            <span class="token keyword">int</span> deltaQuota <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>deltaTs <span class="token operator">*</span> leakingRate<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 间隔时间太长，整数数字过大溢出</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>deltaQuota <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 漏斗空间变满</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>leftQuota <span class="token operator">=</span> capacity<span class="token punctuation">;</span>
                <span class="token comment">// 改为当前时间</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>leakingTs <span class="token operator">=</span> nowTs<span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 腾出空间太小，最小单位是1。那就下次这次无操作</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>deltaQuota <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 漏斗空间增加释放掉的空间</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>leftQuota <span class="token operator">+=</span> deltaQuota<span class="token punctuation">;</span>
            <span class="token comment">// 改为当前时间</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>leakingTs <span class="token operator">=</span> nowTs<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>leftQuota <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 如果漏斗剩余空间大于总空间，把漏斗剩余空间变满</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>leftQuota <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>capacity<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">boolean</span> <span class="token function">watering</span><span class="token punctuation">(</span><span class="token keyword">int</span> quota<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">makeSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>leftQuota <span class="token operator">&gt;=</span> quota<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>leftQuota <span class="token operator">-=</span> quota<span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">boolean</span> <span class="token function">watering</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">watering</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Funnel</span><span class="token punctuation">&gt;</span></span> funnels <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isActionAllowed</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">,</span> <span class="token class-name">String</span> actionKey<span class="token punctuation">,</span> <span class="token keyword">int</span> capacity<span class="token punctuation">,</span> <span class="token keyword">float</span> leakingRate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s:%s&quot;</span><span class="token punctuation">,</span> userId<span class="token punctuation">,</span> actionKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Funnel</span> funnel <span class="token operator">=</span> funnels<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>funnel <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            funnel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Funnel</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span>leakingRate<span class="token punctuation">)</span><span class="token punctuation">;</span>
            funnels<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> funnel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> funnel<span class="token punctuation">.</span><span class="token function">watering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单的原理在代码中已经体现，实际使用中需要完善</p><ol><li>不是分布式，需要考虑从hash结构中取值，内存中运算，再填回hash结构中（隐藏动作）。三个操作的不是原子的，需要适当加锁</li><li>分布式，需要考虑hash分布在不同的主机上，要把结构共享出来。依然要考虑3个操作的原子性问题。</li></ol><p>有没有简单的解决方案？如下节</p><h2 id="漏斗限流之redis-cell" tabindex="-1"><a class="header-anchor" href="#漏斗限流之redis-cell" aria-hidden="true">#</a> 漏斗限流之Redis-Cell</h2><p>Redis4.0提供了一个限流模块Redis-Cell。该模块使用了漏斗算法，并提供了原子的限流指令。</p><h3 id="安装redis-cell" tabindex="-1"><a class="header-anchor" href="#安装redis-cell" aria-hidden="true">#</a> 安装Redis-Cell</h3>`,16),m={href:"https://github.com/brandur/redis-cell/releases",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"tar -zxvf redis-cell-v0.3.0-x86_64-unknown-linux-gnu.tar.gz",-1),w=o(`<p><code>vim redis.conf</code>添加<code>loadmodule pwd刚才的地址/libredis_cell.so</code></p><p>我这里使用的Docker安装的redis，所以启动时需要把文件映射一下，如下命令</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run -v /home/wenlei/software/redis.conf:/usr/local/etc/redis/redis.conf -v /home/wenlei/software/redis-cell/libredis_cell.so:/home/wenlei/software/redis-cell/libredis_cell.so -d --name redis-cell -p 6381:6379 redis redis-server /usr/local/etc/redis/redis.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">解释</p><p>做了2个映射</p><ol><li>配置文件的映射。从/home/wenlei/software文件夹映射到容器的/usr/local/etc/redis/文件夹下</li><li>module文件的映射。从/home/wenlei/software/redis-cell/文件夹映射到/home/wenlei/software/redis-cell/</li></ol></div><h3 id="命令行模式" tabindex="-1"><a class="header-anchor" href="#命令行模式" aria-hidden="true">#</a> 命令行模式</h3><p>该模块只有一个指令<code>cl.throttle</code>，它的参数和返回值都稍稍复杂。</p><p>如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>命令格式：cl.throttle  key名字   令牌桶容量-1   令牌产生个数   令牌产生时间 本次取走的令牌数 （不写时默认1，负值表放入令牌）
cl.throttle key 15 30 60 1  # 运行key行为的频率为每60s最多30次，漏斗初始容量15，即一开始可以连续操作15次，然后开始受漏斗速率影响

返回格式：
1)(integer) 0   #    0成功，1失败

2)(integer) 15  #    令牌桶的容量

3)(integer) 14  #    当前桶内剩余的令牌数

4)(integer) -1  #    成功时该值为-1，失败时表还需要等待多少秒可以有足够的令牌

5)(integer) 2   #    表预计多少秒后令牌桶会满
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="springboot配合lua脚本使用该命令" tabindex="-1"><a class="header-anchor" href="#springboot配合lua脚本使用该命令" aria-hidden="true">#</a> SpringBoot配合LUA脚本使用该命令</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/limit&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isActionAllowed</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;通行~&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;繁忙请稍后&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
* lua 脚本
*/</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">LUA_SCRIPT</span> <span class="token operator">=</span> <span class="token string">&quot;return redis.call(&#39;cl.throttle&#39;,KEYS[1], ARGV[1], ARGV[2], ARGV[3], ARGV[4])&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isActionAllowed</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> maxBurst<span class="token punctuation">,</span> <span class="token keyword">int</span> countPerPeriod<span class="token punctuation">,</span> <span class="token keyword">int</span> period <span class="token punctuation">,</span><span class="token keyword">int</span> quantity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&gt;</span></span> script <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token constant">LUA_SCRIPT</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> rst <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>script<span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> maxBurst<span class="token punctuation">,</span> countPerPeriod<span class="token punctuation">,</span> period<span class="token punctuation">,</span> quantity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//这里只关注第一个元素0表示正常，1表示过载</span>
    <span class="token keyword">return</span> rst<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10);function y(g,f){const t=p("router-link"),c=p("ExternalLinkIcon");return i(),u("div",null,[r,n("nav",d,[n("ul",null,[n("li",null,[a(t,{to:"#简单限流"},{default:e(()=>[s("简单限流")]),_:1})]),n("li",null,[a(t,{to:"#漏斗限流"},{default:e(()=>[s("漏斗限流")]),_:1})]),n("li",null,[a(t,{to:"#漏斗限流之redis-cell"},{default:e(()=>[s("漏斗限流之Redis-Cell")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#安装redis-cell"},{default:e(()=>[s("安装Redis-Cell")]),_:1})]),n("li",null,[a(t,{to:"#命令行模式"},{default:e(()=>[s("命令行模式")]),_:1})]),n("li",null,[a(t,{to:"#springboot配合lua脚本使用该命令"},{default:e(()=>[s("SpringBoot配合LUA脚本使用该命令")]),_:1})])])])])]),v,n("p",null,[s("根据自己系统下载对应的版本，我这里是CentOS7， "),n("a",m,[s("下载github地址"),a(c)]),s(" 解压"),b]),w])}const _=l(k,[["render",y],["__file","useLimit.html.vue"]]);export{_ as default};
