import{_ as l,r,o as s,c as h,b as t,e as d,w as o,d as e,a as i}from"./app-7rGY8hGP.js";const n={},c=t("h1",{id:"object-对象",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#object-对象","aria-hidden":"true"},"#"),e(" Object 对象")],-1),u={class:"table-of-contents"},_=i('<h2 id="主要包含的方法" tabindex="-1"><a class="header-anchor" href="#主要包含的方法" aria-hidden="true">#</a> 主要包含的方法</h2><table><thead><tr><th>方法名</th><th>用途</th></tr></thead><tbody><tr><td>getClass()</td><td></td></tr><tr><td>int hashCode()</td><td>返回对象的hash码值</td></tr><tr><td>boolean equals(Object obj)</td><td></td></tr><tr><td>Object clone()</td><td></td></tr><tr><td>String toString()</td><td></td></tr><tr><td>void notify()</td><td></td></tr><tr><td>void notifyAll()</td><td></td></tr><tr><td>void wait(long timeout)</td><td></td></tr><tr><td>void wait(long timeout, int nanos)</td><td></td></tr><tr><td>void wait()</td><td></td></tr><tr><td>void finalize()</td><td></td></tr></tbody></table><h2 id="hashcode-和equals-关系" tabindex="-1"><a class="header-anchor" href="#hashcode-和equals-关系" aria-hidden="true">#</a> hashCode()和equals()关系</h2><ol><li>如果两个对象相同（即用equals比较返回true），那么它们的hashCode值一定要相同</li><li>如果两个对象不同（即用equals比较返回false），那么它们的hashCode值可能相同也可能不同；</li><li>如果两个对象的hashCode相同（存在哈希冲突），那么它们可能相同也可能不同(即equals比 较可能是false也可能是true)</li><li>如果两个对象的hashCode不同，那么他们肯定不同(即用equals比较返回false)</li></ol><h2 id="和equals-关系" tabindex="-1"><a class="header-anchor" href="#和equals-关系" aria-hidden="true">#</a> ==和equals()关系</h2><p>== 比较的是内存地址是否相同，基本数据类型是否相同 equals 没有重写时与==等价</p>',6);function f(b,q){const a=r("router-link");return s(),h("div",null,[c,t("nav",u,[t("ul",null,[t("li",null,[d(a,{to:"#主要包含的方法"},{default:o(()=>[e("主要包含的方法")]),_:1})]),t("li",null,[d(a,{to:"#hashcode-和equals-关系"},{default:o(()=>[e("hashCode()和equals()关系")]),_:1})]),t("li",null,[d(a,{to:"#和equals-关系"},{default:o(()=>[e("==和equals()关系")]),_:1})])])]),_])}const v=l(n,[["render",f],["__file","object.html.vue"]]);export{v as default};
