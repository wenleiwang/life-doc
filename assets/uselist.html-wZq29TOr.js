import{_ as p,r as o,o as c,c as i,b as s,e as t,w as e,d as n,a as l}from"./app-7rGY8hGP.js";const u={},d=s("h1",{id:"redis基础类型——list-列表",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#redis基础类型——list-列表","aria-hidden":"true"},"#"),n(" Redis基础类型——list(列表)")],-1),r={class:"table-of-contents"},k=l(`<p>Java方法基于redisTemplate.opsForList()。</p><h2 id="介绍基本概念" tabindex="-1"><a class="header-anchor" href="#介绍基本概念" aria-hidden="true">#</a> 介绍基本概念</h2><p>Redis的列表相当于Java语言的LinkedList，是链表而不是数组。意味着插入和删除操作非常快，时间复杂度O(1)，但索引定位慢，时间复杂度O(n)。</p><p>当列表弹出最后一个元素之后，该数据结构被自动删除，内存被回收。</p><p>Redis的列表结构常用来做异步队列使用。将需要延后的处理的任务结构体序列化成字符串，塞进Redis的列表，另一个线程从这个列表中轮询数据进行处理。</p><p>理解可以，但是Redis底层存储的不是一个简单的LinkedList，而是称之为“快速链表”（quicklist）的一个结构。</p><p>列表元素比较少的情况下，会使用一块连续的内存存储，这个结构是压缩列表（ziplist）。当数据量较多的时候才会改成quicklist。</p><p>因为普通的链表需要的附加指针空间太大，会浪费空间，还会加重内存的碎片化。所以Redis将链表和ziplist结合起来组成了quicklist，也就是将多个ziplist使用双向指针串起来使用。 这样quicklist既满足快速的插入删除性能，又不会出现太大的空间冗余。</p><h2 id="命令与java方法对应关系" tabindex="-1"><a class="header-anchor" href="#命令与java方法对应关系" aria-hidden="true">#</a> 命令与Java方法对应关系</h2><table><thead><tr><th>命令</th><th>Java方法</th><th>描述</th></tr></thead><tbody><tr><td>LPUSH</td><td>leftPush(key, value)</td><td>将一个或多个值 value 插入到列表 key 的表头</td></tr><tr><td>LPOP</td><td>leftPop(key)</td><td>移除并返回列表 key 的头元素</td></tr><tr><td>RPUSH</td><td>rightPush(key, value)</td><td>将一个或多个值 value 插入到列表 key 的表尾</td></tr><tr><td>RPOP</td><td>rightPop(key)</td><td>移除并返回列表 key 的尾元素</td></tr><tr><td>linde</td><td>index(key,index)</td><td>相当于Java链表的get(int index)方法，需要对链表进行遍历，性能会随着index的增大而变差。index可以为负，表示倒数第几个元素</td></tr><tr><td>ltrim</td><td>trim(K key, long start, long end)</td><td>保留，ltrim的两个参数start_index和end_index定义了一个区间，在这个区间内的值ltrim要保留，区间之外砍掉。可以通过ltrim实现一个定长的链表</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token class-name">HashOperations</span> hashOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 将哈希表 key 中的域 field 的值设为 value 。</span>
  <span class="token comment">//如果 key 不存在，一个新的哈希表被创建并进行 HSET 操作。</span>
  <span class="token comment">//如果域 field 已经存在于哈希表中，旧值将被覆盖。</span>
  <span class="token class-name">String</span> object <span class="token operator">=</span> <span class="token string">&quot;Object&quot;</span><span class="token punctuation">,</span> hashKey1 <span class="token operator">=</span> <span class="token string">&quot;hashKey1&quot;</span><span class="token punctuation">,</span> hashKey2 <span class="token operator">=</span> <span class="token string">&quot;hashKey2&quot;</span><span class="token punctuation">,</span> hashValue1 <span class="token operator">=</span> <span class="token string">&quot;hashValue1&quot;</span><span class="token punctuation">,</span> hashValue2 <span class="token operator">=</span> <span class="token string">&quot;hashValue2&quot;</span><span class="token punctuation">;</span>
  hashOperations<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> hashKey1<span class="token punctuation">,</span> hashValue1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  hashOperations<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> hashKey2<span class="token punctuation">,</span> hashValue2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 返回哈希表 key 中给定域 field 的值。</span>
  <span class="token class-name">Object</span> result <span class="token operator">=</span> hashOperations<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> hashKey1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 返回哈希表 key 中的所有域。</span>
  <span class="token class-name">Set</span> set <span class="token operator">=</span> hashOperations<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//返回哈希表 key 中所有域的值</span>
  <span class="token class-name">List</span> list <span class="token operator">=</span> hashOperations<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 返回哈希表 key 中，所有的域和值。</span>
  <span class="token comment">//在返回值里，紧跟每个域名(field name)之后是域的值(value)，所以返回值的长度是哈希表大小的两倍。</span>
  <span class="token class-name">Map</span> map <span class="token operator">=</span> hashOperations<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 查看哈希表 key 中，给定域 field 是否存在</span>
  hashOperations<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> hashKey1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function h(v,m){const a=o("router-link");return c(),i("div",null,[d,s("nav",r,[s("ul",null,[s("li",null,[t(a,{to:"#介绍基本概念"},{default:e(()=>[n("介绍基本概念")]),_:1})]),s("li",null,[t(a,{to:"#命令与java方法对应关系"},{default:e(()=>[n("命令与Java方法对应关系")]),_:1})])])]),k])}const y=p(u,[["render",h],["__file","uselist.html.vue"]]);export{y as default};
