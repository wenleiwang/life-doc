import{_ as e,r as o,o as c,c as l,b as n,e as t,w as p,d as s,a as i}from"./app-7rGY8hGP.js";const u="/life-doc/assets/c162cf3ed7f0fa9fc9d02f2e8d9da3b6-VGNwF6df.png",r={},d=n("h1",{id:"线程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#线程","aria-hidden":"true"},"#"),s(" 线程")],-1),k={class:"table-of-contents"},v=i('<h2 id="线程状态转换" tabindex="-1"><a class="header-anchor" href="#线程状态转换" aria-hidden="true">#</a> 线程状态转换</h2><p><img src="'+u+`" alt=""></p><h2 id="线程的创建" tabindex="-1"><a class="header-anchor" href="#线程的创建" aria-hidden="true">#</a> 线程的创建</h2><ol><li>继承Thread</li><li>实现Runnable接口</li><li>实现Callable接口</li></ol><h2 id="线程的生命周期" tabindex="-1"><a class="header-anchor" href="#线程的生命周期" aria-hidden="true">#</a> 线程的生命周期</h2><ol><li>新建状态(New)</li></ol><p>创建一个线程对象后，该线程对象就处于新建状态，此时它不能运行，与其他Java对象一样，仅仅由Java虚拟机为其分配了内存，没有表现出任何线程的动态特征。</p><ol start="2"><li>就绪状态(Runnable)</li></ol><p>当线程对象调用了start()方法后，该线程就进入就绪状态。处于就绪状态的线程位于线程队列中，此时它只是具备了运行的条件，能否获得CPU的使用权并开始运行，还需要等待系统的调度。</p><ol start="3"><li>运行状态(Running)</li></ol><p>如果处于就绪状态的线程获得了CPU的使用权，并开始执行run()方法中的线程执行体，则该线程处于运行状态。一个线程启动后，它可能不会一直处于运行状态，当运行状态的线程使用完系统分配的时间后，系统就会剥夺该线程占用的CPU资源，让其他线程获得执行的机会。需要注意的是，只有处于就绪状态的线程才可能转换到运行状态。</p><ol start="4"><li>阻塞状态(Blocked)</li></ol><p>一个正在执行的线程在某些特殊情况下，如被人为挂起或执行耗时的输入/输出操作时，会让出CPU的使用权并暂时中止自己的执行，进人阻塞状态。线程进人阻塞状态后，就不能进入排队队列。只有当引起阻塞的原因被消除后，线程才可以转入就绪状态。</p><p>下面就列举一下线程由运行状态转换成阻塞状态的原因，以及如何从阻塞状态转换成就绪状态。</p><ul><li><p>当线程试图获取某个对象的同步锁时，如里该销被其他线程所持有，则当前线程会进入阻塞状态，如果想从阻塞状态进入就绪状态就必须获取到其他线程所持有的锁。</p></li><li><p>当线程调用了一个阻塞式的I/O方法时，该线程就会进入阻寒状态，如果想进入就绪状态就必须要等到这个阻塞的I/O方法返回。</p></li><li><p>当线程调用了某个对象的wait()方法时，也会使线程进入阻塞状态，如果想进入就绪状态就需要使用notify()方法唤醒该线程。</p></li><li><p>当线程调用了Thread的sleep(long millis)方法时，也会使线程进入阻塞状态，在这种情况下，只需等到线程睡眠的时间到了后，线程就会自动进入就绪状态。</p></li><li><p>当在一个线程中调用了另一个线程的join()方法时，会使当前线程进入阻塞状态，在这种情况下，需要等到新加入的线程运行结束后才会结束阻塞状态，进入就绪状态。</p></li></ul><p>需要注意的是，线程从阻塞状态只能进入就绪状态，而不能直接进人运行状态，也就是说，结束阻塞的线程需要重新进入可运行池中，等待系统的调度。</p><ol start="5"><li>死亡状态(Terminated)</li></ol><p>如果线程调用stop()方法或nun()方法正常执行完毕，或者线程抛出一个未捕获的异常(Exception)错误(Error)，线程就进入死亡状态。一旦进入死亡状态，线程将不再拥有运行的资格，也不能再转换到其他状态。</p><h2 id="如何实现线程的同步" tabindex="-1"><a class="header-anchor" href="#如何实现线程的同步" aria-hidden="true">#</a> 如何实现线程的同步</h2><ol><li><p>同步方法，使用 synchronized关键字，可以修饰普通方法、静态方法，以及语句块。</p></li><li><p>同步代码块，用synchronized关键字修饰语句块。被该关键字修饰的语句块会自动被加上内置锁，从而实现同步</p></li><li><p>使用特殊域变量(volatile)实现线程同步。</p></li><li><p>使用重入锁实现线程同步，在JavaSE5.0中新增了一个java.util.concurrent包来支持同步。</p></li><li><p>使用局部变量实现线程同步，如果使用ThreadLocal管理变量，则每一个使用该变量的线程都获得该变量的副本，副本之间相互独立，这样每一个线程都可以随意修改自己的变量副本，而不会对其他线程产生影响。</p></li></ol><h2 id="线程间的通讯方式" tabindex="-1"><a class="header-anchor" href="#线程间的通讯方式" aria-hidden="true">#</a> 线程间的通讯方式</h2><h3 id="_1-什么是线程通信" tabindex="-1"><a class="header-anchor" href="#_1-什么是线程通信" aria-hidden="true">#</a> 1.什么是线程通信</h3><p>线程通信就是当多个线程共同操作共享的资源时，互相告知自己的状态以避免资源争夺。这些线程之间就需要互相协调，这个过程被称为线程的通信。</p><h3 id="_2-为什么需要线程通信" tabindex="-1"><a class="header-anchor" href="#_2-为什么需要线程通信" aria-hidden="true">#</a> 2.为什么需要线程通信</h3><p>线程是操作系统调度的最小单位，有自己的栈空间，可以按照既定的代码逐步的执行，但是如果每个线程间都孤立的运行，那就会造资源浪费。 在现实中，我们需要这些线程间可以按照指定的规则共同完成一件任务。</p><h3 id="_3-线程通信的方式种类" tabindex="-1"><a class="header-anchor" href="#_3-线程通信的方式种类" aria-hidden="true">#</a> 3.线程通信的方式种类</h3><ul><li><p>共享内存：线程之间共享程序的公共状态，线程之间通过读-写内存中的公共状态来隐式通信。（volatile共享内存）</p></li><li><p>消息传递：线程之间没有公共的状态，线程之间必须通过明确的发送信息来显示的进行通信。（wait/notify等待通知方式、join方式）</p></li><li><p>管道流（管道输入/输出流的形式）</p></li></ul><h2 id="能停止的线程-异常法" tabindex="-1"><a class="header-anchor" href="#能停止的线程-异常法" aria-hidden="true">#</a> 能停止的线程--异常法</h2><p>有了前面学习过的知识点，就可以在线程中用for语句来判断一下线程是否是停止状态，如果是停止状态，则后面的代码不再运行即可：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">500000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程已经终止， for循环不再执行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                <span class="token keyword">break</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;i=&quot;</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;这是for循环外面的语句，也会被执行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Run</span> <span class="token punctuation">{</span>  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">try</span> <span class="token punctuation">{</span>  
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>...  
i=180136  
i=180137  
i=180138  
i=180139  
线程已经终止， for循环不再执行  
这是for循环外面的语句，也会被执行
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的示例虽然停止了线程，但如果for语句下面还有语句，还是会继续运行的。</p><p>如何解决语句继续运行的问题呢？看一下更新后的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">try</span> <span class="token punctuation">{</span>  
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">500000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程已经终止， for循环不再执行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                <span class="token punctuation">}</span>  
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;i=&quot;</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
  
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;这是for循环外面的语句，也会被执行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;进入MyThread.java类中的catch了。。。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用Run.java运行的结果如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>...  
i=203798  
i=203799  
i=203800  
线程已经终止， for循环不再执行  
进入MyThread.java类中的catch了。。。  
java.lang.InterruptedException  
 at thread.MyThread.run(MyThread.java:13)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>#线程</p>`,38);function m(b,h){const a=o("router-link");return c(),l("div",null,[d,n("nav",k,[n("ul",null,[n("li",null,[t(a,{to:"#线程状态转换"},{default:p(()=>[s("线程状态转换")]),_:1})]),n("li",null,[t(a,{to:"#线程的创建"},{default:p(()=>[s("线程的创建")]),_:1})]),n("li",null,[t(a,{to:"#线程的生命周期"},{default:p(()=>[s("线程的生命周期")]),_:1})]),n("li",null,[t(a,{to:"#如何实现线程的同步"},{default:p(()=>[s("如何实现线程的同步")]),_:1})]),n("li",null,[t(a,{to:"#线程间的通讯方式"},{default:p(()=>[s("线程间的通讯方式")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_1-什么是线程通信"},{default:p(()=>[s("1.什么是线程通信")]),_:1})]),n("li",null,[t(a,{to:"#_2-为什么需要线程通信"},{default:p(()=>[s("2.为什么需要线程通信")]),_:1})]),n("li",null,[t(a,{to:"#_3-线程通信的方式种类"},{default:p(()=>[s("3.线程通信的方式种类")]),_:1})])])]),n("li",null,[t(a,{to:"#能停止的线程-异常法"},{default:p(()=>[s("能停止的线程--异常法")]),_:1})])])]),v])}const y=e(r,[["render",m],["__file","线程.html.vue"]]);export{y as default};
