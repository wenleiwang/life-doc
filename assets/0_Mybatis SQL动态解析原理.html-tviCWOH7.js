import{_ as n,o as s,c as a,a as p}from"./app-7rGY8hGP.js";const t="/life-doc/assets/img_20240108-DcvBH1Q5.png",e="/life-doc/assets/img_20240108_1-gS1tnlrV.png",o={},c=p(`<h1 id="mybatis-sql动态解析原理" tabindex="-1"><a class="header-anchor" href="#mybatis-sql动态解析原理" aria-hidden="true">#</a> Mybatis SQL动态解析原理</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>核心步骤在这，这个类在<code>org.apache.ibatis.scripting.xmltags</code>包下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicSqlSource</span> <span class="token keyword">implements</span> <span class="token class-name">SqlSource</span> <span class="token punctuation">{</span>  
  
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Configuration</span> configuration<span class="token punctuation">;</span>  
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SqlNode</span> rootSqlNode<span class="token punctuation">;</span>  
  
  <span class="token keyword">public</span> <span class="token class-name">DynamicSqlSource</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">,</span> <span class="token class-name">SqlNode</span> rootSqlNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">this</span><span class="token punctuation">.</span>configuration <span class="token operator">=</span> configuration<span class="token punctuation">;</span>  
    <span class="token keyword">this</span><span class="token punctuation">.</span>rootSqlNode <span class="token operator">=</span> rootSqlNode<span class="token punctuation">;</span>  
  <span class="token punctuation">}</span>  
  
  <span class="token annotation punctuation">@Override</span>  
  <span class="token keyword">public</span> <span class="token class-name">BoundSql</span> <span class="token function">getBoundSql</span><span class="token punctuation">(</span><span class="token class-name">Object</span> parameterObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token comment">// 构造上下文，保存所有相关信息的类，用于关联上下文使用</span>
    <span class="token class-name">DynamicContet</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DynamicContext</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> parameterObject<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token comment">// 解析 替换xml中的where、if...等得到一个 带select * from user where id = #{id} 的对象</span>
    rootSqlNode<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token class-name">SqlSourceBuilder</span> sqlSourceParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSourceBuilder</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> parameterType <span class="token operator">=</span> parameterObject <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">:</span> parameterObject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token class-name">SqlSource</span> sqlSource <span class="token operator">=</span> sqlSourceParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parameterType<span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getBindings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token class-name">BoundSql</span> boundSql <span class="token operator">=</span> sqlSource<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>parameterObject<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    context<span class="token punctuation">.</span><span class="token function">getBindings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>boundSql<span class="token operator">::</span><span class="token function">setAdditionalParameter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">return</span> boundSql<span class="token punctuation">;</span>  
  <span class="token punctuation">}</span>  
  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="关键接口sqlnode" tabindex="-1"><a class="header-anchor" href="#关键接口sqlnode" aria-hidden="true">#</a> 关键接口SqlNode</h2><p>看下这个接口的实现，在这些实现中可以看到经常用到的if、where、forEach等</p><p><img src="`+t+'" alt=""></p><table><thead><tr><th>实现类</th><th>作用</th></tr></thead><tbody><tr><td>MixedSqlNode</td><td>将内部的sqlNode集合遍历一遍，调用apply方法，一个递归过程</td></tr><tr><td>StaticTextSqlNode</td><td>负责拼接文本</td></tr><tr><td>WhereSqlNode</td><td>处理and关键字，以及两边的空格</td></tr><tr><td>IfSqlNode</td><td>使用Ognl判断test中的表达式对标签进行过滤</td></tr></tbody></table><p>举个例子：</p><p><img src="'+e+`" alt=""></p><h2 id="_1-mixedsqlnode" tabindex="-1"><a class="header-anchor" href="#_1-mixedsqlnode" aria-hidden="true">#</a> 1.MixedSqlNode</h2><p>循环遍历调用内部所有SqlNode节点的apply方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MixedSqlNode</span> <span class="token keyword">implements</span> <span class="token class-name">SqlNode</span> <span class="token punctuation">{</span>  
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SqlNode</span><span class="token punctuation">&gt;</span></span> contents<span class="token punctuation">;</span>  
  
  <span class="token keyword">public</span> <span class="token class-name">MixedSqlNode</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SqlNode</span><span class="token punctuation">&gt;</span></span> contents<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">this</span><span class="token punctuation">.</span>contents <span class="token operator">=</span> contents<span class="token punctuation">;</span>  
  <span class="token punctuation">}</span>  
  
  <span class="token annotation punctuation">@Override</span>  
  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">DynamicContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    contents<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>node <span class="token operator">-&gt;</span> node<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  
  <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-statictextsqlnode" tabindex="-1"><a class="header-anchor" href="#_2-statictextsqlnode" aria-hidden="true">#</a> 2.StaticTextSqlNode</h2><p>把SqlNode里的字符串拼接到上下文的StringJoiner变量里。</p><blockquote><p>StringJoiner是上下文（DynamicContext）里的一个变量，用来记录解析完成的SQL字符串。</p></blockquote><p>追到再底层会发现就是一个StringBuilder，然后这个.appendSql()就是在调用StringBuilder的.append()方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticTextSqlNode</span> <span class="token keyword">implements</span> <span class="token class-name">SqlNode</span> <span class="token punctuation">{</span>  
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> text<span class="token punctuation">;</span>  
  
  <span class="token keyword">public</span> <span class="token class-name">StaticTextSqlNode</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>  
  <span class="token punctuation">}</span>  
  
  <span class="token annotation punctuation">@Override</span>  
  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">DynamicContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    context<span class="token punctuation">.</span><span class="token function">appendSql</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  
  <span class="token punctuation">}</span>  
  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-ifsqlnode" tabindex="-1"><a class="header-anchor" href="#_3-ifsqlnode" aria-hidden="true">#</a> 3.IfSqlNode</h2><p>需要判断test表达式是否满足条件，如果满足，则处理内部sqlNode，否则丢弃节点。==这就是if标签生效的原因==</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IfSqlNode</span> <span class="token keyword">implements</span> <span class="token class-name">SqlNode</span> <span class="token punctuation">{</span>  
  <span class="token comment">// 表达式解析器</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ExpressionEvaluator</span> evaluator<span class="token punctuation">;</span>  
  <span class="token comment">// 传入需要解析的字符串</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> test<span class="token punctuation">;</span>  
  <span class="token comment">// if里有可能有其他 SqlNode</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SqlNode</span> contents<span class="token punctuation">;</span>  
  
  <span class="token keyword">public</span> <span class="token class-name">IfSqlNode</span><span class="token punctuation">(</span><span class="token class-name">SqlNode</span> contents<span class="token punctuation">,</span> <span class="token class-name">String</span> test<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">this</span><span class="token punctuation">.</span>test <span class="token operator">=</span> test<span class="token punctuation">;</span>  
    <span class="token keyword">this</span><span class="token punctuation">.</span>contents <span class="token operator">=</span> contents<span class="token punctuation">;</span>  
    <span class="token keyword">this</span><span class="token punctuation">.</span>evaluator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExpressionEvaluator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token punctuation">}</span>  
  
  <span class="token annotation punctuation">@Override</span>  
  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">DynamicContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token comment">// 第一个参数是 表达式字符</span>
    <span class="token comment">// 第二个参数是 从上下文获取绑定的对象参数 parameter</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>evaluator<span class="token punctuation">.</span><span class="token function">evaluateBoolean</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getBindings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
      contents<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>  
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  
  <span class="token punctuation">}</span>  
  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看下表达式解析器如何生效的，使用Ognl表达式判断表达式是否成立</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExpressionEvaluator</span> <span class="token punctuation">{</span>  
  <span class="token comment">// 调用到这里，进入调用。判断表达式是否成立</span>
  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">evaluateBoolean</span><span class="token punctuation">(</span><span class="token class-name">String</span> expression<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameterObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token comment">// 使用Ognl获取表达式的值</span>
    <span class="token class-name">Object</span> value <span class="token operator">=</span> <span class="token class-name">OgnlCache</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>expression<span class="token punctuation">,</span> parameterObject<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token comment">// 值如果是布尔类型直接返回</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">)</span> value<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token comment">// 如果是数值类型看是否是0</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  
  <span class="token punctuation">}</span>     
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ognl类里代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">String</span> expression<span class="token punctuation">,</span> <span class="token class-name">Object</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
  <span class="token keyword">try</span> <span class="token punctuation">{</span>  
    <span class="token class-name">Map</span> context <span class="token operator">=</span> <span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">createDefaultContext</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token constant">MEMBER_ACCESS</span><span class="token punctuation">,</span> <span class="token constant">CLASS_RESOLVER</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">return</span> <span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OgnlException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">&quot;Error evaluating expression &#39;&quot;</span> <span class="token operator">+</span> expression <span class="token operator">+</span> <span class="token string">&quot;&#39;. Cause: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-wheresqlnode" tabindex="-1"><a class="header-anchor" href="#_4-wheresqlnode" aria-hidden="true">#</a> 4.WhereSqlNode</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WhereSqlNode</span> <span class="token keyword">extends</span> <span class="token class-name">TrimSqlNode</span> <span class="token punctuation">{</span>  
  <span class="token comment">// 需要处理where的前缀</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> prefixList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;AND &quot;</span><span class="token punctuation">,</span><span class="token string">&quot;OR &quot;</span><span class="token punctuation">,</span><span class="token string">&quot;AND\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;OR\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;AND\\r&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;OR\\r&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;AND\\t&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;OR\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
  <span class="token keyword">public</span> <span class="token class-name">WhereSqlNode</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">,</span> <span class="token class-name">SqlNode</span> contents<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">super</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> contents<span class="token punctuation">,</span> <span class="token string">&quot;WHERE&quot;</span><span class="token punctuation">,</span> prefixList<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token punctuation">}</span>  
  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>继承了 TrimSqlNode，先从apply看起</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TrimSqlNode</span> <span class="token keyword">implements</span> <span class="token class-name">SqlNode</span> <span class="token punctuation">{</span>  
  
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SqlNode</span> contents<span class="token punctuation">;</span>  
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> prefix<span class="token punctuation">;</span>  
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> suffix<span class="token punctuation">;</span>  
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> prefixesToOverride<span class="token punctuation">;</span>  
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> suffixesToOverride<span class="token punctuation">;</span>  
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Configuration</span> configuration<span class="token punctuation">;</span>  
  
  <span class="token keyword">public</span> <span class="token class-name">TrimSqlNode</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">,</span> <span class="token class-name">SqlNode</span> contents<span class="token punctuation">,</span> <span class="token class-name">String</span> prefix<span class="token punctuation">,</span> <span class="token class-name">String</span> prefixesToOverride<span class="token punctuation">,</span> <span class="token class-name">String</span> suffix<span class="token punctuation">,</span> <span class="token class-name">String</span> suffixesToOverride<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">this</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> contents<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> <span class="token function">parseOverrides</span><span class="token punctuation">(</span>prefixesToOverride<span class="token punctuation">)</span><span class="token punctuation">,</span> suffix<span class="token punctuation">,</span> <span class="token function">parseOverrides</span><span class="token punctuation">(</span>suffixesToOverride<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token punctuation">}</span>  
  
  <span class="token keyword">protected</span> <span class="token class-name">TrimSqlNode</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">,</span> <span class="token class-name">SqlNode</span> contents<span class="token punctuation">,</span> <span class="token class-name">String</span> prefix<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> prefixesToOverride<span class="token punctuation">,</span> <span class="token class-name">String</span> suffix<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> suffixesToOverride<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">this</span><span class="token punctuation">.</span>contents <span class="token operator">=</span> contents<span class="token punctuation">;</span>  
    <span class="token keyword">this</span><span class="token punctuation">.</span>prefix <span class="token operator">=</span> prefix<span class="token punctuation">;</span>  
    <span class="token keyword">this</span><span class="token punctuation">.</span>prefixesToOverride <span class="token operator">=</span> prefixesToOverride<span class="token punctuation">;</span>  
    <span class="token keyword">this</span><span class="token punctuation">.</span>suffix <span class="token operator">=</span> suffix<span class="token punctuation">;</span>  
    <span class="token keyword">this</span><span class="token punctuation">.</span>suffixesToOverride <span class="token operator">=</span> suffixesToOverride<span class="token punctuation">;</span>  
    <span class="token keyword">this</span><span class="token punctuation">.</span>configuration <span class="token operator">=</span> configuration<span class="token punctuation">;</span>  
  <span class="token punctuation">}</span>  

  <span class="token comment">// 先从这看</span>
  <span class="token annotation punctuation">@Override</span>  
  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">DynamicContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token comment">// 构造一个上下文DynamicContext的增强子类</span>
    <span class="token class-name">FilteredDynamicContext</span> filteredDynamicContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilteredDynamicContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token comment">// 执行where里sqlNode的apply</span>
    <span class="token keyword">boolean</span> result <span class="token operator">=</span> contents<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>filteredDynamicContext<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token comment">// 针对封装的这个上下文做一些处理，去掉前缀和后缀。</span>
    <span class="token comment">// 原来的DynamicContext里没有这个方法，写一个内部类继承DynamicContext，这样就能在原来的基础上增强，做一些处理</span>
    filteredDynamicContext<span class="token punctuation">.</span><span class="token function">applyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  
  <span class="token punctuation">}</span>  
  
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">parseOverrides</span><span class="token punctuation">(</span><span class="token class-name">String</span> overrides<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">if</span> <span class="token punctuation">(</span>overrides <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
      <span class="token keyword">final</span> <span class="token class-name">StringTokenizer</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTokenizer</span><span class="token punctuation">(</span>overrides<span class="token punctuation">,</span> <span class="token string">&quot;|&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
      <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">countTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
      <span class="token keyword">while</span> <span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">hasMoreTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">ENGLISH</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
      <span class="token punctuation">}</span>  
      <span class="token keyword">return</span> list<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token punctuation">}</span>  
  
  <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">FilteredDynamicContext</span> <span class="token keyword">extends</span> <span class="token class-name">DynamicContext</span> <span class="token punctuation">{</span>  
    <span class="token keyword">private</span> <span class="token class-name">DynamicContext</span> delegate<span class="token punctuation">;</span>  
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> prefixApplied<span class="token punctuation">;</span>  
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> suffixApplied<span class="token punctuation">;</span>  
    <span class="token keyword">private</span> <span class="token class-name">StringBuilder</span> sqlBuffer<span class="token punctuation">;</span>  
  
    <span class="token keyword">public</span> <span class="token class-name">FilteredDynamicContext</span><span class="token punctuation">(</span><span class="token class-name">DynamicContext</span> delegate<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
      <span class="token keyword">super</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
      <span class="token keyword">this</span><span class="token punctuation">.</span>delegate <span class="token operator">=</span> delegate<span class="token punctuation">;</span>  
      <span class="token keyword">this</span><span class="token punctuation">.</span>prefixApplied <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  
      <span class="token keyword">this</span><span class="token punctuation">.</span>suffixApplied <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  
      <span class="token keyword">this</span><span class="token punctuation">.</span>sqlBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  

    <span class="token comment">// 做的增强处理</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">applyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
      <span class="token comment">// 得到拼接的sql，trim一下。去掉前后空格</span>
      sqlBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>sqlBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
      <span class="token comment">// 都给转成大写</span>
      <span class="token class-name">String</span> trimmedUppercaseSql <span class="token operator">=</span> sqlBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">ENGLISH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
      <span class="token comment">// </span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>trimmedUppercaseSql<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token comment">// 处理前缀，去掉前面的包含的指定的前缀</span>
        <span class="token function">applyPrefix</span><span class="token punctuation">(</span>sqlBuffer<span class="token punctuation">,</span> trimmedUppercaseSql<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token comment">// 处理后缀，去掉后面的包含指定的后缀</span>
        <span class="token function">applySuffix</span><span class="token punctuation">(</span>sqlBuffer<span class="token punctuation">,</span> trimmedUppercaseSql<span class="token punctuation">)</span><span class="token punctuation">;</span>  
      <span class="token punctuation">}</span>  
      delegate<span class="token punctuation">.</span><span class="token function">appendSql</span><span class="token punctuation">(</span>sqlBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">getBindings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
      <span class="token keyword">return</span> delegate<span class="token punctuation">.</span><span class="token function">getBindings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
      delegate<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getUniqueNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
      <span class="token keyword">return</span> delegate<span class="token punctuation">.</span><span class="token function">getUniqueNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">appendSql</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
      sqlBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
      <span class="token keyword">return</span> delegate<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  

    <span class="token comment">// 处理前缀</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">applyPrefix</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> sql<span class="token punctuation">,</span> <span class="token class-name">String</span> trimmedUppercaseSql<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
      <span class="token comment">// 用来判断是否已经处理过，初始值为false处理过改为true </span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prefixApplied<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        prefixApplied <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  
        <span class="token comment">// 前缀集合</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>prefixesToOverride <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
          <span class="token comment">// 循环前缀集合</span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> toRemove <span class="token operator">:</span> prefixesToOverride<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token comment">// 转大写的字符串包含前缀集合中的字符</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>trimmedUppercaseSql<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>toRemove<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
              <span class="token comment">// 删掉 包含的这个几个字符</span>
              sql<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> toRemove<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
              <span class="token keyword">break</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
          <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span>  
        <span class="token comment">// 如果需要拼接前缀，拼接一个空格再把指定的前缀拼接上，在where中拼接的是 where</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>prefix <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
          sql<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
          sql<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> prefix<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
      <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>  

    <span class="token comment">// 处理后缀</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">applySuffix</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> sql<span class="token punctuation">,</span> <span class="token class-name">String</span> trimmedUppercaseSql<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
      <span class="token comment">// 用来判断是否已经处理过，初始值为false处理过改为true </span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>suffixApplied<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        suffixApplied <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  
        <span class="token comment">// where中没有处理需要处理的后缀，这个suffixesToOverride是null</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>suffixesToOverride <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
          <span class="token comment">// 有需要处理的后缀处理后缀</span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> toRemove <span class="token operator">:</span> suffixesToOverride<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token comment">// 结尾为指定字符，去掉指定字符</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>trimmedUppercaseSql<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>toRemove<span class="token punctuation">)</span> <span class="token operator">||</span> trimmedUppercaseSql<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>toRemove<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
              <span class="token keyword">int</span> start <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> toRemove<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
              <span class="token keyword">int</span> end <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
              sql<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>  
              <span class="token keyword">break</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
          <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span>  
        <span class="token comment">// 如果需要拼接后缀，拼接一个空格再把指定的后缀拼接上</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>suffix <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
          sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
          sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>suffix<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
      <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>  
  <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29),l=[c];function i(u,k){return s(),a("div",null,l)}const d=n(o,[["render",i],["__file","0_Mybatis SQL动态解析原理.html.vue"]]);export{d as default};
