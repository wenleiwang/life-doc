import{_ as l,r as p,o as i,c as u,b as n,e as s,w as e,d as a,a as o}from"./app-7rGY8hGP.js";const d="/life-doc/assets/d63453303f4f93a181bc62867c22c9ee-amdcS61f.png",r="/life-doc/assets/cf24720e71582a566e4ed1de6064a862-DoAdp7OC.png",k="/life-doc/assets/53d7ea164449919adf7dd981ced5f29d-53eYRQhH.png",h="/life-doc/assets/f30bb669cff2d6dec17abcb1cbc9c511-ph1XGfl3.png",m={},v=n("h1",{id:"线程池",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#线程池","aria-hidden":"true"},"#"),a(" 线程池")],-1),b={class:"table-of-contents"},_=o('<h2 id="一、写在前面" tabindex="-1"><a class="header-anchor" href="#一、写在前面" aria-hidden="true">#</a> 一、写在前面</h2><p>听到线程池、线程，不禁都为为之端正姿势</p><h2 id="二、部分基础" tabindex="-1"><a class="header-anchor" href="#二、部分基础" aria-hidden="true">#</a> 二、部分基础</h2><h3 id="_1、两种线程模型" tabindex="-1"><a class="header-anchor" href="#_1、两种线程模型" aria-hidden="true">#</a> 1、两种线程模型</h3><p>用户级线程（ULT）：用户程序实现，不依赖操作系统核心，应用提供创建、同步、调度和管理新城的函数来控制用户线程。不需要用户态/内核态之间的切换，速度快，内核对ULT无感知。 内核线程（KLT）：系统内核管理线程，内核保存线程的状态和上下文，线程阻塞不会引起进程阻塞，在多处理器系统上，多线程在处理器上并行运行，线程创建、调度和管理由内核完成，效率要比ULT慢，比进程操作快。 直观感受下内核线程：如果创建的是内核线程，那么这个数字会增多。</p><p><img src="'+d+'" alt=""></p><p>Java线程创建是依赖于系统内核，通过JVM调用系统库创建内核线程，内核线程与Java-Thread是1:1关系</p><h3 id="_2、使用线程池的原因" tabindex="-1"><a class="header-anchor" href="#_2、使用线程池的原因" aria-hidden="true">#</a> 2、使用线程池的原因</h3><p>线程创建太麻烦，Java是依赖于内核线程，创建和销毁需要保存线程的状态和切换上下文，是一个小消耗资源的操作。为了避免资源消耗过度需要设法重用线程的执行多任务。线程池就是一个线程缓存，负责对线程进行统一分配、调优与监控。</p><h3 id="_3、什么时候使用线程池" tabindex="-1"><a class="header-anchor" href="#_3、什么时候使用线程池" aria-hidden="true">#</a> 3、什么时候使用线程池</h3><p>单个任务处理时间比较快 需要处理的任务数量比较大</p><h3 id="_4、线程池的优势" tabindex="-1"><a class="header-anchor" href="#_4、线程池的优势" aria-hidden="true">#</a> 4、线程池的优势</h3><p>重用存在的线程，减少创建线程、消亡的开销，提升性能 提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行 提高线程管理型，可以统一分配、调优和监控</p><h3 id="_5、包关系" tabindex="-1"><a class="header-anchor" href="#_5、包关系" aria-hidden="true">#</a> 5、包关系</h3><p>所有的线程都是继承自Executor，Executor是一个超类</p><p>ThreadPoolExecutor：比较常用</p><p>FrokJoinPool：幂级类</p><p>ScheduledTreadPoolExecutor：延时类</p><p>ThreadPoolTaskExecutor</p><p>ThreadPoolTaskScheduler</p><h3 id="_6、线程池的6个参数" tabindex="-1"><a class="header-anchor" href="#_6、线程池的6个参数" aria-hidden="true">#</a> 6、线程池的6个参数</h3><p>corePoolSize：核心线程池大小 maximumPoolSize：最多能创建多少个线程 keepAliveTime：如果没有工作，最长可以空闲多长时间 unit：时间单位 workQueue：都在工作状态，都阻塞，提供的阻塞队列，处理不过来，就放在阻塞队列。在任意时刻，不管并发多高，永远只有一个线程能够进队或出队，线程是安全的。 handler：阻塞队列已满，且线程数达到最大，所采用的饱和策略</p><h3 id="_7、线程池的工作原理" tabindex="-1"><a class="header-anchor" href="#_7、线程池的工作原理" aria-hidden="true">#</a> 7、线程池的工作原理</h3><p>用工作原理说线程池的几个参数 先上图镇楼</p><p><img src="'+r+`" alt=""></p><p>来了通过execute提交过来任务先进入corePool 当corePoll满了进入阻塞队列 当队列满了使用MaximumPoolSize的数量开启线程 当线程超过了MaximumPoolSize的数量，走饱和策略（拒绝策略）</p><h3 id="_8、四种常用的线程池及原理" tabindex="-1"><a class="header-anchor" href="#_8、四种常用的线程池及原理" aria-hidden="true">#</a> 8、四种常用的线程池及原理</h3><ul><li>newFixedThreadPool (固定数目线程的线程池)</li><li>newCachedThreadPool(可缓存线程的线程池)</li><li>newSingleThreadExecutor(单线程的线程池)</li><li>newScheduledThreadPool(定时及周期执行的线程池)</li></ul><h4 id="_1-newfixedthreadpool-固定数目线程的线程池" tabindex="-1"><a class="header-anchor" href="#_1-newfixedthreadpool-固定数目线程的线程池" aria-hidden="true">#</a> 1.newFixedThreadPool (固定数目线程的线程池)</h4><ul><li>核心线程数和最大线程数大小一样</li><li>没有所谓的非空闲时间，即keepAliveTime为0</li><li>阻塞队列为无界队列LinkedBlockingQueue</li></ul><p>使用场景：FixedThreadPool 适用于处理CPU密集型的任务，确保CPU在长期被工作线程使用的情况下，尽可能的少的分配线程，即适用执行长期的任务。</p><p><strong>使用注意：使用无界队列的线程池会导致内存飙升吗？</strong><strong>会的，newFixedThreadPool使用了无界的阻塞队列LinkedBlockingQueue，如果线程获取一个任务后，任务的执行时间比较长(比如，上面demo设置了10秒)，会导致队列的任务越积越多，导致机器内存使用不停飙升，</strong> 最终导致OOM。</p><p>OMM复现，IDE指定JVM参数：-Xmx8m -Xms8m ，然后运行就会报OOM</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// e</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-newcachedthreadpool-可缓存线程的线程池" tabindex="-1"><a class="header-anchor" href="#_2-newcachedthreadpool-可缓存线程的线程池" aria-hidden="true">#</a> 2.newCachedThreadPool(可缓存线程的线程池)</h4><p>线程池特点：</p><ul><li>核心线程数为0</li><li>最大线程数为Integer.MAX_VALUE</li><li>阻塞队列是SynchronousQueue</li><li>非核心线程空闲存活时间为60秒 工作机制：</li><li>提交任务</li><li>因为没有核心线程，所以任务直接加到SynchronousQueue队列。</li><li>判断是否有空闲线程，如果有，就去取出任务执行。</li><li>如果没有空闲线程，就新建一个线程执行。</li><li>执行完任务的线程，还可以存活60秒，如果在这期间，接到任务，可以继续活下去；否则，被销毁。</li></ul><p>使用场景：用于并发执行大量短期的小任务。</p><blockquote><p>极端情况下会创建过多的线程，耗尽 CPU 和内存资源。由于空闲 60 秒的线程会被终止，长时间保持空闲的 CachedThreadPool 不会占用任何资源。</p></blockquote><h4 id="_3-newsinglethreadexecutor-单线程的线程池" tabindex="-1"><a class="header-anchor" href="#_3-newsinglethreadexecutor-单线程的线程池" aria-hidden="true">#</a> 3.newSingleThreadExecutor(单线程的线程池)</h4><p>线程池特点：</p><ul><li>核心线程数为1</li><li>最大线程数也为1</li><li>阻塞队列是LinkedBlockingQueue</li><li>keepAliveTime为0</li></ul><p>工作机制：</p><ul><li>提交任务</li><li>线程池是否有一条线程在，如果没有，新建线程执行任务</li><li>如果有，将任务加到阻塞队列</li><li>当前的唯一线程，从队列取任务，执行完一个，再继续取，一个人（一条线程）夜以继日地干活。</li></ul><p>使用场景：适用于串行执行任务的场景，一个任务一个任务地执行。</p><h3 id="_4-newscheduledthreadpool-定时及周期执行的线程池" tabindex="-1"><a class="header-anchor" href="#_4-newscheduledthreadpool-定时及周期执行的线程池" aria-hidden="true">#</a> 4.newScheduledThreadPool(定时及周期执行的线程池)</h3><p>线程池特点：</p><ul><li>最大线程数为Integer.MAX_VALUE</li><li>阻塞队列是DelayedWorkQueue</li><li>keepAliveTime为0</li><li>scheduleAtFixedRate() ：按某种速率周期执行</li><li>scheduleWithFixedDelay()：在某个延迟后执行</li></ul><p>工作机制：</p><ul><li>添加一个任务</li><li>线程池中的线程从 DelayQueue 中取任务</li><li>线程从 DelayQueue 中获取 time 大于等于当前时间的task</li><li>执行完后修改这个 task 的 time 为下次被执行的时间</li><li>这个 task 放回DelayQueue队列中</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 创建一个给定初始延迟的间隔性的任务，之后的下次执行时间是上一次任务从执行到结束所需要的时间+* 给定的间隔时间
 */</span>
<span class="token class-name">ScheduledExecutorService</span> scheduledExecutorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
scheduledExecutorService<span class="token punctuation">.</span><span class="token function">scheduleWithFixedDelay</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;current Time&quot;</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;正在执行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用场景：周期性执行任务的场景，需要限制线程数量的场景</p><h3 id="_9、线程池常用的阻塞队列及选择" tabindex="-1"><a class="header-anchor" href="#_9、线程池常用的阻塞队列及选择" aria-hidden="true">#</a> 9、线程池常用的阻塞队列及选择</h3><ul><li>LinkedBlockingQueue-无界队列</li><li>ArrayBlockingQueue-有界队列</li><li>PriorityBlockingQueue-优先级队列</li><li>SynchronousQueue-同步移交队列（同步队列）</li><li>DelayQueue-延迟队列</li></ul><h4 id="_1-无界队列linkdeblackqueue" tabindex="-1"><a class="header-anchor" href="#_1-无界队列linkdeblackqueue" aria-hidden="true">#</a> 1.无界队列LinkdeBlackQueue</h4><p>队列大小无限制，常用的无界队列LinkdeBlackQueue，使用该队列作为阻塞队列时要尤其小心，当任务耗时较长时，可能会导致大量的新任务在队列中堆积最终导致OOM 1 。Executors.newFixedThreadPool()采用的就是LinkedBlockingQueue</p><h4 id="_2-有界队列arrayblockingqueue和priorityblockingqueue" tabindex="-1"><a class="header-anchor" href="#_2-有界队列arrayblockingqueue和priorityblockingqueue" aria-hidden="true">#</a> 2.有界队列ArrayBlockingQueue和PriorityBlockingQueue</h4><p>常用的有两类 遵循FIFO原则的队列，例如：ArrayBlockingQueue，是一个用数组实现的有界阻塞队列，按FIFO排序量 优先级队列，例如：PriorityBlockingQueue 使用有界队列时队列大小和线程池大小相互配合，线程池较小有界队列较大时可减少内存消耗，降低CPU的使用率和上下文切换，但有可能会限制系统吞吐量。</p><h4 id="_3-同步移交队列-同步队列-synchronousqueue" tabindex="-1"><a class="header-anchor" href="#_3-同步移交队列-同步队列-synchronousqueue" aria-hidden="true">#</a> 3.同步移交队列（同步队列）SynchronousQueue</h4><p>如果不希望任务在队列中等待而是希望将任务直接移交工作线程，可以使用SynchronousQueue作为等待队列，SyncronousQueue不是一个真正的队列，而是一种线程之间移交的机制。只有在使用无界线程或有饱和策略时才建议使用该队列。 一个不存储元素的阻塞队列，每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量通常要高于LinkedBlockingQuene。newCachedThreadPool线程池使用了这个队列</p><h4 id="_4-延迟队列delayqueue" tabindex="-1"><a class="header-anchor" href="#_4-延迟队列delayqueue" aria-hidden="true">#</a> 4.延迟队列DelayQueue</h4><p>是一个任务定时周期的延迟执行的队列。根据指定的执行时间从小到大排序，否则根据插入到队列的先后排序。newScheduledThreadPool线程池使用了这个队列。</p>`,62),f=o('<h3 id="_10、饱和策略的选择" tabindex="-1"><a class="header-anchor" href="#_10、饱和策略的选择" aria-hidden="true">#</a> 10、饱和策略的选择</h3><p>Java提供四种，最后一个是Tomcat的</p><p><img src="'+k+`" alt=""></p><h4 id="_1-默认abortpolicy" tabindex="-1"><a class="header-anchor" href="#_1-默认abortpolicy" aria-hidden="true">#</a> 1.默认AbortPolicy</h4><p>终止策略：使用该策略在饱和时会抛出RejectedExectionExcetion（继承自RuntimeException），调用者可以捕捉该异常自行处理</p><h4 id="_2-discardpoicy" tabindex="-1"><a class="header-anchor" href="#_2-discardpoicy" aria-hidden="true">#</a> 2.DiscardPoicy</h4><p>抛弃策略：不做任何处理，相当于直接抛弃任务，看下源码直接就是{}什么都没有做</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rejectedExecution</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">,</span> <span class="token class-name">ThreadPoolExecutor</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-discardoldestpolicy" tabindex="-1"><a class="header-anchor" href="#_3-discardoldestpolicy" aria-hidden="true">#</a> 3.DiscardOldestPolicy</h4><p>抛弃旧任务策略：先将阻塞队列中的头元素出队抛弃，再尝试提交任务。如果此时阻塞队列使用PriorityBlockQueue优先队列，将会导致优先级最高的任务被抛弃，因此不建议将该种策略配合优先级队列使用。 看一下源码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rejectedExecution</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">,</span> <span class="token class-name">ThreadPoolExecutor</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">.</span><span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        e<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-callerrunspolicy" tabindex="-1"><a class="header-anchor" href="#_4-callerrunspolicy" aria-hidden="true">#</a> 4.CallerRunsPolicy</h4><p>调用者运行：既不抛弃任务也不抛弃异常，直接运行任务的run方法，换言之将任务回退给调用者直接运行。使用该策略时线程池饱和后将由调用线程池的主线程自己来执行任务，因此在执行任务的这段时间里主线程无法再提价新任务，从而使线程池中工作线程有时间将正在处理的任务处理完成。 看下源码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rejectedExecution</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">,</span> <span class="token class-name">ThreadPoolExecutor</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">.</span><span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        r<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11、生命周期" tabindex="-1"><a class="header-anchor" href="#_11、生命周期" aria-hidden="true">#</a> 11、生命周期</h3><p><img src="`+h+`" alt=""></p><h2 id="三、应用" tabindex="-1"><a class="header-anchor" href="#三、应用" aria-hidden="true">#</a> 三、应用</h2><h3 id="_1、创建线程池" tabindex="-1"><a class="header-anchor" href="#_1、创建线程池" aria-hidden="true">#</a> 1、创建线程池</h3><p>本实例是开启5个线程，队列大小设置1000，饱和策略是调用者运行；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ExecutorService</span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">60L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> 
            <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、使用" tabindex="-1"><a class="header-anchor" href="#_2、使用" aria-hidden="true">#</a> 2、使用</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">TempStoreInfo</span> item <span class="token operator">:</span> monoList<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、停止" tabindex="-1"><a class="header-anchor" href="#_3、停止" aria-hidden="true">#</a> 3、停止</h3><p>常用关闭线程</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pool<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//设置超时</span>
        <span class="token comment">// 超时的时候向线程池中所有的线程发出中断(interrupted)。</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;超时了。。。。中断所有子进程，停止所有任务&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pool<span class="token punctuation">.</span><span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// awaitTermination方法被中断的时候也中止线程池中全部的线程的执行。</span>
    pool<span class="token punctuation">.</span><span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>OOM：Out Of Memory，在学习JVM虚拟机时有过这个概念. 元空间溢出是Out of Memory Error Metaspace，java8后方法区由本地内存管理内地化一份元空间。用作存储类信息（类名、父类、成员变量、方法等）、运行时常量池、类加载器、静态变量。 堆内存溢出是Out of Memory heap，存储对象、数组。 他们都是OOM ↩︎</p><p>FIFO：先进先出队列</p></blockquote><h3 id="线程池异常处理" tabindex="-1"><a class="header-anchor" href="#线程池异常处理" aria-hidden="true">#</a> 线程池异常处理</h3><p>在使用线程池处理任务的时候，任务代码可能抛出RuntimeException，抛出异常后，线程池可能捕获它，也可能创建一个新的线程来代替异常的线程，我们可能无法感知任务出现了异常，因此我们需要考虑线程池异常情况。</p><p>虽然没有结果输出，但是没有抛出异常，所以我们无法感知任务出现了异常，所以需要添加try/catch。<strong>我们直接try...catch捕获</strong></p><p>#线程</p>`,30);function x(g,y){const t=p("router-link"),c=p("RouterLink");return i(),u("div",null,[v,n("nav",b,[n("ul",null,[n("li",null,[s(t,{to:"#一、写在前面"},{default:e(()=>[a("一、写在前面")]),_:1})]),n("li",null,[s(t,{to:"#二、部分基础"},{default:e(()=>[a("二、部分基础")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#_1、两种线程模型"},{default:e(()=>[a("1、两种线程模型")]),_:1})]),n("li",null,[s(t,{to:"#_2、使用线程池的原因"},{default:e(()=>[a("2、使用线程池的原因")]),_:1})]),n("li",null,[s(t,{to:"#_3、什么时候使用线程池"},{default:e(()=>[a("3、什么时候使用线程池")]),_:1})]),n("li",null,[s(t,{to:"#_4、线程池的优势"},{default:e(()=>[a("4、线程池的优势")]),_:1})]),n("li",null,[s(t,{to:"#_5、包关系"},{default:e(()=>[a("5、包关系")]),_:1})]),n("li",null,[s(t,{to:"#_6、线程池的6个参数"},{default:e(()=>[a("6、线程池的6个参数")]),_:1})]),n("li",null,[s(t,{to:"#_7、线程池的工作原理"},{default:e(()=>[a("7、线程池的工作原理")]),_:1})]),n("li",null,[s(t,{to:"#_8、四种常用的线程池及原理"},{default:e(()=>[a("8、四种常用的线程池及原理")]),_:1})]),n("li",null,[s(t,{to:"#_4-newscheduledthreadpool-定时及周期执行的线程池"},{default:e(()=>[a("4.newScheduledThreadPool(定时及周期执行的线程池)")]),_:1})]),n("li",null,[s(t,{to:"#_9、线程池常用的阻塞队列及选择"},{default:e(()=>[a("9、线程池常用的阻塞队列及选择")]),_:1})]),n("li",null,[s(t,{to:"#_10、饱和策略的选择"},{default:e(()=>[a("10、饱和策略的选择")]),_:1})]),n("li",null,[s(t,{to:"#_11、生命周期"},{default:e(()=>[a("11、生命周期")]),_:1})])])]),n("li",null,[s(t,{to:"#三、应用"},{default:e(()=>[a("三、应用")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#_1、创建线程池"},{default:e(()=>[a("1、创建线程池")]),_:1})]),n("li",null,[s(t,{to:"#_2、使用"},{default:e(()=>[a("2、使用")]),_:1})]),n("li",null,[s(t,{to:"#_3、停止"},{default:e(()=>[a("3、停止")]),_:1})]),n("li",null,[s(t,{to:"#线程池异常处理"},{default:e(()=>[a("线程池异常处理")]),_:1})])])])])]),_,n("p",null,[s(c,{to:"/view/java/1_base/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97DeayQueue.html"},{default:e(()=>[a("延时队列的使用看文章：Springboot延时队列DeayQueue的使用")]),_:1})]),f])}const T=l(m,[["render",x],["__file","线程池.html.vue"]]);export{T as default};
