import{_ as a,o as e,c as r,a as i}from"./app-7rGY8hGP.js";const n="/life-doc/assets/img_20231119_3-hm9Sn-Go.png",d={},o=i('<h1 id="random模块的使用" tabindex="-1"><a class="header-anchor" href="#random模块的使用" aria-hidden="true">#</a> random模块的使用</h1><h2 id="random模块的使用-1" tabindex="-1"><a class="header-anchor" href="#random模块的使用-1" aria-hidden="true">#</a> random模块的使用</h2><p>是使用随机数的Python标准库</p><p>伪随机数：采用梅森旋转算法生成的（伪）随机序列中元素 计算机不能产生真正的随机数，所以伪随机数被称为随机数</p><h2 id="基本函数" tabindex="-1"><a class="header-anchor" href="#基本函数" aria-hidden="true">#</a> 基本函数</h2><p>随机数种子产生，随机数种子确定了随机数序列。种子给一次就行。</p><ul><li>.seed(a = None)：初始化给定的随机数种子，默认为当前系统时间。给几产生几个随机序列</li><li>.random()：生成一个[0.0, 1.0]之间的随机小数</li></ul><blockquote><p>为什么使用种子：因为只要种子相同，下次运行程序还是这个序列，可以复现 <img src="'+n+'" alt=""> 只要我们重新设置seed下次random的值是一样的。</p></blockquote><h2 id="扩展函数" tabindex="-1"><a class="header-anchor" href="#扩展函数" aria-hidden="true">#</a> 扩展函数</h2><ul><li>.randint(a, b)：生成一个[a, b]之间的整数</li><li>.getrandbits(m, n [, k])：生成一个[m, n) 之间以k为步长的随机整数</li><li>.uniform(k)：生成k比特长的随机整数</li><li>.randrange(a, b)：生成一个[a，b]之间的随机小数，浮点类型16位小数</li><li>.choice(seq)：从序列seq中随机选择一个元素</li><li>.shuffle(seq)：将序列seq中元素随机排列，返回打乱后的序列</li></ul>',10),l=[o];function t(s,h){return e(),r("div",null,l)}const _=a(d,[["render",t],["__file","4_random模块的使用.html.vue"]]);export{_ as default};
