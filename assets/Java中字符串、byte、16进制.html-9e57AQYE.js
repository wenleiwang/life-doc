import{_ as n,o as a,c as s,a as p}from"./app-7rGY8hGP.js";const t={},o=p(`<h1 id="java中字符串、byte、16进制" tabindex="-1"><a class="header-anchor" href="#java中字符串、byte、16进制" aria-hidden="true">#</a> Java中字符串、byte、16进制</h1><h2 id="有符号数、无符号数" tabindex="-1"><a class="header-anchor" href="#有符号数、无符号数" aria-hidden="true">#</a> 有符号数、无符号数</h2><ul><li>无符号数中，所有的位都用于表示该值的大小</li><li>有符号数中，最高位用于表示正负</li></ul><p>无符号数： 1111 1111 值：<code>255 1*2^7+1*2^6+1*2^5+1*2^4+1*2^3+1*2^2+1*2^1+1*2^0</code></p><p>有符号数： 0111 1111 值：<code>127 1*2^6+1*2^5+1*2^4+1*2^3+1*2^2+1*2^1+1*2^0</code></p><p>同样是一个字节，无符号数的最大值是255，而有符号数的最大值是127。原因是有符号数中的最高位被挪去表示符号了(第一位0表示正数，1表示负数)。并且，我们知道，最高位的权值也是最高的（对于1字节数来说是2的7次方=128），所以仅仅少于一位，最大值一下子减半。</p><p>有符号数： 1000 0000 值：<code>-128 1*2^6+1*2^5+1*2^4+1*2^3+1*2^2+1*2^1+1*2^0</code></p><p>不过，有符号数的长处是它可以表示负数。因此，虽然它的在最大值缩水了，却在负值的方向出现了伸展。我们仍一个字节的数值对比：</p><p>无符号数： <code>0</code> —————– <code>255</code></p><p>有符号数： <code>-128</code> ——— <code>0</code> ———<code>127</code></p><p>同样是一个字节，无符号的最小值是 0 ，而有符号数的最小值是-128。所以二者能表达的不同的数值的个数都一样是256个。只不过前者表达的是 <code>0</code> 到 <code>255</code> 这256个数，后者表达的是 <code>-128</code> 到 <code>+127</code> 这256个数。</p><blockquote><p>由于Java中的<code>byte</code>是有符号类型，所以在使用时需要确保转换结果是符合预期的。如果你希望将<code>byte</code>视为无符号类型，可以通过与<code>0xFF</code>按位与操作来清除符号位。</p></blockquote><h2 id="java中的-byte-与-16-进制" tabindex="-1"><a class="header-anchor" href="#java中的-byte-与-16-进制" aria-hidden="true">#</a> java中的 byte 与 16 进制</h2><p>java 中 byte 用二进制表示占 8 位（一个字节），而 16 进制的每个字符需要用 4 位来表示，所以可以把每个 byte 转换成两个 16 进制的字符，也就是把 byte 的高 4 位和低 4 位分别转成 16 进制字符的H和L，并组合起来得到 byte 转成 16 进制字符串的结果是 <code>new String(H) + new String(L)</code> 。即 byte 用 16 进制表示只占 2 位。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//byte转换成16进制</span>
<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">HEX_ARRAY</span> <span class="token operator">=</span> <span class="token string">&quot;0123456789ABCDEF&quot;</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">86</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> v <span class="token operator">=</span> b <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">;</span><span class="token comment">//转成int</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token constant">HEX_ARRAY</span><span class="token punctuation">[</span><span class="token punctuation">(</span>b<span class="token operator">&amp;</span><span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;&gt;</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出A   提取高位字节**b&amp;0xFF必须括号括起来，不然后面的&gt;&gt;&gt;会先操作**</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token constant">HEX_ARRAY</span><span class="token punctuation">[</span>b<span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token operator">&amp;</span><span class="token number">0x0f</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出A    提前低位字节</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token constant">HEX_ARRAY</span><span class="token punctuation">[</span>b<span class="token operator">&amp;</span><span class="token number">255</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出A       0xff、0xFF、255是表示同一个值，0x0f、15是同一个值</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token constant">HEX_ARRAY</span><span class="token punctuation">[</span><span class="token punctuation">(</span>b<span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;&gt;</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">&quot;&quot;</span><span class="token operator">+</span><span class="token constant">HEX_ARRAY</span><span class="token punctuation">[</span>b<span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token operator">&amp;</span><span class="token number">0x0f</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>16进制：0x06 十进制：6 二进制：00000110 二进制转10进制的方法：<code>Math.pow(2,1)+Math.pow(2,2) </code></p><p>16进制：0x41 十进制：65 二进制：01000001 二进制转10进制的方法：<code>Math.pow(2,0)+Math.pow(2,6) </code></p><p>16进制：0x06-0x41 （高位在前低位再后） 十进制：1601 二进制是：00000110 01000001 二进制转10进制的方法：<code>Math.pow(2,0)+Math.pow(2,6)+Math.pow(2,9)+Math.pow(2,10)</code></p><p>(-7,-78)=-1614 ，其中(-7,-78)是2个byte -7 原码:10000111 反码:11111000 补码:11111001 -78 原码:11001110 反码:10110001 补码:10110010</p><p>-7是高位，-78是低位 原码:11111001 10110010 反码:10000110 01001101 补码:10000110 01001110</p><p><code>Math.pow(2,1)+Math.pow(2,2)+Math.pow(2,3)+Math.pow(2,6) +Math.pow(2,9)+Math.pow(2,10)</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//byte h = -7,l=-78;//-1614</span>
<span class="token comment">//byte h = 5,l=-100;//1436</span>
<span class="token comment">//byte h = 7,l=-1;//2047</span>
<span class="token keyword">byte</span> h <span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token operator">-</span><span class="token number">69</span><span class="token punctuation">;</span><span class="token comment">//1979</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),e=[o];function c(l,u){return a(),s("div",null,e)}const k=n(t,[["render",c],["__file","Java中字符串、byte、16进制.html.vue"]]);export{k as default};
